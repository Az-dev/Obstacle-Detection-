
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b1  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  00001edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c03  00000000  00000000  0000296f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000835  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080c  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000048ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_9>
  28:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_10>
  2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	78 94       	sei
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b6:	04 b6       	in	r0, 0x34	; 52
  b8:	06 fe       	sbrs	r0, 6
  ba:	12 c0       	rjmp	.+36     	; 0xe0 <__vector_3+0x4e>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  cc:	84 b7       	in	r24, 0x34	; 52
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d2:	8a b7       	in	r24, 0x3a	; 58
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	1f c0       	rjmp	.+62     	; 0x11e <__vector_3+0x8c>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  e0:	04 b6       	in	r0, 0x34	; 52
  e2:	06 fc       	sbrc	r0, 6
  e4:	1c c0       	rjmp	.+56     	; 0x11e <__vector_3+0x8c>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ec:	60 e6       	ldi	r22, 0x60	; 96
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	8f 7d       	andi	r24, 0xDF	; 223
 10a:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10c:	84 b7       	in	r24, 0x34	; 52
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 112:	8a b7       	in	r24, 0x3a	; 58
 114:	80 62       	ori	r24, 0x20	; 32
 116:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
#include "APP/CarSM/CarSM.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   //TimerTest(); /* ---> test passed*/
   TmuTest();
 140:	0e 94 7f 01 	call	0x2fe	; 0x2fe <TmuTest>
   /*------------------- START CAR APPLICATION  ------------------------*/
   //Car_SM_Init();
   //Car_SM_Update();
   /*------------------- END CAR APPLICATION   ------------------------*/ 
    
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <Timer_Start>:
   }
   else
   {
      return E_NOK;
   }
}
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	59 f0       	breq	.+22     	; 0x164 <Timer_Start+0x1a>
 14e:	18 f0       	brcs	.+6      	; 0x156 <Timer_Start+0xc>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	99 f0       	breq	.+38     	; 0x17a <Timer_Start+0x30>
 154:	18 c0       	rjmp	.+48     	; 0x186 <Timer_Start+0x3c>
 156:	62 bf       	out	0x32, r22	; 50
 158:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <gu8_t0Prescaler>
 15c:	83 b7       	in	r24, 0x33	; 51
 15e:	89 2b       	or	r24, r25
 160:	83 bf       	out	0x33, r24	; 51
 162:	11 c0       	rjmp	.+34     	; 0x186 <Timer_Start+0x3c>
 164:	77 27       	eor	r23, r23
 166:	7d bd       	out	0x2d, r23	; 45
 168:	6c bd       	out	0x2c, r22	; 44
 16a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu16_t1Prescaler>
 16e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <gu16_t1Prescaler+0x1>
 172:	9e b5       	in	r25, 0x2e	; 46
 174:	89 2b       	or	r24, r25
 176:	8e bd       	out	0x2e, r24	; 46
 178:	06 c0       	rjmp	.+12     	; 0x186 <Timer_Start+0x3c>
 17a:	64 bd       	out	0x24, r22	; 36
 17c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <gu8_t2Prescaler>
 180:	85 b5       	in	r24, 0x25	; 37
 182:	89 2b       	or	r24, r25
 184:	85 bd       	out	0x25, r24	; 37
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret

0000018a <Timer_Stop>:
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	39 f0       	breq	.+14     	; 0x19c <Timer_Stop+0x12>
 18e:	18 f0       	brcs	.+6      	; 0x196 <Timer_Stop+0xc>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	39 f0       	breq	.+14     	; 0x1a2 <Timer_Stop+0x18>
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <Timer_Stop+0x1c>
 196:	83 b7       	in	r24, 0x33	; 51
 198:	13 be       	out	0x33, r1	; 51
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <Timer_Stop+0x1c>
 19c:	8e b5       	in	r24, 0x2e	; 46
 19e:	1e bc       	out	0x2e, r1	; 46
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Timer_Stop+0x1c>
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	15 bc       	out	0x25, r1	; 37
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret

000001aa <Timer_SetValue>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	31 f0       	breq	.+12     	; 0x1ba <Timer_SetValue+0x10>
 1ae:	18 f0       	brcs	.+6      	; 0x1b6 <Timer_SetValue+0xc>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <Timer_SetValue+0x16>
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <Timer_SetValue+0x18>
 1b6:	62 bf       	out	0x32, r22	; 50
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <Timer_SetValue+0x18>
 1ba:	7d bd       	out	0x2d, r23	; 45
 1bc:	6c bd       	out	0x2c, r22	; 44
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <Timer_SetValue+0x18>
 1c0:	64 bd       	out	0x24, r22	; 36
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <Timer_GetValue>:
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	d9 f0       	breq	.+54     	; 0x202 <Timer_GetValue+0x3c>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <Timer_GetValue+0x20>
 1d0:	18 f0       	brcs	.+6      	; 0x1d8 <Timer_GetValue+0x12>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	79 f0       	breq	.+30     	; 0x1f4 <Timer_GetValue+0x2e>
 1d6:	17 c0       	rjmp	.+46     	; 0x206 <Timer_GetValue+0x40>
 1d8:	82 b7       	in	r24, 0x32	; 50
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fb 01       	movw	r30, r22
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
 1e6:	8c b5       	in	r24, 0x2c	; 44
 1e8:	9d b5       	in	r25, 0x2d	; 45
 1ea:	fb 01       	movw	r30, r22
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fb 01       	movw	r30, r22
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret

0000020a <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 20a:	78 94       	sei
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
 21e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu16_preloader>
 222:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 226:	82 bf       	out	0x32, r24	; 50
/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 228:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <gu16_preloader>
 22c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	82 1b       	sub	r24, r18
 236:	93 0b       	sbc	r25, r19
 238:	82 bf       	out	0x32, r24	; 50
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */
   PORTB_DIR = 0xff;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	80 95       	com	r24
 242:	88 bb       	out	0x18, r24	; 24
   
}
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_9>:

ISR_TIMER1_OVF(){
 256:	78 94       	sei
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
 266:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu16_preloader>
 26a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu16_preloader+0x1>
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 26e:	9d bd       	out	0x2d, r25	; 45
 270:	8c bd       	out	0x2c, r24	; 44

ISR_TIMER1_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));   
 272:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu16_preloader>
 276:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu16_preloader+0x1>
 27a:	91 95       	neg	r25
 27c:	81 95       	neg	r24
 27e:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 280:	9d bd       	out	0x2d, r25	; 45
 282:	8c bd       	out	0x2c, r24	; 44
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */
   PORTB_DIR = 0xff;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	80 95       	com	r24
 28c:	88 bb       	out	0x18, r24	; 24
   
}
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_5>:

ISR_TIMER2_OVF(){
 29c:	78 94       	sei
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
 2b0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu16_preloader>
 2b4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 2b8:	84 bd       	out	0x24, r24	; 36

ISR_TIMER2_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 2ba:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <gu16_preloader>
 2be:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	82 1b       	sub	r24, r18
 2c8:	93 0b       	sbc	r25, r19
 2ca:	84 bd       	out	0x24, r24	; 36
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */  
   PORTB_DIR = 0xff;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	80 95       	com	r24
 2d4:	88 bb       	out	0x18, r24	; 24
   
}
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_10>:



ISR_TIMER0_COMP(){
 2e8:	78 94       	sei
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <TmuTest>:
*  @param void
*
*  @return void
*/
void TmuTest(void)
{
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
