
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000130e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000130e  000013a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000081  008000b0  008000b0  000013f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a4  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014fb  00000000  00000000  00004dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d30  00000000  00000000  000062f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008dc  00000000  00000000  00008028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000149c  00000000  00000000  00008904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ff3  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000bd93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_9>
      28:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_10>
      2c:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__vector_11>
      30:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_12>
      34:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 03 	call	0x730	; 0x730 <main>
      8a:	0c 94 85 09 	jmp	0x130a	; 0x130a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimeOut>:
 *
 *  @return void
 */
static void TimeOut(void)
{
   if(genm_sysState == TIME_OUT && no_of_trials != 0)
      92:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
      96:	84 30       	cpi	r24, 0x04	; 4
      98:	61 f4       	brne	.+24     	; 0xb2 <TimeOut+0x20>
      9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      9e:	88 23       	and	r24, r24
      a0:	41 f0       	breq	.+16     	; 0xb2 <TimeOut+0x20>
   {
      /* retry procedure : By forcing the state again*/
      genm_sysState = genm_recordErrorState;
      a2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <genm_recordErrorState>
      a6:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <genm_sysState>
      /* Decrement no of trials */
      no_of_trials--;
      aa:	81 50       	subi	r24, 0x01	; 1
      ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      b0:	08 95       	ret
       
   }
   else /* Time out trials is up , so reset */
   {
      /* Reinitialize number of trials */
      no_of_trials = NO_OF_TRIALS;
      b2:	82 e0       	ldi	r24, 0x02	; 2
      b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      /* Go into Reset state*/
      genm_sysState = RESET;
      b8:	85 e0       	ldi	r24, 0x05	; 5
      ba:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
      be:	08 95       	ret

000000c0 <Reset>:
*
*  @return void
*/
static void Reset(void)
{
   if(RESET == genm_sysState)
      c0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
      c4:	85 30       	cpi	r24, 0x05	; 5
      c6:	11 f4       	brne	.+4      	; 0xcc <Reset+0xc>
   {
      /* Reset system state*/
      genm_sysState = INITIALIZE;
      c8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <genm_sysState>
      cc:	08 95       	ret

000000ce <SteeringAction>:
 *	@param void
 *
 *	@param void
 */
 static void SteeringAction(void)
 {
      ce:	cf 93       	push	r28
    /* check current state */
    if(STEERING_ACTION == genm_sysState)
      d0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
      d4:	83 30       	cpi	r24, 0x03	; 3
      d6:	a9 f5       	brne	.+106    	; 0x142 <SteeringAction+0x74>
    {
       static uint32_t su32_distance; 
       /*-- 1 - Get Distance Value --*/
       uint8_t au8_getDistErrorState = Get_DistanceVal(&su32_distance);
      d8:	80 eb       	ldi	r24, 0xB0	; 176
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 43 06 	call	0xc86	; 0xc86 <Get_DistanceVal>
      e0:	c8 2f       	mov	r28, r24
       /*-- 2 - Take a steering action based on the distance value and Distance Boundary values --*/
       uint8_t au8_SteeringErrorState = 0;       
       if(su32_distance < (uint32_t)DOWN_BOUNDARY_DISTANCE)
      e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
      e6:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
      ea:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <__data_end+0x2>
      ee:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <__data_end+0x3>
      f2:	89 31       	cpi	r24, 0x19	; 25
      f4:	91 05       	cpc	r25, r1
      f6:	a1 05       	cpc	r26, r1
      f8:	b1 05       	cpc	r27, r1
      fa:	28 f4       	brcc	.+10     	; 0x106 <SteeringAction+0x38>
       {
          /* Move BackWard & Turn left */
          //Steering_SteerCar(CAR_FORWARD, 50);
          //softwareDelayMs(30);          
          au8_SteeringErrorState = Steering_SteerCar(CAR_LEFT, 40);
      fc:	68 e2       	ldi	r22, 0x28	; 40
      fe:	84 e0       	ldi	r24, 0x04	; 4
     100:	0e 94 4d 01 	call	0x29a	; 0x29a <Steering_SteerCar>
     104:	10 c0       	rjmp	.+32     	; 0x126 <SteeringAction+0x58>
          //softwareDelayMs(7);          
       }
       else if((su32_distance >= (uint32_t)DOWN_BOUNDARY_DISTANCE) && (su32_distance <= (uint32_t)UP_BOUNDARY_DISTANCE))
     106:	49 97       	sbiw	r24, 0x19	; 25
     108:	a1 09       	sbc	r26, r1
     10a:	b1 09       	sbc	r27, r1
     10c:	0b 97       	sbiw	r24, 0x0b	; 11
     10e:	a1 05       	cpc	r26, r1
     110:	b1 05       	cpc	r27, r1
     112:	28 f4       	brcc	.+10     	; 0x11e <SteeringAction+0x50>
       {
          /* Turn left */
          au8_SteeringErrorState = Steering_SteerCar(CAR_RIGHT, 50);
     114:	62 e3       	ldi	r22, 0x32	; 50
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	0e 94 4d 01 	call	0x29a	; 0x29a <Steering_SteerCar>
     11c:	04 c0       	rjmp	.+8      	; 0x126 <SteeringAction+0x58>
          //softwareDelayMs(5);          
       }
       else
       {
          /* Move Straight forward */
          au8_SteeringErrorState = Steering_SteerCar(CAR_BACKWARD, 35);
     11e:	63 e2       	ldi	r22, 0x23	; 35
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 4d 01 	call	0x29a	; 0x29a <Steering_SteerCar>
          //softwareDelayMs(10);          
       }

       /* After this : Check Error_state returned by each function */
       if((E_NOK != au8_SteeringErrorState) && (DISTANCE_GET_FAIL != au8_getDistErrorState))
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	31 f0       	breq	.+12     	; 0x136 <SteeringAction+0x68>
     12a:	c8 30       	cpi	r28, 0x08	; 8
     12c:	21 f0       	breq	.+8      	; 0x136 <SteeringAction+0x68>
       {
          /* update System state machine to the next state */
          genm_sysState = TRIGGER_MEASUREMENT;          
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     134:	06 c0       	rjmp	.+12     	; 0x142 <SteeringAction+0x74>
       }
       else
       {
          /* Record the current error_state state */
          genm_recordErrorState = STEERING_ACTION;
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <genm_recordErrorState>
          /* Go into a time out state to take a time out procedure */
          genm_sysState = TIME_OUT;
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
          /*NOte : we could add in the future a reporting mechanism for Error states variables*/
       }
    }
 }
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <CalculateMeasurement>:
 *	@param void
 */
 static void CalculateMeasurement(void)
 {
    /* check current state */
    if(CALC_MEASUREMENT == genm_sysState)
     146:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
     14a:	82 30       	cpi	r24, 0x02	; 2
     14c:	71 f4       	brne	.+28     	; 0x16a <CalculateMeasurement+0x24>
    {
       /* Trigger Measurement calculation */
       uint8_t au8_UsCalcErrorState = Us_CalcDistance();
     14e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Us_CalcDistance>
       /* After this : Check Error_state returned by each function */
       if(E_NOK != au8_UsCalcErrorState)
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	21 f0       	breq	.+8      	; 0x15e <CalculateMeasurement+0x18>
       {
          /* update System state machine to the next state */
          genm_sysState = STEERING_ACTION;          
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     15c:	08 95       	ret
       }
       else
       {
          /* Record the current Error_state state */
          genm_recordErrorState = CALC_MEASUREMENT;
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <genm_recordErrorState>
          /* Go into a time out state to take a time out procedure */
          genm_sysState = TIME_OUT;
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     16a:	08 95       	ret

0000016c <TriggerMeasurement>:
 *	@param void
 */
 static void TriggerMeasurement(void)
 {
    /* check current state */
    if(TRIGGER_MEASUREMENT == genm_sysState)
     16c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	71 f4       	brne	.+28     	; 0x190 <TriggerMeasurement+0x24>
    {
       /*-- Triggering Ultrasonic ---*/
       uint8_t au8_UsTriggerErrorState = Us_Trigger();
     174:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Us_Trigger>
       /* After this : Check Error_state returned by each function */
       if(E_NOK != au8_UsTriggerErrorState)
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	21 f0       	breq	.+8      	; 0x184 <TriggerMeasurement+0x18>
       {
          /* update System state machine to the next state */
          genm_sysState = CALC_MEASUREMENT;          
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     182:	08 95       	ret
       }
       else
       {
          /* Record the current error_state state */
          genm_recordErrorState = TRIGGER_MEASUREMENT;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <genm_recordErrorState>
          /* Go into a time out state to take a time out procedure */
          genm_sysState = TIME_OUT;
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     190:	08 95       	ret

00000192 <InitTask>:
 *	@param void
 *
 *	@param void
 */
 static void InitTask(void)
 {
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
    /* check current state */
    if(INITIALIZE == genm_sysState)
     198:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <genm_sysState>
     19c:	81 11       	cpse	r24, r1
     19e:	20 c0       	rjmp	.+64     	; 0x1e0 <InitTask+0x4e>
    {

       /* 1 - Initialize Ultrasonic and SwICU ----*/
       uint8_t au8_UsInitErrorState = Us_Init();
     1a0:	0e 94 36 03 	call	0x66c	; 0x66c <Us_Init>
     1a4:	c8 2f       	mov	r28, r24
       uint8_t au8_IcuInitErrorState = Icu_Init(&Icu_config);
     1a6:	81 e6       	ldi	r24, 0x61	; 97
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <Icu_Init>
     1ae:	d8 2f       	mov	r29, r24
       uint8_t au8_IcuConfEdgeErrorState = Icu_ConfigEdge(ICU_CH2,ICU_RISE_TO_FALL);       
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Icu_ConfigEdge>
     1b8:	18 2f       	mov	r17, r24
       /* 2- Initialize Steering ----*/
       uint8_t au8_SteeringInitErrorState = Steering_Init();
     1ba:	0e 94 35 01 	call	0x26a	; 0x26a <Steering_Init>
       /* After this : Check Error_state returned by each function */
       if(( E_NOK != au8_UsInitErrorState ) && ( E_NOK != au8_IcuInitErrorState ) && ( E_NOK != au8_SteeringInitErrorState ) && ( E_NOK != au8_IcuConfEdgeErrorState ))
     1be:	c1 30       	cpi	r28, 0x01	; 1
     1c0:	51 f0       	breq	.+20     	; 0x1d6 <InitTask+0x44>
     1c2:	d1 30       	cpi	r29, 0x01	; 1
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <InitTask+0x44>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <InitTask+0x44>
     1ca:	11 30       	cpi	r17, 0x01	; 1
     1cc:	21 f0       	breq	.+8      	; 0x1d6 <InitTask+0x44>
       {
          /* update System state machine to the next state */
          genm_sysState = TRIGGER_MEASUREMENT;          
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
     1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <InitTask+0x4e>
       }
       else
       {
          /* Record the current error_state state */
          genm_recordErrorState = INITIALIZE;
     1d6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <genm_recordErrorState>
          /* Go into a time out state to take a time out procedure */
          genm_sysState = TIME_OUT;
     1da:	84 e0       	ldi	r24, 0x04	; 4
     1dc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <genm_sysState>
          /*NOte : we could add in the future a reporting mechanism for Error states variables*/
       }
    }
 }
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	08 95       	ret

000001e8 <Car_SOS>:
*  @return void
*/
void Car_SOS(void)
{
   /* Initialize State */
   genm_sysState = INITIALIZE;
     1e8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <genm_sysState>
   /* Initialize SOS */
   SOS_Init(&gstrSOSConfig);
     1ec:	8d ea       	ldi	r24, 0xAD	; 173
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 77 06 	call	0xcee	; 0xcee <SOS_Init>
   /* Add system tasks */
   SOS_AddTask(1,InitTask,PERIODIC,0);         /* Debug Point : there is a bug when using ONESHOOT*/
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	69 ec       	ldi	r22, 0xC9	; 201
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   SOS_AddTask(1,TriggerMeasurement,PERIODIC,1);
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	66 eb       	ldi	r22, 0xB6	; 182
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   SOS_AddTask(13,CalculateMeasurement,PERIODIC,2);
     218:	22 e0       	ldi	r18, 0x02	; 2
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	63 ea       	ldi	r22, 0xA3	; 163
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	8d e0       	ldi	r24, 0x0D	; 13
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   SOS_AddTask(1,SteeringAction,PERIODIC,3);
     22a:	23 e0       	ldi	r18, 0x03	; 3
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	67 e6       	ldi	r22, 0x67	; 103
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   SOS_AddTask(1,TimeOut,PERIODIC,4);
     23c:	24 e0       	ldi	r18, 0x04	; 4
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	69 e4       	ldi	r22, 0x49	; 73
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   SOS_AddTask(1,Reset,PERIODIC,5);
     24e:	25 e0       	ldi	r18, 0x05	; 5
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	60 e6       	ldi	r22, 0x60	; 96
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 6a 07 	call	0xed4	; 0xed4 <SOS_AddTask>
   /* Start SOS */
   SOS_TimerStart();
     260:	0e 94 9d 07 	call	0xf3a	; 0xf3a <SOS_TimerStart>
   while(1)
   {
      SOS_Dispatch();
     264:	0e 94 0c 07 	call	0xe18	; 0xe18 <SOS_Dispatch>
     268:	fd cf       	rjmp	.-6      	; 0x264 <Car_SOS+0x7c>

0000026a <Steering_Init>:
 * @return ERROR_STATUS 							
 */
ERROR_STATUS Steering_Init(void)
{
   /*---- Initialize motors ----*/   
   Motor_Init(MOTOR_1);
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 95 01 	call	0x32a	; 0x32a <Motor_Init>
   Motor_Init(MOTOR_2);
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	0e 94 95 01 	call	0x32a	; 0x32a <Motor_Init>
   /*---- Set motors directions ----*/
   Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
   Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
   /*---- Start Motors ----*/   
   Motor_Start(MOTOR_1,INITIAL_SPEED);
     286:	64 e1       	ldi	r22, 0x14	; 20
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Motor_Start>
   Motor_Start(MOTOR_2,INITIAL_SPEED);
     28e:	64 e1       	ldi	r22, 0x14	; 20
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Motor_Start>
   /*---- Return Success ----*/
   return E_OK;  
}
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	08 95       	ret

0000029a <Steering_SteerCar>:
 * @param uint8_t speed
 *
 * @return ERROR_STATUS							
 */
ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	c8 2f       	mov	r28, r24
     2a0:	d6 2f       	mov	r29, r22
   /*---- Updating Motors Speed ----*/
   Motor_SpeedUpdate(MOTOR_1,speed);
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 89 02 	call	0x512	; 0x512 <Motor_SpeedUpdate>
   Motor_SpeedUpdate(MOTOR_2,speed);
     2a8:	6d 2f       	mov	r22, r29
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 89 02 	call	0x512	; 0x512 <Motor_SpeedUpdate>
   /*---- switch over different direction states ----*/
   switch(Steering_CarCmd)
     2b0:	c2 30       	cpi	r28, 0x02	; 2
     2b2:	e9 f0       	breq	.+58     	; 0x2ee <Steering_SteerCar+0x54>
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <Steering_SteerCar+0x26>
     2b6:	cc 23       	and	r28, r28
     2b8:	41 f0       	breq	.+16     	; 0x2ca <Steering_SteerCar+0x30>
     2ba:	c1 30       	cpi	r28, 0x01	; 1
     2bc:	79 f0       	breq	.+30     	; 0x2dc <Steering_SteerCar+0x42>
     2be:	31 c0       	rjmp	.+98     	; 0x322 <Steering_SteerCar+0x88>
     2c0:	c3 30       	cpi	r28, 0x03	; 3
     2c2:	39 f1       	breq	.+78     	; 0x312 <Steering_SteerCar+0x78>
     2c4:	c4 30       	cpi	r28, 0x04	; 4
     2c6:	e1 f0       	breq	.+56     	; 0x300 <Steering_SteerCar+0x66>
     2c8:	2c c0       	rjmp	.+88     	; 0x322 <Steering_SteerCar+0x88>
   {
      case CAR_STOP:
         Motor_Direction(MOTOR_1,MOTOR_STOP);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
         Motor_Direction(MOTOR_2,MOTOR_STOP);         
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      break;		   
     2da:	23 c0       	rjmp	.+70     	; 0x322 <Steering_SteerCar+0x88>
      case CAR_FORWARD:
         Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
         Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      break;			
     2ec:	1a c0       	rjmp	.+52     	; 0x322 <Steering_SteerCar+0x88>
      case CAR_BACKWARD:
         Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
         Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     2f6:	62 e0       	ldi	r22, 0x02	; 2
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      break;			
     2fe:	11 c0       	rjmp	.+34     	; 0x322 <Steering_SteerCar+0x88>
      case CAR_LEFT:
         Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     300:	62 e0       	ldi	r22, 0x02	; 2
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
         Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      break;				
     310:	08 c0       	rjmp	.+16     	; 0x322 <Steering_SteerCar+0x88>
		case CAR_RIGHT:
         Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
         Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      break;		   
   }
   /*---- return success ----*/
   return E_OK;  
} 
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <Motor_Init>:
*  @param uint8_t Motor_Number
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	29 97       	sbiw	r28, 0x09	; 9
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
   switch (Motor_Number)
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	19 f0       	breq	.+6      	; 0x34c <Motor_Init+0x22>
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	e1 f0       	breq	.+56     	; 0x382 <Motor_Init+0x58>
     34a:	35 c0       	rjmp	.+106    	; 0x3b6 <Motor_Init+0x8c>
   {
      case MOTOR_1:;
         /*set directions of motor 1 enable bit*/
         strDioCfg_t motor_en1_config = 
     34c:	03 e0       	ldi	r16, 0x03	; 3
     34e:	0f 83       	std	Y+7, r16	; 0x07
     350:	80 e1       	ldi	r24, 0x10	; 16
     352:	88 87       	std	Y+8, r24	; 0x08
     354:	1f ef       	ldi	r17, 0xFF	; 255
     356:	19 87       	std	Y+9, r17	; 0x09
         {
            MOTOR_EN_1_GPIO,
            MOTOR_EN_1_BIT,
            OUTPUT    
         };
         DIO_init(&motor_en1_config);      
     358:	ce 01       	movw	r24, r28
     35a:	07 96       	adiw	r24, 0x07	; 7
     35c:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
         /*set direction of motor terminal "A" */
         strDioCfg_t motor_1a_config =
     360:	0c 83       	std	Y+4, r16	; 0x04
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	8d 83       	std	Y+5, r24	; 0x05
     366:	1e 83       	std	Y+6, r17	; 0x06
         {
            MOTOR_OUT_1A_GPIO,
            MOTOR_OUT_1A_BIT,
            OUTPUT
         };
         DIO_init(&motor_1a_config);      
     368:	ce 01       	movw	r24, r28
     36a:	04 96       	adiw	r24, 0x04	; 4
     36c:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
         /*set direction of motor terminal "B" */
         strDioCfg_t motor_1b_config =
     370:	09 83       	std	Y+1, r16	; 0x01
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	8a 83       	std	Y+2, r24	; 0x02
     376:	1b 83       	std	Y+3, r17	; 0x03
         {
            MOTOR_OUT_1B_GPIO,
            MOTOR_OUT_1B_BIT,
            OUTPUT
         };
         DIO_init(&motor_1b_config);      
     378:	ce 01       	movw	r24, r28
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
      break;
     380:	1a c0       	rjmp	.+52     	; 0x3b6 <Motor_Init+0x8c>
      case MOTOR_2:;
         /*set directions of motor 2 enable bit*/
         strDioCfg_t motor_en2_config =
     382:	03 e0       	ldi	r16, 0x03	; 3
     384:	0f 83       	std	Y+7, r16	; 0x07
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	88 87       	std	Y+8, r24	; 0x08
     38a:	1f ef       	ldi	r17, 0xFF	; 255
     38c:	19 87       	std	Y+9, r17	; 0x09
         {
            MOTOR_EN_2_GPIO,
            MOTOR_EN_2_BIT,
            OUTPUT
         };
         DIO_init(&motor_en2_config);         
     38e:	ce 01       	movw	r24, r28
     390:	07 96       	adiw	r24, 0x07	; 7
     392:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
         /*set direction of motor terminal "A" */
         strDioCfg_t motor_2a_config =
     396:	0c 83       	std	Y+4, r16	; 0x04
     398:	80 e4       	ldi	r24, 0x40	; 64
     39a:	8d 83       	std	Y+5, r24	; 0x05
     39c:	1e 83       	std	Y+6, r17	; 0x06
         {
            MOTOR_OUT_2A_GPIO,
            MOTOR_OUT_2A_BIT,
            OUTPUT
         };
         DIO_init(&motor_2a_config);         
     39e:	ce 01       	movw	r24, r28
     3a0:	04 96       	adiw	r24, 0x04	; 4
     3a2:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
         /*set direction of motor terminal "B" */
         strDioCfg_t motor_2b_config =
     3a6:	09 83       	std	Y+1, r16	; 0x01
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	1b 83       	std	Y+3, r17	; 0x03
         {
            MOTOR_OUT_2B_GPIO,
            MOTOR_OUT_2B_BIT,
            OUTPUT
         };
         DIO_init(&motor_2b_config);        
     3ae:	ce 01       	movw	r24, r28
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
      break;
   }
   return E_OK;
}
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	29 96       	adiw	r28, 0x09	; 9
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <Motor_Direction>:
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
   switch(Motor_Number)
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <Motor_Direction+0xa>
     3d2:	82 30       	cpi	r24, 0x02	; 2
     3d4:	b9 f1       	breq	.+110    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3d6:	6b c0       	rjmp	.+214    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
   {
      case MOTOR_1:
         switch(Motor_Direction)
     3d8:	61 30       	cpi	r22, 0x01	; 1
     3da:	a1 f0       	breq	.+40     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <Motor_Direction+0x16>
     3de:	62 30       	cpi	r22, 0x02	; 2
     3e0:	09 f1       	breq	.+66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3e2:	65 c0       	rjmp	.+202    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
         {
            case MOTOR_STOP:         
               /*write 0 on MOTOR_EN_1_BIT*/            
               DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,LOW);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	60 e1       	ldi	r22, 0x10	; 16
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_1 : 0 0*/
               DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	64 e0       	ldi	r22, 0x04	; 4
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	68 e0       	ldi	r22, 0x08	; 8
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
     402:	55 c0       	rjmp	.+170    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
            case MOTOR_FORWARD:
               /*write 1 on MOTOR_EN_1_BIT*/
               DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
     404:	4f ef       	ldi	r20, 0xFF	; 255
     406:	60 e1       	ldi	r22, 0x10	; 16
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_1 : 0 1*/
               DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	64 e0       	ldi	r22, 0x04	; 4
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	68 e0       	ldi	r22, 0x08	; 8
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
     422:	45 c0       	rjmp	.+138    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
            case MOTOR_BACKWARD:
               /*write 1 on MOTOR_EN_1_BIT*/
               DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
     424:	4f ef       	ldi	r20, 0xFF	; 255
     426:	60 e1       	ldi	r22, 0x10	; 16
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_1 : 1 0*/
               DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     42e:	4f ef       	ldi	r20, 0xFF	; 255
     430:	64 e0       	ldi	r22, 0x04	; 4
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	68 e0       	ldi	r22, 0x08	; 8
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
     442:	35 c0       	rjmp	.+106    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
         }
      break;
      case MOTOR_2:
         switch(Motor_Direction)
     444:	61 30       	cpi	r22, 0x01	; 1
     446:	a1 f0       	breq	.+40     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     448:	18 f0       	brcs	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	62 30       	cpi	r22, 0x02	; 2
     44c:	09 f1       	breq	.+66     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     44e:	2f c0       	rjmp	.+94     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
         {
            case MOTOR_STOP:
               /*write 0 on MOTOR_EN_2_BIT*/
               DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,LOW);
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	60 e2       	ldi	r22, 0x20	; 32
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_2 : 0 0*/
               DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	60 e4       	ldi	r22, 0x40	; 64
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	60 e8       	ldi	r22, 0x80	; 128
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
     46e:	1f c0       	rjmp	.+62     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
            case MOTOR_FORWARD:
               /*write 1 on MOTOR_EN_2_BIT*/
               DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
     470:	4f ef       	ldi	r20, 0xFF	; 255
     472:	60 e2       	ldi	r22, 0x20	; 32
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_2 : 0 1*/
               DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	60 e4       	ldi	r22, 0x40	; 64
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     484:	4f ef       	ldi	r20, 0xFF	; 255
     486:	60 e8       	ldi	r22, 0x80	; 128
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
            case MOTOR_BACKWARD:
               /*write 1 on MOTOR_EN_2_BIT*/
               DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
     490:	4f ef       	ldi	r20, 0xFF	; 255
     492:	60 e2       	ldi	r22, 0x20	; 32
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               /*write on terminals "A" & "B" of MOT_2 : 1 0*/
               DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     49a:	4f ef       	ldi	r20, 0xFF	; 255
     49c:	60 e4       	ldi	r22, 0x40	; 64
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
               DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	60 e8       	ldi	r22, 0x80	; 128
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
            break;
         }
      break;
   }
   return E_OK;
}
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	08 95       	ret

000004b2 <Motor_Start>:
*  @param uint8_t Mot_Speed
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
   /* Motor speed : represents a percent value , so its value is validated against the range [0-100]*/
   if((Mot_Speed >= 0) && (Mot_Speed <= 100))
     4b6:	65 36       	cpi	r22, 0x65	; 101
     4b8:	30 f5       	brcc	.+76     	; 0x506 <Motor_Start+0x54>
     4ba:	d6 2f       	mov	r29, r22
     4bc:	c8 2f       	mov	r28, r24
   {
      /* Initialize HwPWM */
      Pwm_Init(&gstrPwmConfig);
     4be:	83 e6       	ldi	r24, 0x63	; 99
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 21 04 	call	0x842	; 0x842 <Pwm_Init>
      /* Initialize the motor */
      Motor_Init(Motor_Number);
     4c6:	8c 2f       	mov	r24, r28
     4c8:	0e 94 95 01 	call	0x32a	; 0x32a <Motor_Init>
      /* Set a direction and start move : we let the default direction is forward */
      Motor_Direction(Motor_Number,MOTOR_FORWARD);
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
      switch(Motor_Number)
     4d4:	c1 30       	cpi	r28, 0x01	; 1
     4d6:	19 f0       	breq	.+6      	; 0x4de <Motor_Start+0x2c>
     4d8:	c2 30       	cpi	r28, 0x02	; 2
     4da:	59 f0       	breq	.+22     	; 0x4f2 <Motor_Start+0x40>
     4dc:	16 c0       	rjmp	.+44     	; 0x50a <Motor_Start+0x58>
      {
         case MOTOR_1:
            /* Start HwPWM for PWM_CH1A */
            Pwm_Start(PWM_CH1A,Mot_Speed,PWM_FREQ);            
     4de:	2a ef       	ldi	r18, 0xFA	; 250
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	6d 2f       	mov	r22, r29
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 3b 04 	call	0x876	; 0x876 <Pwm_Start>
            /* Start HwPwm for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Mot_Speed,PWM_FREQ);
         break;         
      }      
      /*return success*/
      return E_OK;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
      switch(Motor_Number)
      {
         case MOTOR_1:
            /* Start HwPWM for PWM_CH1A */
            Pwm_Start(PWM_CH1A,Mot_Speed,PWM_FREQ);            
         break;
     4f0:	0d c0       	rjmp	.+26     	; 0x50c <Motor_Start+0x5a>
         case MOTOR_2:
            /* Start HwPwm for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Mot_Speed,PWM_FREQ);
     4f2:	2a ef       	ldi	r18, 0xFA	; 250
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	6d 2f       	mov	r22, r29
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	0e 94 3b 04 	call	0x876	; 0x876 <Pwm_Start>
         break;         
      }      
      /*return success*/
      return E_OK;
     502:	80 e0       	ldi	r24, 0x00	; 0
            Pwm_Start(PWM_CH1A,Mot_Speed,PWM_FREQ);            
         break;
         case MOTOR_2:
            /* Start HwPwm for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Mot_Speed,PWM_FREQ);
         break;         
     504:	03 c0       	rjmp	.+6      	; 0x50c <Motor_Start+0x5a>
      /*return success*/
      return E_OK;
   }
   else
   {
      return E_NOK; /* Speed is not a valid value*/
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	01 c0       	rjmp	.+2      	; 0x50c <Motor_Start+0x5a>
            /* Start HwPwm for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Mot_Speed,PWM_FREQ);
         break;         
      }      
      /*return success*/
      return E_OK;
     50a:	80 e0       	ldi	r24, 0x00	; 0
   }
   else
   {
      return E_NOK; /* Speed is not a valid value*/
   }  
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <Motor_SpeedUpdate>:
*  @return ERROR_STATUS
*/
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
   /* Motor speed : represents a percent value , so its value is validated against the range [0-100]*/
   if((Speed >= 0) && (Speed <= 100))
     512:	65 36       	cpi	r22, 0x65	; 101
     514:	b8 f4       	brcc	.+46     	; 0x544 <Motor_SpeedUpdate+0x32>
   {
      switch(Motor_Number)
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	19 f0       	breq	.+6      	; 0x520 <Motor_SpeedUpdate+0xe>
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	51 f0       	breq	.+20     	; 0x532 <Motor_SpeedUpdate+0x20>
     51e:	14 c0       	rjmp	.+40     	; 0x548 <Motor_SpeedUpdate+0x36>
      {
         case MOTOR_1:
            /* Update PWM(Ton) for PWM_CH1A */
            Pwm_Start(PWM_CH1A,Speed,PWM_FREQ);
     520:	2a ef       	ldi	r18, 0xFA	; 250
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 3b 04 	call	0x876	; 0x876 <Pwm_Start>
            /* Update Pwm(Ton) for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Speed,PWM_FREQ);
         break;
      }
      /*return success*/
      return E_OK;
     52e:	80 e0       	ldi	r24, 0x00	; 0
      switch(Motor_Number)
      {
         case MOTOR_1:
            /* Update PWM(Ton) for PWM_CH1A */
            Pwm_Start(PWM_CH1A,Speed,PWM_FREQ);
         break;
     530:	08 95       	ret
         case MOTOR_2:
            /* Update Pwm(Ton) for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Speed,PWM_FREQ);
     532:	2a ef       	ldi	r18, 0xFA	; 250
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 3b 04 	call	0x876	; 0x876 <Pwm_Start>
         break;
      }
      /*return success*/
      return E_OK;
     540:	80 e0       	ldi	r24, 0x00	; 0
            Pwm_Start(PWM_CH1A,Speed,PWM_FREQ);
         break;
         case MOTOR_2:
            /* Update Pwm(Ton) for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Speed,PWM_FREQ);
         break;
     542:	08 95       	ret
      /*return success*/
      return E_OK;
   }
   else
   {
      return E_NOK; /* Speed is not a valid value*/
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
            /* Update Pwm(Ton) for PWM_CH1B */
            Pwm_Start(PWM_CH1B,Speed,PWM_FREQ);
         break;
      }
      /*return success*/
      return E_OK;
     548:	80 e0       	ldi	r24, 0x00	; 0
   else
   {
      return E_NOK; /* Speed is not a valid value*/
   }
   
}
     54a:	08 95       	ret

0000054c <ChangeToRising>:
   gu8_onFallPulseCapture_flag = 0;
   /* read time of the pulse */   
   *Icu_Time = gu16_Icu_Time;  
   /* return success */
   return E_OK;
}
     54c:	8b b7       	in	r24, 0x3b	; 59
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	8b bf       	out	0x3b, r24	; 59
     552:	84 b7       	in	r24, 0x34	; 52
     554:	80 64       	ori	r24, 0x40	; 64
     556:	84 bf       	out	0x34, r24	; 52
     558:	8a b7       	in	r24, 0x3a	; 58
     55a:	80 62       	ori	r24, 0x20	; 32
     55c:	8a bf       	out	0x3a, r24	; 58
     55e:	8b b7       	in	r24, 0x3b	; 59
     560:	80 62       	ori	r24, 0x20	; 32
     562:	8b bf       	out	0x3b, r24	; 59
     564:	08 95       	ret

00000566 <ChangeToFalling>:
     566:	8b b7       	in	r24, 0x3b	; 59
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	8b bf       	out	0x3b, r24	; 59
     56c:	84 b7       	in	r24, 0x34	; 52
     56e:	8f 7b       	andi	r24, 0xBF	; 191
     570:	84 bf       	out	0x34, r24	; 52
     572:	8a b7       	in	r24, 0x3a	; 58
     574:	80 62       	ori	r24, 0x20	; 32
     576:	8a bf       	out	0x3a, r24	; 58
     578:	8b b7       	in	r24, 0x3b	; 59
     57a:	80 62       	ori	r24, 0x20	; 32
     57c:	8b bf       	out	0x3b, r24	; 59
     57e:	08 95       	ret

00000580 <CaptureOnFalling>:
     580:	04 b6       	in	r0, 0x34	; 52
     582:	06 fe       	sbrs	r0, 6
     584:	09 c0       	rjmp	.+18     	; 0x598 <CaptureOnFalling+0x18>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_channel>
     58e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Timer_Start>
     592:	0e 94 b3 02 	call	0x566	; 0x566 <ChangeToFalling>
     596:	08 95       	ret
     598:	04 b6       	in	r0, 0x34	; 52
     59a:	06 fc       	sbrc	r0, 6
     59c:	1b c0       	rjmp	.+54     	; 0x5d4 <CaptureOnFalling+0x54>
     59e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_channel>
     5a2:	0e 94 19 05 	call	0xa32	; 0xa32 <Timer_Stop>
     5a6:	67 eb       	ldi	r22, 0xB7	; 183
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_channel>
     5ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <Timer_GetValue>
     5b2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <gu16_Icu_Time>
     5b6:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <gu16_Icu_Time+0x1>
     5ba:	0e 94 26 06 	call	0xc4c	; 0xc4c <Set_IC_Val>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <gu8_onFallPulseCapture_flag>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_channel>
     5cc:	0e 94 29 05 	call	0xa52	; 0xa52 <Timer_SetValue>
     5d0:	0e 94 a6 02 	call	0x54c	; 0x54c <ChangeToRising>
     5d4:	08 95       	ret

000005d6 <Icu_Init>:
     5d6:	fc 01       	movw	r30, r24
     5d8:	21 81       	ldd	r18, Z+1	; 0x01
     5da:	22 30       	cpi	r18, 0x02	; 2
     5dc:	59 f4       	brne	.+22     	; 0x5f4 <Icu_Init+0x1e>
     5de:	80 81       	ld	r24, Z
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	41 f4       	brne	.+16     	; 0x5f4 <Icu_Init+0x1e>
     5e4:	81 ea       	ldi	r24, 0xA1	; 161
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 c6 04 	call	0x98c	; 0x98c <Timer_Init>
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <timer_channel>
     5f2:	78 94       	sei
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret

000005f8 <Icu_ConfigEdge>:
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	79 f4       	brne	.+30     	; 0x61a <Icu_ConfigEdge+0x22>
     5fc:	61 30       	cpi	r22, 0x01	; 1
     5fe:	29 f0       	breq	.+10     	; 0x60a <Icu_ConfigEdge+0x12>
     600:	62 30       	cpi	r22, 0x02	; 2
     602:	59 f4       	brne	.+22     	; 0x61a <Icu_ConfigEdge+0x22>
     604:	0e 94 b3 02 	call	0x566	; 0x566 <ChangeToFalling>
     608:	08 c0       	rjmp	.+16     	; 0x61a <Icu_ConfigEdge+0x22>
     60a:	0e 94 a6 02 	call	0x54c	; 0x54c <ChangeToRising>
     60e:	80 ec       	ldi	r24, 0xC0	; 192
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <call_back+0x1>
     616:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <call_back>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	08 95       	ret

0000061e <__vector_3>:

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	ef 93       	push	r30
     63e:	ff 93       	push	r31
   call_back();     
     640:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <call_back>
     644:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <call_back+0x1>
     648:	09 95       	icall
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <Us_Init>:
*  @param void
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Us_Init(void)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	00 d0       	rcall	.+0      	; 0x672 <Us_Init+0x6>
     672:	00 d0       	rcall	.+0      	; 0x674 <Us_Init+0x8>
     674:	00 d0       	rcall	.+0      	; 0x676 <Us_Init+0xa>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
   /*---- 1 - Triggering pin config ----*/
   strDioCfg_t Us_trigger_config = 
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	80 e1       	ldi	r24, 0x10	; 16
     680:	8a 83       	std	Y+2, r24	; 0x02
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	8b 83       	std	Y+3, r24	; 0x03
   {
      ULTRA_EN_GPIO,
      ULTRA_ENABLE_BIT,
      OUTPUT
   };
   DIO_init(&Us_trigger_config);
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
   /*---- 2 - Echo pin config  ----*/   
   strDioCfg_t Us_echo_config =
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	8c 83       	std	Y+4, r24	; 0x04
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	8d 83       	std	Y+5, r24	; 0x05
     696:	1e 82       	std	Y+6, r1	; 0x06
   {
      ULTRA_OUT_GPIO,
      ULTRA_OUT_BIT,
      INPUT
   };
   DIO_init(&Us_echo_config);  
     698:	ce 01       	movw	r24, r28
     69a:	04 96       	adiw	r24, 0x04	; 4
     69c:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_init>
   /*--- Return Success ---*/
   return E_OK;  
}
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	26 96       	adiw	r28, 0x06	; 6
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <Us_Trigger>:
*  @return ERROR_STATUS
*/
ERROR_STATUS Us_Trigger(void)
{
   /*- Providing a trigger pulse ----------------*/
   DIO_Write(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
     6b4:	4f ef       	ldi	r20, 0xFF	; 255
     6b6:	60 e1       	ldi	r22, 0x10	; 16
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6be:	85 e3       	ldi	r24, 0x35	; 53
     6c0:	8a 95       	dec	r24
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <Us_Trigger+0xc>
     6c4:	00 00       	nop
   //softwareDelayMs(5);
   _delay_us(10);
   DIO_Write(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	60 e1       	ldi	r22, 0x10	; 16
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_Write>
   /*--- Return Success ---*/
   return E_OK;
}
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret

000006d4 <Us_CalcDistance>:
*  @param void
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Us_CalcDistance(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	00 d0       	rcall	.+0      	; 0x6da <Us_CalcDistance+0x6>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
   uint16_t gu16_IC_val = 0;
     6de:	1a 82       	std	Y+2, r1	; 0x02
     6e0:	19 82       	std	Y+1, r1	; 0x01
   uint32_t gu32_dis = 0;
   /*- 1 - Get Input Capture Value Stored in RTE ---> GetInputCaptureVal()*/   
   Get_IC_Val(&gu16_IC_val);
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	0e 94 36 06 	call	0xc6c	; 0xc6c <Get_IC_Val>
   /*- 2 - Calculate the distance -based on the brought input capture value -*/
   gu32_dis = ((gu16_IC_val * 68) / 1000);
   /*- 3 - Update Distance Value Stored in RTE ---> Update/SetDistanceVal()*/
   Set_DistanceVal(gu32_dis);
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	9a 81       	ldd	r25, Y+2	; 0x02
     6ee:	44 e4       	ldi	r20, 0x44	; 68
     6f0:	48 9f       	mul	r20, r24
     6f2:	90 01       	movw	r18, r0
     6f4:	49 9f       	mul	r20, r25
     6f6:	30 0d       	add	r19, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	36 95       	lsr	r19
     6fc:	27 95       	ror	r18
     6fe:	36 95       	lsr	r19
     700:	27 95       	ror	r18
     702:	36 95       	lsr	r19
     704:	27 95       	ror	r18
     706:	a5 ec       	ldi	r26, 0xC5	; 197
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__umulhisi3>
     70e:	92 95       	swap	r25
     710:	82 95       	swap	r24
     712:	8f 70       	andi	r24, 0x0F	; 15
     714:	89 27       	eor	r24, r25
     716:	9f 70       	andi	r25, 0x0F	; 15
     718:	89 27       	eor	r24, r25
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 2c 06 	call	0xc58	; 0xc58 <Set_DistanceVal>
     
   return E_OK;   
}
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <main>:
#include "APP/Car_SOS/Car_SOS.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   /*------------------- START Car_SOS APPLICATION  ------------------------*/
   Car_SOS();
     730:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Car_SOS>
   //BCM_Receive();   /* Burn its hex on slave */
   /*--------------------- End BCM test -------------------------------*/
   
   
       
}
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	08 95       	ret

0000073a <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (strDioCfg_t * DIO_info)
{
     73a:	fc 01       	movw	r30, r24
   if(DIO_info != NULL)
     73c:	89 2b       	or	r24, r25
     73e:	09 f4       	brne	.+2      	; 0x742 <DIO_init+0x8>
     740:	45 c0       	rjmp	.+138    	; 0x7cc <DIO_init+0x92>
   {
      /* Set pins direction */
      /*check the direction whether input or output*/
      if((DIO_info->dir) == INPUT)
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	81 11       	cpse	r24, r1
     746:	22 c0       	rjmp	.+68     	; 0x78c <DIO_init+0x52>
      {
         /*direction is input*/         
         switch(DIO_info->GPIO)
     748:	90 81       	ld	r25, Z
     74a:	91 30       	cpi	r25, 0x01	; 1
     74c:	69 f0       	breq	.+26     	; 0x768 <DIO_init+0x2e>
     74e:	28 f0       	brcs	.+10     	; 0x75a <DIO_init+0x20>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	81 f0       	breq	.+32     	; 0x774 <DIO_init+0x3a>
     754:	93 30       	cpi	r25, 0x03	; 3
     756:	a1 f0       	breq	.+40     	; 0x780 <DIO_init+0x46>
     758:	08 95       	ret
         {
            case 0: /* GPIOA */
               PORTA_DIR &= ~(DIO_info->pins);
     75a:	2a b3       	in	r18, 0x1a	; 26
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	80 95       	com	r24
     760:	82 23       	and	r24, r18
     762:	8a bb       	out	0x1a, r24	; 26
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
            break;
         }
      }
      return E_OK;      
     764:	89 2f       	mov	r24, r25
         /*direction is input*/         
         switch(DIO_info->GPIO)
         {
            case 0: /* GPIOA */
               PORTA_DIR &= ~(DIO_info->pins);
            break;
     766:	08 95       	ret
            case 1: /* GPIOB */
               PORTB_DIR &= ~(DIO_info->pins);
     768:	27 b3       	in	r18, 0x17	; 23
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	90 95       	com	r25
     76e:	92 23       	and	r25, r18
     770:	97 bb       	out	0x17, r25	; 23
            break;
     772:	08 95       	ret
            case 2: /* GPIOC */
               PORTC_DIR &= ~(DIO_info->pins);
     774:	24 b3       	in	r18, 0x14	; 20
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	90 95       	com	r25
     77a:	92 23       	and	r25, r18
     77c:	94 bb       	out	0x14, r25	; 20
            break;
     77e:	08 95       	ret
            case 3: /* GPIOD */
               PORTD_DIR &= ~(DIO_info->pins);
     780:	21 b3       	in	r18, 0x11	; 17
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	90 95       	com	r25
     786:	92 23       	and	r25, r18
     788:	91 bb       	out	0x11, r25	; 17
            break;
     78a:	08 95       	ret
         }
      }
      else 
      {
         /* Direction is OUTPUT */
         switch(DIO_info->GPIO)
     78c:	80 81       	ld	r24, Z
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	59 f0       	breq	.+22     	; 0x7a8 <DIO_init+0x6e>
     792:	28 f0       	brcs	.+10     	; 0x79e <DIO_init+0x64>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	71 f0       	breq	.+28     	; 0x7b4 <DIO_init+0x7a>
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	91 f0       	breq	.+36     	; 0x7c0 <DIO_init+0x86>
     79c:	19 c0       	rjmp	.+50     	; 0x7d0 <DIO_init+0x96>
         {
            case 0: /* GPIOA */
            PORTA_DIR |= DIO_info->pins;
     79e:	2a b3       	in	r18, 0x1a	; 26
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	92 2b       	or	r25, r18
     7a4:	9a bb       	out	0x1a, r25	; 26
            break;
     7a6:	08 95       	ret
            case 1: /* GPIOB */
            PORTB_DIR |= DIO_info->pins;
     7a8:	97 b3       	in	r25, 0x17	; 23
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
     7ac:	89 2b       	or	r24, r25
     7ae:	87 bb       	out	0x17, r24	; 23
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
            break;
         }
      }
      return E_OK;      
     7b0:	80 e0       	ldi	r24, 0x00	; 0
            case 0: /* GPIOA */
            PORTA_DIR |= DIO_info->pins;
            break;
            case 1: /* GPIOB */
            PORTB_DIR |= DIO_info->pins;
            break;
     7b2:	08 95       	ret
            case 2: /* GPIOC */
            PORTC_DIR |= DIO_info->pins;
     7b4:	94 b3       	in	r25, 0x14	; 20
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	89 2b       	or	r24, r25
     7ba:	84 bb       	out	0x14, r24	; 20
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
            break;
         }
      }
      return E_OK;      
     7bc:	80 e0       	ldi	r24, 0x00	; 0
            case 1: /* GPIOB */
            PORTB_DIR |= DIO_info->pins;
            break;
            case 2: /* GPIOC */
            PORTC_DIR |= DIO_info->pins;
            break;
     7be:	08 95       	ret
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
     7c0:	91 b3       	in	r25, 0x11	; 17
     7c2:	81 81       	ldd	r24, Z+1	; 0x01
     7c4:	89 2b       	or	r24, r25
     7c6:	81 bb       	out	0x11, r24	; 17
            break;
         }
      }
      return E_OK;      
     7c8:	80 e0       	ldi	r24, 0x00	; 0
            case 2: /* GPIOC */
            PORTC_DIR |= DIO_info->pins;
            break;
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
            break;
     7ca:	08 95       	ret
      }
      return E_OK;      
   }
   else
   {
      return E_NOK;      
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	08 95       	ret
            case 3: /* GPIOD */
            PORTD_DIR |= DIO_info->pins;
            break;
         }
      }
      return E_OK;      
     7d0:	80 e0       	ldi	r24, 0x00	; 0
   }
   else
   {
      return E_NOK;      
   }
}
     7d2:	08 95       	ret

000007d4 <DIO_Write>:
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
   if(value == LOW)
     7d4:	41 11       	cpse	r20, r1
     7d6:	1c c0       	rjmp	.+56     	; 0x810 <DIO_Write+0x3c>
   {
      switch(GPIO)
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	59 f0       	breq	.+22     	; 0x7f2 <DIO_Write+0x1e>
     7dc:	28 f0       	brcs	.+10     	; 0x7e8 <DIO_Write+0x14>
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	69 f0       	breq	.+26     	; 0x7fc <DIO_Write+0x28>
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	81 f0       	breq	.+32     	; 0x806 <DIO_Write+0x32>
     7e6:	2b c0       	rjmp	.+86     	; 0x83e <DIO_Write+0x6a>
      {
         case 0: /* GPIOA */
            PORTA_DATA &= (~pins);		/* clear pins*/
     7e8:	8b b3       	in	r24, 0x1b	; 27
     7ea:	60 95       	com	r22
     7ec:	68 23       	and	r22, r24
     7ee:	6b bb       	out	0x1b, r22	; 27
         break;
     7f0:	26 c0       	rjmp	.+76     	; 0x83e <DIO_Write+0x6a>
         case 1: /* GPIOB */
            PORTB_DATA &= (~pins);		/* clear pins*/
     7f2:	88 b3       	in	r24, 0x18	; 24
     7f4:	60 95       	com	r22
     7f6:	68 23       	and	r22, r24
     7f8:	68 bb       	out	0x18, r22	; 24
         break;
     7fa:	21 c0       	rjmp	.+66     	; 0x83e <DIO_Write+0x6a>
         case 2: /* GPIOC */
            PORTC_DATA &= (~pins);		/* clear pins*/
     7fc:	85 b3       	in	r24, 0x15	; 21
     7fe:	60 95       	com	r22
     800:	68 23       	and	r22, r24
     802:	65 bb       	out	0x15, r22	; 21
         break;
     804:	1c c0       	rjmp	.+56     	; 0x83e <DIO_Write+0x6a>
         case 3: /* GPIOD */
            PORTD_DATA &= (~pins);		/* clear pins*/
     806:	82 b3       	in	r24, 0x12	; 18
     808:	60 95       	com	r22
     80a:	68 23       	and	r22, r24
     80c:	62 bb       	out	0x12, r22	; 18
         break;
     80e:	17 c0       	rjmp	.+46     	; 0x83e <DIO_Write+0x6a>
      }
   }
   else
   {
      switch(GPIO)
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	51 f0       	breq	.+20     	; 0x828 <DIO_Write+0x54>
     814:	28 f0       	brcs	.+10     	; 0x820 <DIO_Write+0x4c>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	59 f0       	breq	.+22     	; 0x830 <DIO_Write+0x5c>
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	69 f0       	breq	.+26     	; 0x838 <DIO_Write+0x64>
     81e:	0f c0       	rjmp	.+30     	; 0x83e <DIO_Write+0x6a>
      {
         case 0: /* GPIOA */
            PORTA_DATA |= pins;		/* set pins*/
     820:	8b b3       	in	r24, 0x1b	; 27
     822:	68 2b       	or	r22, r24
     824:	6b bb       	out	0x1b, r22	; 27
         break;
     826:	0b c0       	rjmp	.+22     	; 0x83e <DIO_Write+0x6a>
         case 1: /* GPIOB */
            PORTB_DATA |= pins;		/* set pins*/
     828:	88 b3       	in	r24, 0x18	; 24
     82a:	68 2b       	or	r22, r24
     82c:	68 bb       	out	0x18, r22	; 24
         break;
     82e:	07 c0       	rjmp	.+14     	; 0x83e <DIO_Write+0x6a>
         case 2: /* GPIOC */
            PORTC_DATA |= pins;		/* set pins*/
     830:	85 b3       	in	r24, 0x15	; 21
     832:	68 2b       	or	r22, r24
     834:	65 bb       	out	0x15, r22	; 21
         break;
     836:	03 c0       	rjmp	.+6      	; 0x83e <DIO_Write+0x6a>
         case 3: /* GPIOD */
            PORTD_DATA |= pins;		/* set pins*/
     838:	82 b3       	in	r24, 0x12	; 18
     83a:	68 2b       	or	r22, r24
     83c:	62 bb       	out	0x12, r22	; 18
         break;
      }
   }
   return E_OK;
}
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 95       	ret

00000842 <Pwm_Init>:
*  @param strPwmCfg_t * Pwm_Cfg
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Pwm_Init(strPwmCfg_t *Pwm_Cfg)
{
     842:	fc 01       	movw	r30, r24
   if(Pwm_Cfg != NULL)
     844:	89 2b       	or	r24, r25
     846:	99 f0       	breq	.+38     	; 0x86e <__stack+0xf>
   {
      switch(Pwm_Cfg->Channel)
     848:	90 81       	ld	r25, Z
     84a:	91 50       	subi	r25, 0x01	; 1
     84c:	92 30       	cpi	r25, 0x02	; 2
     84e:	88 f4       	brcc	.+34     	; 0x872 <__stack+0x13>
            /* timer 0 to be implemented if needed*/         
         break;
         case PWM_CH1A:
         case PWM_CH1B:
            /* Set prescaler of timer1 */
            gu8_t1Prescaler = Pwm_Cfg->Prescaler;
     850:	81 81       	ldd	r24, Z+1	; 0x01
     852:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <gu8_t1Prescaler>
            /* Set TCCR1 */
            TCCR1 |= T1_COMP_MODE_ICR1_BOTTOM;
     856:	8e b5       	in	r24, 0x2e	; 46
     858:	9f b5       	in	r25, 0x2f	; 47
     85a:	80 61       	ori	r24, 0x10	; 16
     85c:	9f bd       	out	0x2f, r25	; 47
     85e:	8e bd       	out	0x2e, r24	; 46
            TCCR1 |= 0xA000;  /*COM1A1/COM1B1 = 1 & COM1A0/COM1B0 = 0  -----> Clear OC1A/OC1B on compare match when up-counting. Set OC1A/OC1B on compare match when down counting.*/
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	9f b5       	in	r25, 0x2f	; 47
     864:	90 6a       	ori	r25, 0xA0	; 160
     866:	9f bd       	out	0x2f, r25	; 47
     868:	8e bd       	out	0x2e, r24	; 46
         break;
      }
      return E_OK;
     86a:	80 e0       	ldi	r24, 0x00	; 0
            /* Set prescaler of timer1 */
            gu8_t1Prescaler = Pwm_Cfg->Prescaler;
            /* Set TCCR1 */
            TCCR1 |= T1_COMP_MODE_ICR1_BOTTOM;
            TCCR1 |= 0xA000;  /*COM1A1/COM1B1 = 1 & COM1A0/COM1B0 = 0  -----> Clear OC1A/OC1B on compare match when up-counting. Set OC1A/OC1B on compare match when down counting.*/
         break;
     86c:	08 95       	ret
      }
      return E_OK;
   }
   else  
   {
      return E_NOK;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	08 95       	ret
            /* Set TCCR1 */
            TCCR1 |= T1_COMP_MODE_ICR1_BOTTOM;
            TCCR1 |= 0xA000;  /*COM1A1/COM1B1 = 1 & COM1A0/COM1B0 = 0  -----> Clear OC1A/OC1B on compare match when up-counting. Set OC1A/OC1B on compare match when down counting.*/
         break;
      }
      return E_OK;
     872:	80 e0       	ldi	r24, 0x00	; 0
   else  
   {
      return E_NOK;
   }
   
}
     874:	08 95       	ret

00000876 <Pwm_Start>:
*  @param uint32_t Frequncy
*
*  @return ERROR_STATUS
*/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c8 2f       	mov	r28, r24
     884:	d6 2f       	mov	r29, r22
   /* Calculating TOP value */
   uint32_t au32_top_initial = (uint32_t)(CPU_F / (2 * Frequncy));
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	44 1f       	adc	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	74 e2       	ldi	r23, 0x24	; 36
     892:	84 ef       	ldi	r24, 0xF4	; 244
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 49 09 	call	0x1292	; 0x1292 <__udivmodsi4>
     89a:	69 01       	movw	r12, r18
     89c:	7a 01       	movw	r14, r20
   /* Calculate initial value for OCR1A and OCR1B */
   uint32_t au32_ocr_initial = (uint32_t)(Duty * (au32_top_initial / 100));   
     89e:	ca 01       	movw	r24, r20
     8a0:	b9 01       	movw	r22, r18
     8a2:	24 e6       	ldi	r18, 0x64	; 100
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	0e 94 49 09 	call	0x1292	; 0x1292 <__udivmodsi4>
     8ae:	ad 2f       	mov	r26, r29
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
   /* Set OCR1A , OCR1B , ICR1 */
   switch(Channel)
     8b6:	c1 30       	cpi	r28, 0x01	; 1
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <Pwm_Start+0x4a>
     8ba:	c2 30       	cpi	r28, 0x02	; 2
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <Pwm_Start+0x50>
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <Pwm_Start+0x54>
   {
      case PWM_CH1A:
         OCR1A = (uint16_t)au32_ocr_initial;
     8c0:	7b bd       	out	0x2b, r23	; 43
     8c2:	6a bd       	out	0x2a, r22	; 42
      break;
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <Pwm_Start+0x54>
      case PWM_CH1B:
         OCR1B = (uint16_t)au32_ocr_initial;
     8c6:	79 bd       	out	0x29, r23	; 41
     8c8:	68 bd       	out	0x28, r22	; 40
      break;
   }   
   ICR1  = (uint16_t)au32_top_initial;
     8ca:	d7 bc       	out	0x27, r13	; 39
     8cc:	c6 bc       	out	0x26, r12	; 38
   /* Set TCCR1B to start timer1 */
   TCCR1B |= gu8_t1Prescaler;   
     8ce:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <gu8_t1Prescaler>
     8d2:	8e b5       	in	r24, 0x2e	; 46
     8d4:	89 2b       	or	r24, r25
     8d6:	8e bd       	out	0x2e, r24	; 46
   /* return success*/
   return E_OK;   
}
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <__vector_12>:
}


/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	4f 93       	push	r20
     8f8:	5f 93       	push	r21
     8fa:	6f 93       	push	r22
     8fc:	7f 93       	push	r23
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	ef 93       	push	r30
     908:	ff 93       	push	r31
   /* Raise transmission complete flag */
   //gu8_transmissionComplete = 1;
   /* Call call_back() */
   call_back();
     90a:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <call_back>
     90e:	f0 91 bc 00 	lds	r31, 0x00BC	; 0x8000bc <call_back+0x1>
     912:	09 95       	icall
}
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <Timer_SetCallBack>:
   }
   else
   {
      return E_NOK;
   }
}
     936:	41 15       	cp	r20, r1
     938:	51 05       	cpc	r21, r1
     93a:	f1 f0       	breq	.+60     	; 0x978 <Timer_SetCallBack+0x42>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	61 f0       	breq	.+24     	; 0x958 <Timer_SetCallBack+0x22>
     940:	18 f0       	brcs	.+6      	; 0x948 <Timer_SetCallBack+0x12>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	89 f0       	breq	.+34     	; 0x968 <Timer_SetCallBack+0x32>
     946:	1a c0       	rjmp	.+52     	; 0x97c <Timer_SetCallBack+0x46>
     948:	61 30       	cpi	r22, 0x01	; 1
     94a:	d1 f4       	brne	.+52     	; 0x980 <Timer_SetCallBack+0x4a>
     94c:	50 93 c2 00 	sts	0x00C2, r21	; 0x8000c2 <TOV_T0_Call_Back+0x1>
     950:	40 93 c1 00 	sts	0x00C1, r20	; 0x8000c1 <TOV_T0_Call_Back>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret
     958:	61 30       	cpi	r22, 0x01	; 1
     95a:	a1 f4       	brne	.+40     	; 0x984 <Timer_SetCallBack+0x4e>
     95c:	50 93 c0 00 	sts	0x00C0, r21	; 0x8000c0 <TOV_T1_Call_Back+0x1>
     960:	40 93 bf 00 	sts	0x00BF, r20	; 0x8000bf <TOV_T1_Call_Back>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret
     968:	61 30       	cpi	r22, 0x01	; 1
     96a:	71 f4       	brne	.+28     	; 0x988 <Timer_SetCallBack+0x52>
     96c:	50 93 be 00 	sts	0x00BE, r21	; 0x8000be <TOV_T2_Call_Back+0x1>
     970:	40 93 bd 00 	sts	0x00BD, r20	; 0x8000bd <TOV_T2_Call_Back>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	08 95       	ret
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	08 95       	ret
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	08 95       	ret
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret

0000098c <Timer_Init>:
     98c:	fc 01       	movw	r30, r24
     98e:	89 2b       	or	r24, r25
     990:	71 f1       	breq	.+92     	; 0x9ee <Timer_Init+0x62>
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	91 05       	cpc	r25, r1
     99a:	61 f0       	breq	.+24     	; 0x9b4 <Timer_Init+0x28>
     99c:	18 f0       	brcs	.+6      	; 0x9a4 <Timer_Init+0x18>
     99e:	02 97       	sbiw	r24, 0x02	; 2
     9a0:	c1 f0       	breq	.+48     	; 0x9d2 <Timer_Init+0x46>
     9a2:	1e c0       	rjmp	.+60     	; 0x9e0 <Timer_Init+0x54>
     9a4:	93 b7       	in	r25, 0x33	; 51
     9a6:	82 81       	ldd	r24, Z+2	; 0x02
     9a8:	89 2b       	or	r24, r25
     9aa:	83 bf       	out	0x33, r24	; 51
     9ac:	86 81       	ldd	r24, Z+6	; 0x06
     9ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu8_t0Prescaler>
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <Timer_Init+0x54>
     9b4:	2e b5       	in	r18, 0x2e	; 46
     9b6:	3f b5       	in	r19, 0x2f	; 47
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	82 2b       	or	r24, r18
     9be:	93 2b       	or	r25, r19
     9c0:	9f bd       	out	0x2f, r25	; 47
     9c2:	8e bd       	out	0x2e, r24	; 46
     9c4:	86 81       	ldd	r24, Z+6	; 0x06
     9c6:	97 81       	ldd	r25, Z+7	; 0x07
     9c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <gu16_t1Prescaler+0x1>
     9cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <gu16_t1Prescaler>
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <Timer_Init+0x54>
     9d2:	95 b5       	in	r25, 0x25	; 37
     9d4:	82 81       	ldd	r24, Z+2	; 0x02
     9d6:	89 2b       	or	r24, r25
     9d8:	85 bd       	out	0x25, r24	; 37
     9da:	86 81       	ldd	r24, Z+6	; 0x06
     9dc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu8_t2Prescaler>
     9e0:	78 94       	sei
     9e2:	99 b7       	in	r25, 0x39	; 57
     9e4:	80 85       	ldd	r24, Z+8	; 0x08
     9e6:	89 2b       	or	r24, r25
     9e8:	89 bf       	out	0x39, r24	; 57
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	08 95       	ret

000009f2 <Timer_Start>:
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	59 f0       	breq	.+22     	; 0xa0c <Timer_Start+0x1a>
     9f6:	18 f0       	brcs	.+6      	; 0x9fe <Timer_Start+0xc>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	99 f0       	breq	.+38     	; 0xa22 <Timer_Start+0x30>
     9fc:	18 c0       	rjmp	.+48     	; 0xa2e <Timer_Start+0x3c>
     9fe:	62 bf       	out	0x32, r22	; 50
     a00:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <gu8_t0Prescaler>
     a04:	83 b7       	in	r24, 0x33	; 51
     a06:	89 2b       	or	r24, r25
     a08:	83 bf       	out	0x33, r24	; 51
     a0a:	11 c0       	rjmp	.+34     	; 0xa2e <Timer_Start+0x3c>
     a0c:	77 27       	eor	r23, r23
     a0e:	7d bd       	out	0x2d, r23	; 45
     a10:	6c bd       	out	0x2c, r22	; 44
     a12:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <gu16_t1Prescaler>
     a16:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <gu16_t1Prescaler+0x1>
     a1a:	9e b5       	in	r25, 0x2e	; 46
     a1c:	89 2b       	or	r24, r25
     a1e:	8e bd       	out	0x2e, r24	; 46
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <Timer_Start+0x3c>
     a22:	64 bd       	out	0x24, r22	; 36
     a24:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <gu8_t2Prescaler>
     a28:	85 b5       	in	r24, 0x25	; 37
     a2a:	89 2b       	or	r24, r25
     a2c:	85 bd       	out	0x25, r24	; 37
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret

00000a32 <Timer_Stop>:
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	39 f0       	breq	.+14     	; 0xa44 <Timer_Stop+0x12>
     a36:	18 f0       	brcs	.+6      	; 0xa3e <Timer_Stop+0xc>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	39 f0       	breq	.+14     	; 0xa4a <Timer_Stop+0x18>
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <Timer_Stop+0x1c>
     a3e:	83 b7       	in	r24, 0x33	; 51
     a40:	13 be       	out	0x33, r1	; 51
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <Timer_Stop+0x1c>
     a44:	8e b5       	in	r24, 0x2e	; 46
     a46:	1e bc       	out	0x2e, r1	; 46
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <Timer_Stop+0x1c>
     a4a:	85 b5       	in	r24, 0x25	; 37
     a4c:	15 bc       	out	0x25, r1	; 37
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	08 95       	ret

00000a52 <Timer_SetValue>:
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	31 f0       	breq	.+12     	; 0xa62 <Timer_SetValue+0x10>
     a56:	18 f0       	brcs	.+6      	; 0xa5e <Timer_SetValue+0xc>
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	31 f0       	breq	.+12     	; 0xa68 <Timer_SetValue+0x16>
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <Timer_SetValue+0x18>
     a5e:	62 bf       	out	0x32, r22	; 50
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <Timer_SetValue+0x18>
     a62:	7d bd       	out	0x2d, r23	; 45
     a64:	6c bd       	out	0x2c, r22	; 44
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <Timer_SetValue+0x18>
     a68:	64 bd       	out	0x24, r22	; 36
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	08 95       	ret

00000a6e <Timer_GetValue>:
     a6e:	61 15       	cp	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	d9 f0       	breq	.+54     	; 0xaaa <Timer_GetValue+0x3c>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	59 f0       	breq	.+22     	; 0xa8e <Timer_GetValue+0x20>
     a78:	18 f0       	brcs	.+6      	; 0xa80 <Timer_GetValue+0x12>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	79 f0       	breq	.+30     	; 0xa9c <Timer_GetValue+0x2e>
     a7e:	17 c0       	rjmp	.+46     	; 0xaae <Timer_GetValue+0x40>
     a80:	82 b7       	in	r24, 0x32	; 50
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	fb 01       	movw	r30, r22
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	08 95       	ret
     a8e:	8c b5       	in	r24, 0x2c	; 44
     a90:	9d b5       	in	r25, 0x2d	; 45
     a92:	fb 01       	movw	r30, r22
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	08 95       	ret
     a9c:	84 b5       	in	r24, 0x24	; 36
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	fb 01       	movw	r30, r22
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	80 83       	st	Z, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	08 95       	ret
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	08 95       	ret

00000ab2 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){      
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
   TOV_T0_Call_Back();    
     ad4:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <TOV_T0_Call_Back>
     ad8:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <TOV_T0_Call_Back+0x1>
     adc:	09 95       	icall
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_9>:

ISR_TIMER1_OVF(){
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
   TOV_T1_Call_Back();     
     b22:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <TOV_T1_Call_Back>
     b26:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <TOV_T1_Call_Back+0x1>
     b2a:	09 95       	icall
}
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_5>:

ISR_TIMER2_OVF(){
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	2f 93       	push	r18
     b5a:	3f 93       	push	r19
     b5c:	4f 93       	push	r20
     b5e:	5f 93       	push	r21
     b60:	6f 93       	push	r22
     b62:	7f 93       	push	r23
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
   TOV_T2_Call_Back();    
     b70:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <TOV_T2_Call_Back>
     b74:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <TOV_T2_Call_Back+0x1>
     b78:	09 95       	icall
}
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <__vector_10>:



ISR_TIMER0_COMP(){
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
   /* on successful character reception : you can read the new character */  
   //gu8_RX_CompleteFlag = 1;
   rx_call_back();
     bd2:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <rx_call_back>
     bd6:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <rx_call_back+0x1>
     bda:	09 95       	icall
}
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_15>:
//{
   /* if data register is empty : you can write a new character. */            
//}

ISR_USART_TX()
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
   /* if data register is empty : you can write a new character. */
   //gu8_TX_CompleteFlag = 1;
   tx_call_back();     
     c20:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <tx_call_back>
     c24:	f0 91 ca 00 	lds	r31, 0x00CA	; 0x8000ca <tx_call_back+0x1>
     c28:	09 95       	icall
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <Set_IC_Val>:
 */
 EnmRTEError_t Set_IC_Val(uint16_t val)
 {
    uint8_t au8_errorState = 0;
    /* Sets/Updates Input Capture value*/
    gu16_inputCaptureVal = val;    
     c4c:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <gu16_inputCaptureVal+0x1>
     c50:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <gu16_inputCaptureVal>
    /* report success */
    au8_errorState = IC_SET_SUCCESS;

    return au8_errorState;
 }
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret

00000c58 <Set_DistanceVal>:
 EnmRTEError_t Set_DistanceVal(uint32_t val)
 {
    /* Sets/Updates Distance value*/
    uint8_t au8_errorState = 0;
    /* Sets/Updates Input Capture value*/
    gu32_distance = val;
     c58:	60 93 cd 00 	sts	0x00CD, r22	; 0x8000cd <gu32_distance>
     c5c:	70 93 ce 00 	sts	0x00CE, r23	; 0x8000ce <gu32_distance+0x1>
     c60:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <gu32_distance+0x2>
     c64:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <gu32_distance+0x3>
    /* report success */
    au8_errorState = DISTANCE_SET_SUCCESS;

    return au8_errorState;
 }
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	08 95       	ret

00000c6c <Get_IC_Val>:
 *   @return EnmRTEError_t
 */
 EnmRTEError_t Get_IC_Val(uint16_t * val)
 {
    uint8_t au8_errorState = 0;   
    if(NULL != val)
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	49 f0       	breq	.+18     	; 0xc82 <Get_IC_Val+0x16>
    {
       /* Get Input Capture value*/
       *val = gu16_inputCaptureVal;
     c70:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <gu16_inputCaptureVal>
     c74:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <gu16_inputCaptureVal+0x1>
     c78:	fc 01       	movw	r30, r24
     c7a:	31 83       	std	Z+1, r19	; 0x01
     c7c:	20 83       	st	Z, r18
      /* Report Success */
      au8_errorState = IC_GET_SUCCESS;
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	08 95       	ret
    }
    else
    {
      /* Report Fail */
      au8_errorState = IC_GET_FAIL;
     c82:	84 e0       	ldi	r24, 0x04	; 4
    }

    return au8_errorState;
 }
     c84:	08 95       	ret

00000c86 <Get_DistanceVal>:
 *   @return EnmRTEError_t
 */
 EnmRTEError_t Get_DistanceVal(uint32_t * val)
 {
    uint8_t au8_errorState = 0;
    if(NULL != val)
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	79 f0       	breq	.+30     	; 0xca8 <Get_DistanceVal+0x22>
    {
       /* Get Distance value*/
       *val = gu32_distance;
     c8a:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <gu32_distance>
     c8e:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <gu32_distance+0x1>
     c92:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <gu32_distance+0x2>
     c96:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <gu32_distance+0x3>
     c9a:	fc 01       	movw	r30, r24
     c9c:	40 83       	st	Z, r20
     c9e:	51 83       	std	Z+1, r21	; 0x01
     ca0:	62 83       	std	Z+2, r22	; 0x02
     ca2:	73 83       	std	Z+3, r23	; 0x03
       /* Report Success */
       au8_errorState = DISTANCE_GET_SUCCESS;
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	08 95       	ret
    }
    else
    {
       /* Report Fail */
       au8_errorState = DISTANCE_GET_FAIL;
     ca8:	88 e0       	ldi	r24, 0x08	; 8
    }

    return au8_errorState;
     caa:	08 95       	ret

00000cac <SOS_NO_OP>:
   gu8_tickFlag = 1;
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
}

static void SOS_NO_OP(void){}
     cac:	08 95       	ret

00000cae <SOS_T2_OV_CallBack>:
*/
static void SOS_T2_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
     cb4:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
     cb8:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	0e 94 29 05 	call	0xa52	; 0xa52 <Timer_SetValue>
     cc2:	08 95       	ret

00000cc4 <SOS_T1_OV_CallBack>:
*/
static void SOS_T1_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
     cca:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
     cce:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
     cd2:	0e 94 29 05 	call	0xa52	; 0xa52 <Timer_SetValue>
     cd6:	08 95       	ret

00000cd8 <SOS_T0_OV_CallBack>:
*/
static void SOS_T0_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag */
   gu8_tickFlag = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
     cde:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
     ce2:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 29 05 	call	0xa52	; 0xa52 <Timer_SetValue>
     cec:	08 95       	ret

00000cee <SOS_Init>:
*  @param const strSOS_Cfg_t *  strSOS_Init
*
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_Init(const strSOS_Cfg_t * strSOS_Init)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strSOS_Init)
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <SOS_Init+0xa>
     cf6:	8a c0       	rjmp	.+276    	; 0xe0c <SOS_Init+0x11e>
     cf8:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strSOS_Init->timer_channel)
     cfa:	98 81       	ld	r25, Y
     cfc:	91 30       	cpi	r25, 0x01	; 1
     cfe:	81 f1       	breq	.+96     	; 0xd60 <SOS_Init+0x72>
     d00:	20 f0       	brcs	.+8      	; 0xd0a <SOS_Init+0x1c>
     d02:	92 30       	cpi	r25, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <SOS_Init+0x1a>
     d06:	56 c0       	rjmp	.+172    	; 0xdb4 <SOS_Init+0xc6>
     d08:	83 c0       	rjmp	.+262    	; 0xe10 <SOS_Init+0x122>
      {
         case TIMER_0:
            gu8_timerChannel = TIMER_0; 
     d0a:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <gu8_timerChannel>
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0SosConfig);
     d0e:	89 e7       	ldi	r24, 0x79	; 121
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 c6 04 	call	0x98c	; 0x98c <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
     d16:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <gstrTimer0TmuConfig+0x6>
     d1a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <gstrTimer0TmuConfig+0x7>
     d1e:	05 97       	sbiw	r24, 0x05	; 5
     d20:	b9 f4       	brne	.+46     	; 0xd50 <SOS_Init+0x62>
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T0_OV_VAL - gu16_preloader;                  
     d22:	69 81       	ldd	r22, Y+1	; 0x01
     d24:	7a 81       	ldd	r23, Y+2	; 0x02
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 4e 08 	call	0x109c	; 0x109c <__floatunsisf>
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4a e7       	ldi	r20, 0x7A	; 122
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     d3a:	0e 94 1f 08 	call	0x103e	; 0x103e <__fixunssfsi>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	31 e0       	ldi	r19, 0x01	; 1
     d42:	c9 01       	movw	r24, r18
     d44:	86 1b       	sub	r24, r22
     d46:	97 0b       	sbc	r25, r23
     d48:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <gu16_preloader+0x1>
     d4c:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <gu16_preloader>
               break;               
            }
            /* Set timer0 call Back */
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,SOS_T0_OV_CallBack);           
     d50:	4c e6       	ldi	r20, 0x6C	; 108
     d52:	56 e0       	ldi	r21, 0x06	; 6
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 9b 04 	call	0x936	; 0x936 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
     d5c:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T0_OV_VAL - gu16_preloader;                  
               break;               
            }
            /* Set timer0 call Back */
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,SOS_T0_OV_CallBack);           
         break;
     d5e:	59 c0       	rjmp	.+178    	; 0xe12 <SOS_Init+0x124>
         case TIMER_1:
            gu8_timerChannel = TIMER_1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <gu8_timerChannel>
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1SosConfig);
     d66:	8f e6       	ldi	r24, 0x6F	; 111
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 c6 04 	call	0x98c	; 0x98c <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
     d6e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <gstrTimer1TmuConfig+0x6>
     d72:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <gstrTimer1TmuConfig+0x7>
     d76:	05 97       	sbiw	r24, 0x05	; 5
     d78:	a9 f4       	brne	.+42     	; 0xda4 <SOS_Init+0xb6>
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T1_OV_VAL - gu16_preloader;                  
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 4e 08 	call	0x109c	; 0x109c <__floatunsisf>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4a e7       	ldi	r20, 0x7A	; 122
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     d92:	0e 94 1f 08 	call	0x103e	; 0x103e <__fixunssfsi>
     d96:	71 95       	neg	r23
     d98:	61 95       	neg	r22
     d9a:	71 09       	sbc	r23, r1
     d9c:	70 93 d4 00 	sts	0x00D4, r23	; 0x8000d4 <gu16_preloader+0x1>
     da0:	60 93 d3 00 	sts	0x00D3, r22	; 0x8000d3 <gu16_preloader>
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,SOS_T1_OV_CallBack);
     da4:	42 e6       	ldi	r20, 0x62	; 98
     da6:	56 e0       	ldi	r21, 0x06	; 6
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 9b 04 	call	0x936	; 0x936 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
     db0:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T1_OV_VAL - gu16_preloader;                  
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,SOS_T1_OV_CallBack);
         break;
     db2:	2f c0       	rjmp	.+94     	; 0xe12 <SOS_Init+0x124>
         case TIMER_2:
            gu8_timerChannel = TIMER_2;
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <gu8_timerChannel>
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2SosConfig);
     dba:	85 e6       	ldi	r24, 0x65	; 101
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 c6 04 	call	0x98c	; 0x98c <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
     dc2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gstrTimer2TmuConfig+0x6>
     dc6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gstrTimer2TmuConfig+0x7>
     dca:	07 97       	sbiw	r24, 0x07	; 7
     dcc:	b9 f4       	brne	.+46     	; 0xdfc <SOS_Init+0x10e>
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T2_OV_VAL - gu16_preloader;                  
     dce:	69 81       	ldd	r22, Y+1	; 0x01
     dd0:	7a 81       	ldd	r23, Y+2	; 0x02
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 4e 08 	call	0x109c	; 0x109c <__floatunsisf>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a e7       	ldi	r20, 0x7A	; 122
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     de6:	0e 94 1f 08 	call	0x103e	; 0x103e <__fixunssfsi>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	31 e0       	ldi	r19, 0x01	; 1
     dee:	c9 01       	movw	r24, r18
     df0:	86 1b       	sub	r24, r22
     df2:	97 0b       	sbc	r25, r23
     df4:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <gu16_preloader+0x1>
     df8:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <gu16_preloader>
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
     dfc:	47 e5       	ldi	r20, 0x57	; 87
     dfe:	56 e0       	ldi	r21, 0x06	; 6
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 9b 04 	call	0x936	; 0x936 <Timer_SetCallBack>
         break;
      }
      au8_errorState = SOS_INIT_OK;      
     e08:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T2_OV_VAL - gu16_preloader;                  
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <SOS_Init+0x124>
      }
      au8_errorState = SOS_INIT_OK;      
   }else{
      au8_errorState = SOS_INIT_NOK;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <SOS_Init+0x124>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
     e10:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = SOS_INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <SOS_Dispatch>:
*  @param void
*
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_Dispatch(void)
{
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
    /* Define Error state */
   uint8_t au8_errorState;   
   /* Check if the buffer not empty and excute or tick flag has been fired or not*/
   if((0 <= gindex) && (1 == gu8_tickFlag))
     e2c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gindex>
     e30:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <gindex+0x1>
     e34:	99 23       	and	r25, r25
     e36:	0c f4       	brge	.+2      	; 0xe3a <SOS_Dispatch+0x22>
     e38:	41 c0       	rjmp	.+130    	; 0xebc <SOS_Dispatch+0xa4>
     e3a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <gu8_tickFlag>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	e9 f5       	brne	.+122    	; 0xebc <SOS_Dispatch+0xa4>
   {
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
     e42:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <gu8_tickFlag>
     e46:	c5 ed       	ldi	r28, 0xD5	; 213
     e48:	d0 e0       	ldi	r29, 0x00	; 0
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	10 e0       	ldi	r17, 0x00	; 0
                  gindex = -1;
               }                
               else
               {
                  /* Assign to it a task with no operation */
                  garrTaskSOSBuffer[au16_iter].fn = SOS_NO_OP;                
     e4e:	0f 2e       	mov	r0, r31
     e50:	f6 e5       	ldi	r31, 0x56	; 86
     e52:	af 2e       	mov	r10, r31
     e54:	f6 e0       	ldi	r31, 0x06	; 6
     e56:	bf 2e       	mov	r11, r31
     e58:	f0 2d       	mov	r31, r0
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
               {
                  /* Decrement gindex*/
                  gindex = -1;
     e5a:	cc 24       	eor	r12, r12
     e5c:	ca 94       	dec	r12
     e5e:	dc 2c       	mov	r13, r12
      
      /* Search for the Task of the given function within SOS buffer*/
      for(;au16_iter <= gindex; au16_iter++)
      {
         /* Increment task internal tick count */
         garrTaskSOSBuffer[au16_iter].tick_counts++;
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
         /* Check if task ticks count has reached to the required tick value -which is (task.counter)- to determine whether to execute task's function or not */
         if((garrTaskSOSBuffer[au16_iter].tick_counts) == (garrTaskSOSBuffer[au16_iter].counter))
     e6a:	28 81       	ld	r18, Y
     e6c:	39 81       	ldd	r19, Y+1	; 0x01
     e6e:	82 17       	cp	r24, r18
     e70:	93 07       	cpc	r25, r19
     e72:	d1 f4       	brne	.+52     	; 0xea8 <SOS_Dispatch+0x90>
         { 
            /* 2 - Reset task tick_counts*/ 
            garrTaskSOSBuffer[au16_iter].tick_counts = 0;          
     e74:	1e 82       	std	Y+6, r1	; 0x06
     e76:	1d 82       	std	Y+5, r1	; 0x05
            /* 3 - Execute Task Function */
            garrTaskSOSBuffer[au16_iter].fn();                      
     e78:	ef 81       	ldd	r30, Y+7	; 0x07
     e7a:	f8 85       	ldd	r31, Y+8	; 0x08
     e7c:	09 95       	icall
            /* 4 - See Whether the task is periodic or one shoot -after its execution- */
            if((ONESHOOT == garrTaskSOSBuffer[au16_iter].work_mode) && (SOS_NO_OP != garrTaskSOSBuffer[au16_iter].fn))
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 f4       	brne	.+36     	; 0xea8 <SOS_Dispatch+0x90>
     e84:	8f 81       	ldd	r24, Y+7	; 0x07
     e86:	98 85       	ldd	r25, Y+8	; 0x08
     e88:	86 55       	subi	r24, 0x56	; 86
     e8a:	96 40       	sbci	r25, 0x06	; 6
     e8c:	69 f0       	breq	.+26     	; 0xea8 <SOS_Dispatch+0x90>
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
     e8e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gindex>
     e92:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <gindex+0x1>
     e96:	89 2b       	or	r24, r25
     e98:	29 f4       	brne	.+10     	; 0xea4 <SOS_Dispatch+0x8c>
               {
                  /* Decrement gindex*/
                  gindex = -1;
     e9a:	d0 92 ac 00 	sts	0x00AC, r13	; 0x8000ac <gindex+0x1>
     e9e:	c0 92 ab 00 	sts	0x00AB, r12	; 0x8000ab <gindex>
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <SOS_Dispatch+0x90>
               }                
               else
               {
                  /* Assign to it a task with no operation */
                  garrTaskSOSBuffer[au16_iter].fn = SOS_NO_OP;                
     ea4:	b8 86       	std	Y+8, r11	; 0x08
     ea6:	af 82       	std	Y+7, r10	; 0x07
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
      
      /* Search for the Task of the given function within SOS buffer*/
      for(;au16_iter <= gindex; au16_iter++)
     ea8:	0f 5f       	subi	r16, 0xFF	; 255
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	29 96       	adiw	r28, 0x09	; 9
     eae:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gindex>
     eb2:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <gindex+0x1>
     eb6:	80 17       	cp	r24, r16
     eb8:	91 07       	cpc	r25, r17
     eba:	94 f6       	brge	.-92     	; 0xe60 <SOS_Dispatch+0x48>
   {
      /* return error code array is empty */;
      au8_errorState = SOS_BUFFER_EMPTY;      
   }
   return au8_errorState;  
}
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	08 95       	ret

00000ed4 <SOS_AddTask>:
EnmSOSError_t SOS_AddTask(uint16_t duration , void (* task_fn)(void)  , uint8_t work_mode ,uint16_t priority)
{
   /* Define Error state */
   uint8_t au8_errorState = 0;
   
   if(NULL != task_fn)
     ed4:	61 15       	cp	r22, r1
     ed6:	71 05       	cpc	r23, r1
     ed8:	61 f1       	breq	.+88     	; 0xf32 <SOS_AddTask+0x5e>
   {
      /*---- Enable Interrupt ----*/
      /*---- Add Task to SOS Buffer while buffer is not full ----*/
      if(SOS_BUFFER_SIZE > gindex)
     eda:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <gindex>
     ede:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <gindex+0x1>
     ee2:	3a 97       	sbiw	r30, 0x0a	; 10
     ee4:	44 f5       	brge	.+80     	; 0xf36 <SOS_AddTask+0x62>
      {
         /* Create a new task */
         strTaskSos_t *austr_Task = NULL;         
         austr_Task->counter = duration;
     ee6:	e0 e0       	ldi	r30, 0x00	; 0
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
         austr_Task->work_mode = work_mode;
     eee:	44 83       	std	Z+4, r20	; 0x04
         austr_Task->tick_counts = 0;
     ef0:	16 82       	std	Z+6, r1	; 0x06
     ef2:	15 82       	std	Z+5, r1	; 0x05
         austr_Task->priority = priority;
     ef4:	33 83       	std	Z+3, r19	; 0x03
     ef6:	22 83       	std	Z+2, r18	; 0x02
         austr_Task->fn = task_fn;
     ef8:	70 87       	std	Z+8, r23	; 0x08
     efa:	67 83       	std	Z+7, r22	; 0x07
         /* Increment gindex : to point to the next empty location to store the new task */
         gindex++;         
     efc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gindex>
     f00:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <gindex+0x1>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <gindex+0x1>
     f0a:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gindex>
         /* Append the task to SOS buffer */
         garrTaskSOSBuffer[gindex] = *austr_Task;         
     f0e:	dc 01       	movw	r26, r24
     f10:	aa 0f       	add	r26, r26
     f12:	bb 1f       	adc	r27, r27
     f14:	aa 0f       	add	r26, r26
     f16:	bb 1f       	adc	r27, r27
     f18:	aa 0f       	add	r26, r26
     f1a:	bb 1f       	adc	r27, r27
     f1c:	a8 0f       	add	r26, r24
     f1e:	b9 1f       	adc	r27, r25
     f20:	ab 52       	subi	r26, 0x2B	; 43
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	89 e0       	ldi	r24, 0x09	; 9
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <SOS_AddTask+0x52>
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_AddTask(uint16_t duration , void (* task_fn)(void)  , uint8_t work_mode ,uint16_t priority)
{
   /* Define Error state */
   uint8_t au8_errorState = 0;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 95       	ret
      }else{
         /* return error code buffer is full*/
         au8_errorState = SOS_BUFFER_FULL;
      }
   }else{
      au8_errorState = SOS_INVALID_TASK_PARAM;
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	08 95       	ret
         gindex++;         
         /* Append the task to SOS buffer */
         garrTaskSOSBuffer[gindex] = *austr_Task;         
      }else{
         /* return error code buffer is full*/
         au8_errorState = SOS_BUFFER_FULL;
     f36:	83 e0       	ldi	r24, 0x03	; 3
      }
   }else{
      au8_errorState = SOS_INVALID_TASK_PARAM;
   }  
   return au8_errorState;
}
     f38:	08 95       	ret

00000f3a <SOS_TimerStart>:
*  @param void
*
*  @return void
*/
EnmSOSError_t SOS_TimerStart(void)
{
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	29 97       	sbiw	r28, 0x09	; 9
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
   /* Sort the tasks before starting your timer - After adding tasks - : gindex+1 represents the number of current elements exist in the buffer*/
   priorityBubbleSort(garrTaskSOSBuffer,(uint16_t)(gindex+1));
     f52:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gindex>
     f56:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <gindex+0x1>
{
   uint16_t i = n-1;   //we could deal with n directly without needing i , but to indicate that
   // `i` is a parameter that is to express the number of values remaining to
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	09 f4       	brne	.+2      	; 0xf60 <SOS_TimerStart+0x26>
     f5e:	44 c0       	rjmp	.+136    	; 0xfe8 <SOS_TimerStart+0xae>
     f60:	8c 01       	movw	r16, r24
     f62:	01 50       	subi	r16, 0x01	; 1
     f64:	11 09       	sbc	r17, r1
     f66:	bc 01       	movw	r22, r24
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	66 0f       	add	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	68 0f       	add	r22, r24
     f76:	79 1f       	adc	r23, r25
     f78:	6b 52       	subi	r22, 0x2B	; 43
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	2e c0       	rjmp	.+92     	; 0xfda <SOS_TimerStart+0xa0>
   {
      uint16_t j = 0;
      for(;j < i;j++)
      {
         if((arr[j].priority) > (arr[j+1].priority))
     f7e:	fc 01       	movw	r30, r24
     f80:	22 81       	ldd	r18, Z+2	; 0x02
     f82:	33 81       	ldd	r19, Z+3	; 0x03
     f84:	43 85       	ldd	r20, Z+11	; 0x0b
     f86:	54 85       	ldd	r21, Z+12	; 0x0c
     f88:	42 17       	cp	r20, r18
     f8a:	53 07       	cpc	r21, r19
     f8c:	d8 f4       	brcc	.+54     	; 0xfc4 <SOS_TimerStart+0x8a>
/*---- End Of Call Backs ----*/
/*---- Start Priority Sorting Handler ----*/
static void swapVal(strTaskSos_t * a,strTaskSos_t * b)
{
   strTaskSos_t temp;
   PORTB_DATA = a->priority;
     f8e:	28 bb       	out	0x18, r18	; 24
   PORTC_DATA = b->priority;
     f90:	23 85       	ldd	r18, Z+11	; 0x0b
     f92:	25 bb       	out	0x15, r18	; 21
   temp = *a;
     f94:	29 e0       	ldi	r18, 0x09	; 9
     f96:	de 01       	movw	r26, r28
     f98:	11 96       	adiw	r26, 0x01	; 1
     f9a:	01 90       	ld	r0, Z+
     f9c:	0d 92       	st	X+, r0
     f9e:	2a 95       	dec	r18
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <SOS_TimerStart+0x60>
   *a = *b;
     fa2:	29 e0       	ldi	r18, 0x09	; 9
     fa4:	fc 01       	movw	r30, r24
     fa6:	39 96       	adiw	r30, 0x09	; 9
     fa8:	dc 01       	movw	r26, r24
     faa:	01 90       	ld	r0, Z+
     fac:	0d 92       	st	X+, r0
     fae:	2a 95       	dec	r18
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <SOS_TimerStart+0x70>
   *b = temp;
     fb2:	29 e0       	ldi	r18, 0x09	; 9
     fb4:	fe 01       	movw	r30, r28
     fb6:	31 96       	adiw	r30, 0x01	; 1
     fb8:	dc 01       	movw	r26, r24
     fba:	19 96       	adiw	r26, 0x09	; 9
     fbc:	01 90       	ld	r0, Z+
     fbe:	0d 92       	st	X+, r0
     fc0:	2a 95       	dec	r18
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <SOS_TimerStart+0x82>
     fc4:	09 96       	adiw	r24, 0x09	; 9
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
   {
      uint16_t j = 0;
      for(;j < i;j++)
     fc6:	68 17       	cp	r22, r24
     fc8:	79 07       	cpc	r23, r25
     fca:	c9 f6       	brne	.-78     	; 0xf7e <SOS_TimerStart+0x44>
{
   uint16_t i = n-1;   //we could deal with n directly without needing i , but to indicate that
   // `i` is a parameter that is to express the number of values remaining to
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
     fcc:	01 15       	cp	r16, r1
     fce:	11 05       	cpc	r17, r1
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <SOS_TimerStart+0xae>
     fd2:	01 50       	subi	r16, 0x01	; 1
     fd4:	11 09       	sbc	r17, r1
     fd6:	69 50       	subi	r22, 0x09	; 9
     fd8:	71 09       	sbc	r23, r1
   {
      uint16_t j = 0;
      for(;j < i;j++)
     fda:	0f 3f       	cpi	r16, 0xFF	; 255
     fdc:	ff ef       	ldi	r31, 0xFF	; 255
     fde:	1f 07       	cpc	r17, r31
     fe0:	c1 f3       	breq	.-16     	; 0xfd2 <SOS_TimerStart+0x98>
     fe2:	85 ed       	ldi	r24, 0xD5	; 213
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	cb cf       	rjmp	.-106    	; 0xf7e <SOS_TimerStart+0x44>
   /*  
   Switch on gu8_timerChannel instead of passing it directly 
   to Timer_Start() is a kind of protection if the initialized
   channel in the initialization process was wrong.
   */
   switch(gu8_timerChannel)
     fe8:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <gu8_timerChannel>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	61 f0       	breq	.+24     	; 0x1008 <SOS_TimerStart+0xce>
     ff0:	18 f0       	brcs	.+6      	; 0xff8 <SOS_TimerStart+0xbe>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	89 f0       	breq	.+34     	; 0x1018 <SOS_TimerStart+0xde>
     ff6:	17 c0       	rjmp	.+46     	; 0x1026 <SOS_TimerStart+0xec>
   {
      case TIMER_0:
         Timer_Start(TIMER_0,gu16_preloader);
     ff8:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
     ffc:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Timer_Start>
      break;
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <SOS_TimerStart+0xec>
      case TIMER_1:
         Timer_Start(TIMER_1,gu16_preloader);
    1008:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
    100c:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Timer_Start>
      break;
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <SOS_TimerStart+0xec>
      case TIMER_2:
         Timer_Start(TIMER_2,gu16_preloader);
    1018:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <gu16_preloader>
    101c:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <gu16_preloader+0x1>
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Timer_Start>
      break;
   }
   return SOS_TIMER_START_SUCCESS;
}
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	29 96       	adiw	r28, 0x09	; 9
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <__fixunssfsi>:
    103e:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_splitA>
    1042:	88 f0       	brcs	.+34     	; 0x1066 <__fixunssfsi+0x28>
    1044:	9f 57       	subi	r25, 0x7F	; 127
    1046:	98 f0       	brcs	.+38     	; 0x106e <__fixunssfsi+0x30>
    1048:	b9 2f       	mov	r27, r25
    104a:	99 27       	eor	r25, r25
    104c:	b7 51       	subi	r27, 0x17	; 23
    104e:	b0 f0       	brcs	.+44     	; 0x107c <__fixunssfsi+0x3e>
    1050:	e1 f0       	breq	.+56     	; 0x108a <__fixunssfsi+0x4c>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	1a f0       	brmi	.+6      	; 0x1062 <__fixunssfsi+0x24>
    105c:	ba 95       	dec	r27
    105e:	c9 f7       	brne	.-14     	; 0x1052 <__fixunssfsi+0x14>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <__fixunssfsi+0x4c>
    1062:	b1 30       	cpi	r27, 0x01	; 1
    1064:	91 f0       	breq	.+36     	; 0x108a <__fixunssfsi+0x4c>
    1066:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_zero>
    106a:	b1 e0       	ldi	r27, 0x01	; 1
    106c:	08 95       	ret
    106e:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_zero>
    1072:	67 2f       	mov	r22, r23
    1074:	78 2f       	mov	r23, r24
    1076:	88 27       	eor	r24, r24
    1078:	b8 5f       	subi	r27, 0xF8	; 248
    107a:	39 f0       	breq	.+14     	; 0x108a <__fixunssfsi+0x4c>
    107c:	b9 3f       	cpi	r27, 0xF9	; 249
    107e:	cc f3       	brlt	.-14     	; 0x1072 <__fixunssfsi+0x34>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b3 95       	inc	r27
    1088:	d9 f7       	brne	.-10     	; 0x1080 <__fixunssfsi+0x42>
    108a:	3e f4       	brtc	.+14     	; 0x109a <__fixunssfsi+0x5c>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__floatunsisf>:
    109c:	e8 94       	clt
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <__floatsisf+0x12>

000010a0 <__floatsisf>:
    10a0:	97 fb       	bst	r25, 7
    10a2:	3e f4       	brtc	.+14     	; 0x10b2 <__floatsisf+0x12>
    10a4:	90 95       	com	r25
    10a6:	80 95       	com	r24
    10a8:	70 95       	com	r23
    10aa:	61 95       	neg	r22
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	99 23       	and	r25, r25
    10b4:	a9 f0       	breq	.+42     	; 0x10e0 <__floatsisf+0x40>
    10b6:	f9 2f       	mov	r31, r25
    10b8:	96 e9       	ldi	r25, 0x96	; 150
    10ba:	bb 27       	eor	r27, r27
    10bc:	93 95       	inc	r25
    10be:	f6 95       	lsr	r31
    10c0:	87 95       	ror	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f1 11       	cpse	r31, r1
    10ca:	f8 cf       	rjmp	.-16     	; 0x10bc <__floatsisf+0x1c>
    10cc:	fa f4       	brpl	.+62     	; 0x110c <__floatsisf+0x6c>
    10ce:	bb 0f       	add	r27, r27
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <__floatsisf+0x36>
    10d2:	60 ff       	sbrs	r22, 0
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <__floatsisf+0x6c>
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	16 c0       	rjmp	.+44     	; 0x110c <__floatsisf+0x6c>
    10e0:	88 23       	and	r24, r24
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <__floatsisf+0x48>
    10e4:	96 e9       	ldi	r25, 0x96	; 150
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <__floatsisf+0x6a>
    10e8:	77 23       	and	r23, r23
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <__floatsisf+0x54>
    10ec:	9e e8       	ldi	r25, 0x8E	; 142
    10ee:	87 2f       	mov	r24, r23
    10f0:	76 2f       	mov	r23, r22
    10f2:	05 c0       	rjmp	.+10     	; 0x10fe <__floatsisf+0x5e>
    10f4:	66 23       	and	r22, r22
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__floatsisf+0x74>
    10f8:	96 e8       	ldi	r25, 0x86	; 134
    10fa:	86 2f       	mov	r24, r22
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	2a f0       	brmi	.+10     	; 0x110c <__floatsisf+0x6c>
    1102:	9a 95       	dec	r25
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	da f7       	brpl	.-10     	; 0x1102 <__floatsisf+0x62>
    110c:	88 0f       	add	r24, r24
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <__fp_split3>:
    1116:	57 fd       	sbrc	r21, 7
    1118:	90 58       	subi	r25, 0x80	; 128
    111a:	44 0f       	add	r20, r20
    111c:	55 1f       	adc	r21, r21
    111e:	59 f0       	breq	.+22     	; 0x1136 <__fp_splitA+0x10>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	71 f0       	breq	.+28     	; 0x1140 <__fp_splitA+0x1a>
    1124:	47 95       	ror	r20

00001126 <__fp_splitA>:
    1126:	88 0f       	add	r24, r24
    1128:	97 fb       	bst	r25, 7
    112a:	99 1f       	adc	r25, r25
    112c:	61 f0       	breq	.+24     	; 0x1146 <__fp_splitA+0x20>
    112e:	9f 3f       	cpi	r25, 0xFF	; 255
    1130:	79 f0       	breq	.+30     	; 0x1150 <__fp_splitA+0x2a>
    1132:	87 95       	ror	r24
    1134:	08 95       	ret
    1136:	12 16       	cp	r1, r18
    1138:	13 06       	cpc	r1, r19
    113a:	14 06       	cpc	r1, r20
    113c:	55 1f       	adc	r21, r21
    113e:	f2 cf       	rjmp	.-28     	; 0x1124 <__fp_split3+0xe>
    1140:	46 95       	lsr	r20
    1142:	f1 df       	rcall	.-30     	; 0x1126 <__fp_splitA>
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <__fp_splitA+0x30>
    1146:	16 16       	cp	r1, r22
    1148:	17 06       	cpc	r1, r23
    114a:	18 06       	cpc	r1, r24
    114c:	99 1f       	adc	r25, r25
    114e:	f1 cf       	rjmp	.-30     	; 0x1132 <__fp_splitA+0xc>
    1150:	86 95       	lsr	r24
    1152:	71 05       	cpc	r23, r1
    1154:	61 05       	cpc	r22, r1
    1156:	08 94       	sec
    1158:	08 95       	ret

0000115a <__fp_zero>:
    115a:	e8 94       	clt

0000115c <__fp_szero>:
    115c:	bb 27       	eor	r27, r27
    115e:	66 27       	eor	r22, r22
    1160:	77 27       	eor	r23, r23
    1162:	cb 01       	movw	r24, r22
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret

00001168 <__mulsf3>:
    1168:	0e 94 c7 08 	call	0x118e	; 0x118e <__mulsf3x>
    116c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_round>
    1170:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_pscA>
    1174:	38 f0       	brcs	.+14     	; 0x1184 <__mulsf3+0x1c>
    1176:	0e 94 31 09 	call	0x1262	; 0x1262 <__fp_pscB>
    117a:	20 f0       	brcs	.+8      	; 0x1184 <__mulsf3+0x1c>
    117c:	95 23       	and	r25, r21
    117e:	11 f0       	breq	.+4      	; 0x1184 <__mulsf3+0x1c>
    1180:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    1184:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_nan>
    1188:	11 24       	eor	r1, r1
    118a:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_szero>

0000118e <__mulsf3x>:
    118e:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_split3>
    1192:	70 f3       	brcs	.-36     	; 0x1170 <__mulsf3+0x8>

00001194 <__mulsf3_pse>:
    1194:	95 9f       	mul	r25, r21
    1196:	c1 f3       	breq	.-16     	; 0x1188 <__mulsf3+0x20>
    1198:	95 0f       	add	r25, r21
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	55 1f       	adc	r21, r21
    119e:	62 9f       	mul	r22, r18
    11a0:	f0 01       	movw	r30, r0
    11a2:	72 9f       	mul	r23, r18
    11a4:	bb 27       	eor	r27, r27
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	63 9f       	mul	r22, r19
    11ac:	aa 27       	eor	r26, r26
    11ae:	f0 0d       	add	r31, r0
    11b0:	b1 1d       	adc	r27, r1
    11b2:	aa 1f       	adc	r26, r26
    11b4:	64 9f       	mul	r22, r20
    11b6:	66 27       	eor	r22, r22
    11b8:	b0 0d       	add	r27, r0
    11ba:	a1 1d       	adc	r26, r1
    11bc:	66 1f       	adc	r22, r22
    11be:	82 9f       	mul	r24, r18
    11c0:	22 27       	eor	r18, r18
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	73 9f       	mul	r23, r19
    11ca:	b0 0d       	add	r27, r0
    11cc:	a1 1d       	adc	r26, r1
    11ce:	62 1f       	adc	r22, r18
    11d0:	83 9f       	mul	r24, r19
    11d2:	a0 0d       	add	r26, r0
    11d4:	61 1d       	adc	r22, r1
    11d6:	22 1f       	adc	r18, r18
    11d8:	74 9f       	mul	r23, r20
    11da:	33 27       	eor	r19, r19
    11dc:	a0 0d       	add	r26, r0
    11de:	61 1d       	adc	r22, r1
    11e0:	23 1f       	adc	r18, r19
    11e2:	84 9f       	mul	r24, r20
    11e4:	60 0d       	add	r22, r0
    11e6:	21 1d       	adc	r18, r1
    11e8:	82 2f       	mov	r24, r18
    11ea:	76 2f       	mov	r23, r22
    11ec:	6a 2f       	mov	r22, r26
    11ee:	11 24       	eor	r1, r1
    11f0:	9f 57       	subi	r25, 0x7F	; 127
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	9a f0       	brmi	.+38     	; 0x121c <__mulsf3_pse+0x88>
    11f6:	f1 f0       	breq	.+60     	; 0x1234 <__mulsf3_pse+0xa0>
    11f8:	88 23       	and	r24, r24
    11fa:	4a f0       	brmi	.+18     	; 0x120e <__mulsf3_pse+0x7a>
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	bb 1f       	adc	r27, r27
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	91 50       	subi	r25, 0x01	; 1
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	a9 f7       	brne	.-22     	; 0x11f8 <__mulsf3_pse+0x64>
    120e:	9e 3f       	cpi	r25, 0xFE	; 254
    1210:	51 05       	cpc	r21, r1
    1212:	80 f0       	brcs	.+32     	; 0x1234 <__mulsf3_pse+0xa0>
    1214:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    1218:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_szero>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	e4 f3       	brlt	.-8      	; 0x1218 <__mulsf3_pse+0x84>
    1220:	98 3e       	cpi	r25, 0xE8	; 232
    1222:	d4 f3       	brlt	.-12     	; 0x1218 <__mulsf3_pse+0x84>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	e7 95       	ror	r30
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c1 f7       	brne	.-16     	; 0x1224 <__mulsf3_pse+0x90>
    1234:	fe 2b       	or	r31, r30
    1236:	88 0f       	add	r24, r24
    1238:	91 1d       	adc	r25, r1
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <__fp_inf>:
    1242:	97 f9       	bld	r25, 7
    1244:	9f 67       	ori	r25, 0x7F	; 127
    1246:	80 e8       	ldi	r24, 0x80	; 128
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	08 95       	ret

0000124e <__fp_nan>:
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	80 ec       	ldi	r24, 0xC0	; 192
    1252:	08 95       	ret

00001254 <__fp_pscA>:
    1254:	00 24       	eor	r0, r0
    1256:	0a 94       	dec	r0
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	18 06       	cpc	r1, r24
    125e:	09 06       	cpc	r0, r25
    1260:	08 95       	ret

00001262 <__fp_pscB>:
    1262:	00 24       	eor	r0, r0
    1264:	0a 94       	dec	r0
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	14 06       	cpc	r1, r20
    126c:	05 06       	cpc	r0, r21
    126e:	08 95       	ret

00001270 <__fp_round>:
    1270:	09 2e       	mov	r0, r25
    1272:	03 94       	inc	r0
    1274:	00 0c       	add	r0, r0
    1276:	11 f4       	brne	.+4      	; 0x127c <__fp_round+0xc>
    1278:	88 23       	and	r24, r24
    127a:	52 f0       	brmi	.+20     	; 0x1290 <__fp_round+0x20>
    127c:	bb 0f       	add	r27, r27
    127e:	40 f4       	brcc	.+16     	; 0x1290 <__fp_round+0x20>
    1280:	bf 2b       	or	r27, r31
    1282:	11 f4       	brne	.+4      	; 0x1288 <__fp_round+0x18>
    1284:	60 ff       	sbrs	r22, 0
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <__fp_round+0x20>
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__udivmodsi4>:
    1292:	a1 e2       	ldi	r26, 0x21	; 33
    1294:	1a 2e       	mov	r1, r26
    1296:	aa 1b       	sub	r26, r26
    1298:	bb 1b       	sub	r27, r27
    129a:	fd 01       	movw	r30, r26
    129c:	0d c0       	rjmp	.+26     	; 0x12b8 <__udivmodsi4_ep>

0000129e <__udivmodsi4_loop>:
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	ee 1f       	adc	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	a2 17       	cp	r26, r18
    12a8:	b3 07       	cpc	r27, r19
    12aa:	e4 07       	cpc	r30, r20
    12ac:	f5 07       	cpc	r31, r21
    12ae:	20 f0       	brcs	.+8      	; 0x12b8 <__udivmodsi4_ep>
    12b0:	a2 1b       	sub	r26, r18
    12b2:	b3 0b       	sbc	r27, r19
    12b4:	e4 0b       	sbc	r30, r20
    12b6:	f5 0b       	sbc	r31, r21

000012b8 <__udivmodsi4_ep>:
    12b8:	66 1f       	adc	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	1a 94       	dec	r1
    12c2:	69 f7       	brne	.-38     	; 0x129e <__udivmodsi4_loop>
    12c4:	60 95       	com	r22
    12c6:	70 95       	com	r23
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	9b 01       	movw	r18, r22
    12ce:	ac 01       	movw	r20, r24
    12d0:	bd 01       	movw	r22, r26
    12d2:	cf 01       	movw	r24, r30
    12d4:	08 95       	ret

000012d6 <__umulhisi3>:
    12d6:	a2 9f       	mul	r26, r18
    12d8:	b0 01       	movw	r22, r0
    12da:	b3 9f       	mul	r27, r19
    12dc:	c0 01       	movw	r24, r0
    12de:	a3 9f       	mul	r26, r19
    12e0:	70 0d       	add	r23, r0
    12e2:	81 1d       	adc	r24, r1
    12e4:	11 24       	eor	r1, r1
    12e6:	91 1d       	adc	r25, r1
    12e8:	b2 9f       	mul	r27, r18
    12ea:	70 0d       	add	r23, r0
    12ec:	81 1d       	adc	r24, r1
    12ee:	11 24       	eor	r1, r1
    12f0:	91 1d       	adc	r25, r1
    12f2:	08 95       	ret

000012f4 <__muluhisi3>:
    12f4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__umulhisi3>
    12f8:	a5 9f       	mul	r26, r21
    12fa:	90 0d       	add	r25, r0
    12fc:	b4 9f       	mul	r27, r20
    12fe:	90 0d       	add	r25, r0
    1300:	a4 9f       	mul	r26, r20
    1302:	80 0d       	add	r24, r0
    1304:	91 1d       	adc	r25, r1
    1306:	11 24       	eor	r1, r1
    1308:	08 95       	ret

0000130a <_exit>:
    130a:	f8 94       	cli

0000130c <__stop_program>:
    130c:	ff cf       	rjmp	.-2      	; 0x130c <__stop_program>
