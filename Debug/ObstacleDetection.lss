
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000095a  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800084  00800084  00000a12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db3  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9d  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e15  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008eb  00000000  00000000  0000471c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000972  00000000  00000000  00005007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_9>
  28:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_10>
  2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 ab 04 	jmp	0x956	; 0x956 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	78 94       	sei
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b6:	04 b6       	in	r0, 0x34	; 52
  b8:	06 fe       	sbrs	r0, 6
  ba:	12 c0       	rjmp	.+36     	; 0xe0 <__vector_3+0x4e>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  cc:	84 b7       	in	r24, 0x34	; 52
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d2:	8a b7       	in	r24, 0x3a	; 58
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	1f c0       	rjmp	.+62     	; 0x11e <__vector_3+0x8c>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  e0:	04 b6       	in	r0, 0x34	; 52
  e2:	06 fc       	sbrc	r0, 6
  e4:	1c c0       	rjmp	.+56     	; 0x11e <__vector_3+0x8c>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ec:	64 e8       	ldi	r22, 0x84	; 132
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 16 01 	call	0x22c	; 0x22c <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	8f 7d       	andi	r24, 0xDF	; 223
 10a:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10c:	84 b7       	in	r24, 0x34	; 52
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 112:	8a b7       	in	r24, 0x3a	; 58
 114:	80 62       	ori	r24, 0x20	; 32
 116:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
#include "Test/Test.h"
#include "APP/CarSM/CarSM.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   TmuTest();
 140:	0e 94 37 03 	call	0x66e	; 0x66e <TmuTest>
   /*------------------- START CAR APPLICATION  ------------------------*/
   //Car_SM_Init();
   //Car_SM_Update();
   /*------------------- END CAR APPLICATION   ------------------------*/ 
    
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <Timer_Init>:
   }
   else
   {
      return E_NOK;
   }
}
 14a:	fc 01       	movw	r30, r24
 14c:	89 2b       	or	r24, r25
 14e:	71 f1       	breq	.+92     	; 0x1ac <Timer_Init+0x62>
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 05       	cpc	r25, r1
 158:	61 f0       	breq	.+24     	; 0x172 <Timer_Init+0x28>
 15a:	18 f0       	brcs	.+6      	; 0x162 <Timer_Init+0x18>
 15c:	02 97       	sbiw	r24, 0x02	; 2
 15e:	c1 f0       	breq	.+48     	; 0x190 <Timer_Init+0x46>
 160:	1e c0       	rjmp	.+60     	; 0x19e <Timer_Init+0x54>
 162:	93 b7       	in	r25, 0x33	; 51
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	89 2b       	or	r24, r25
 168:	83 bf       	out	0x33, r24	; 51
 16a:	86 81       	ldd	r24, Z+6	; 0x06
 16c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <gu8_t0Prescaler>
 170:	16 c0       	rjmp	.+44     	; 0x19e <Timer_Init+0x54>
 172:	2e b5       	in	r18, 0x2e	; 46
 174:	3f b5       	in	r19, 0x2f	; 47
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	93 81       	ldd	r25, Z+3	; 0x03
 17a:	82 2b       	or	r24, r18
 17c:	93 2b       	or	r25, r19
 17e:	9f bd       	out	0x2f, r25	; 47
 180:	8e bd       	out	0x2e, r24	; 46
 182:	86 81       	ldd	r24, Z+6	; 0x06
 184:	97 81       	ldd	r25, Z+7	; 0x07
 186:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <gu16_t1Prescaler+0x1>
 18a:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu16_t1Prescaler>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <Timer_Init+0x54>
 190:	95 b5       	in	r25, 0x25	; 37
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	89 2b       	or	r24, r25
 196:	85 bd       	out	0x25, r24	; 37
 198:	86 81       	ldd	r24, Z+6	; 0x06
 19a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <gu8_t2Prescaler>
 19e:	78 94       	sei
 1a0:	99 b7       	in	r25, 0x39	; 57
 1a2:	80 85       	ldd	r24, Z+8	; 0x08
 1a4:	89 2b       	or	r24, r25
 1a6:	89 bf       	out	0x39, r24	; 57
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret

000001b0 <Timer_Start>:
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	59 f0       	breq	.+22     	; 0x1ca <Timer_Start+0x1a>
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <Timer_Start+0xc>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <Timer_Start+0x30>
 1ba:	18 c0       	rjmp	.+48     	; 0x1ec <Timer_Start+0x3c>
 1bc:	62 bf       	out	0x32, r22	; 50
 1be:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <gu8_t0Prescaler>
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	89 2b       	or	r24, r25
 1c6:	83 bf       	out	0x33, r24	; 51
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <Timer_Start+0x3c>
 1ca:	77 27       	eor	r23, r23
 1cc:	7d bd       	out	0x2d, r23	; 45
 1ce:	6c bd       	out	0x2c, r22	; 44
 1d0:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu16_t1Prescaler>
 1d4:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <gu16_t1Prescaler+0x1>
 1d8:	9e b5       	in	r25, 0x2e	; 46
 1da:	89 2b       	or	r24, r25
 1dc:	8e bd       	out	0x2e, r24	; 46
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <Timer_Start+0x3c>
 1e0:	64 bd       	out	0x24, r22	; 36
 1e2:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <gu8_t2Prescaler>
 1e6:	85 b5       	in	r24, 0x25	; 37
 1e8:	89 2b       	or	r24, r25
 1ea:	85 bd       	out	0x25, r24	; 37
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <Timer_Stop>:
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	39 f0       	breq	.+14     	; 0x202 <Timer_Stop+0x12>
 1f4:	18 f0       	brcs	.+6      	; 0x1fc <Timer_Stop+0xc>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	39 f0       	breq	.+14     	; 0x208 <Timer_Stop+0x18>
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <Timer_Stop+0x1c>
 1fc:	83 b7       	in	r24, 0x33	; 51
 1fe:	13 be       	out	0x33, r1	; 51
 200:	05 c0       	rjmp	.+10     	; 0x20c <Timer_Stop+0x1c>
 202:	8e b5       	in	r24, 0x2e	; 46
 204:	1e bc       	out	0x2e, r1	; 46
 206:	02 c0       	rjmp	.+4      	; 0x20c <Timer_Stop+0x1c>
 208:	85 b5       	in	r24, 0x25	; 37
 20a:	15 bc       	out	0x25, r1	; 37
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <Timer_SetValue>:
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	31 f0       	breq	.+12     	; 0x220 <Timer_SetValue+0x10>
 214:	18 f0       	brcs	.+6      	; 0x21c <Timer_SetValue+0xc>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	31 f0       	breq	.+12     	; 0x226 <Timer_SetValue+0x16>
 21a:	06 c0       	rjmp	.+12     	; 0x228 <Timer_SetValue+0x18>
 21c:	62 bf       	out	0x32, r22	; 50
 21e:	04 c0       	rjmp	.+8      	; 0x228 <Timer_SetValue+0x18>
 220:	7d bd       	out	0x2d, r23	; 45
 222:	6c bd       	out	0x2c, r22	; 44
 224:	01 c0       	rjmp	.+2      	; 0x228 <Timer_SetValue+0x18>
 226:	64 bd       	out	0x24, r22	; 36
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <Timer_GetValue>:
 22c:	61 15       	cp	r22, r1
 22e:	71 05       	cpc	r23, r1
 230:	d9 f0       	breq	.+54     	; 0x268 <Timer_GetValue+0x3c>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	59 f0       	breq	.+22     	; 0x24c <Timer_GetValue+0x20>
 236:	18 f0       	brcs	.+6      	; 0x23e <Timer_GetValue+0x12>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	79 f0       	breq	.+30     	; 0x25a <Timer_GetValue+0x2e>
 23c:	17 c0       	rjmp	.+46     	; 0x26c <Timer_GetValue+0x40>
 23e:	82 b7       	in	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fb 01       	movw	r30, r22
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	8c b5       	in	r24, 0x2c	; 44
 24e:	9d b5       	in	r25, 0x2d	; 45
 250:	fb 01       	movw	r30, r22
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fb 01       	movw	r30, r22
 260:	91 83       	std	Z+1, r25	; 0x01
 262:	80 83       	st	Z, r24
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

00000270 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 270:	78 94       	sei
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 288:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gu32_overflowTimes>
 28c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <gu32_overflowTimes+0x1>
 290:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <gu32_overflowTimes+0x2>
 294:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <gu32_overflowTimes+0x3>
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	a1 1d       	adc	r26, r1
 29c:	b1 1d       	adc	r27, r1
 29e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu32_overflowTimes>
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <gu32_overflowTimes+0x1>
 2a6:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <gu32_overflowTimes+0x2>
 2aa:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 2b4:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <gu16_preloader>
 2b8:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	82 1b       	sub	r24, r18
 2c2:	93 0b       	sbc	r25, r19
 2c4:	82 bf       	out	0x32, r24	; 50
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
     
}
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_9>:

ISR_TIMER1_OVF(){
 2dc:	78 94       	sei
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++; 
 2f0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gu32_overflowTimes>
 2f4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <gu32_overflowTimes+0x1>
 2f8:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <gu32_overflowTimes+0x2>
 2fc:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <gu32_overflowTimes+0x3>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	a1 1d       	adc	r26, r1
 304:	b1 1d       	adc	r27, r1
 306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu32_overflowTimes>
 30a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <gu32_overflowTimes+0x1>
 30e:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <gu32_overflowTimes+0x2>
 312:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
 31c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu16_preloader>
 320:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu16_preloader+0x1>
 324:	91 95       	neg	r25
 326:	81 95       	neg	r24
 328:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 32a:	9d bd       	out	0x2d, r25	; 45
 32c:	8c bd       	out	0x2c, r24	; 44
   gu32_overflowTimes++; 
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
}
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_5>:

ISR_TIMER2_OVF(){
 340:	78 94       	sei
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 358:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gu32_overflowTimes>
 35c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <gu32_overflowTimes+0x1>
 360:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <gu32_overflowTimes+0x2>
 364:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <gu32_overflowTimes+0x3>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	a1 1d       	adc	r26, r1
 36c:	b1 1d       	adc	r27, r1
 36e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu32_overflowTimes>
 372:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <gu32_overflowTimes+0x1>
 376:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <gu32_overflowTimes+0x2>
 37a:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 384:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <gu16_preloader>
 388:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	82 1b       	sub	r24, r18
 392:	93 0b       	sbc	r25, r19
 394:	84 bd       	out	0x24, r24	; 36
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
     
}
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_10>:



ISR_TIMER0_COMP(){
 3ac:	78 94       	sei
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <TMU_Init>:
*  @param  const strTMU_Cfg_t *  strTMU_Init
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Init(const strTMU_Cfg_t * strTMU_Init)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strTMU_Init)
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	09 f4       	brne	.+2      	; 0x3cc <TMU_Init+0xa>
 3ca:	85 c0       	rjmp	.+266    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 3cc:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strTMU_Init->timer_channel)
 3ce:	88 81       	ld	r24, Y
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	79 f1       	breq	.+94     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3d4:	20 f0       	brcs	.+8      	; 0x3de <TMU_Init+0x1c>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	09 f4       	brne	.+2      	; 0x3dc <TMU_Init+0x1a>
 3da:	54 c0       	rjmp	.+168    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 3dc:	7e c0       	rjmp	.+252    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
      {
         case TIMER_0:
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0TmuConfig);
 3de:	84 e7       	ldi	r24, 0x74	; 116
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
 3e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gstrTimer0TmuConfig+0x6>
 3ea:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gstrTimer0TmuConfig+0x7>
 3ee:	05 97       	sbiw	r24, 0x05	; 5
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <TMU_Init+0x32>
 3f2:	75 c0       	rjmp	.+234    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
               break;
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 3f4:	69 81       	ldd	r22, Y+1	; 0x01
 3f6:	7a 81       	ldd	r23, Y+2	; 0x02
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	4a e7       	ldi	r20, 0x7A	; 122
 406:	51 e4       	ldi	r21, 0x41	; 65
 408:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 40c:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 410:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <gu16_preloader+0x1>
 414:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <gu16_preloader>
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
 418:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu16_preloader>
 41c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu16_preloader+0x1>
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	71 e0       	ldi	r23, 0x01	; 1
 424:	68 1b       	sub	r22, r24
 426:	79 0b       	sbc	r23, r25
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 42e:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
               break;               
 430:	5b c0       	rjmp	.+182    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
            }            
         break;
         case TIMER_1:
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1TmuConfig);
 432:	8a e6       	ldi	r24, 0x6A	; 106
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
 43a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gstrTimer1TmuConfig+0x6>
 43e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gstrTimer1TmuConfig+0x7>
 442:	05 97       	sbiw	r24, 0x05	; 5
 444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	4d c0       	rjmp	.+154    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
               break;
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 448:	69 81       	ldd	r22, Y+1	; 0x01
 44a:	7a 81       	ldd	r23, Y+2	; 0x02
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	4a e7       	ldi	r20, 0x7A	; 122
 45a:	51 e4       	ldi	r21, 0x41	; 65
 45c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 460:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 464:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <gu16_preloader+0x1>
 468:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <gu16_preloader>
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
 46c:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <gu16_preloader>
 470:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <gu16_preloader+0x1>
 474:	71 95       	neg	r23
 476:	61 95       	neg	r22
 478:	71 09       	sbc	r23, r1
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 480:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
               break;
 482:	32 c0       	rjmp	.+100    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
            }
         break;
         case TIMER_2:
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2TmuConfig);
 484:	80 e6       	ldi	r24, 0x60	; 96
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
 48c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 490:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 494:	07 97       	sbiw	r24, 0x07	; 7
 496:	39 f5       	brne	.+78     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
               break;
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 498:	69 81       	ldd	r22, Y+1	; 0x01
 49a:	7a 81       	ldd	r23, Y+2	; 0x02
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	4a e7       	ldi	r20, 0x7A	; 122
 4aa:	51 e4       	ldi	r21, 0x41	; 65
 4ac:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 4b0:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 4b4:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <gu16_preloader+0x1>
 4b8:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <gu16_preloader>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
 4bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu16_preloader>
 4c0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu16_preloader+0x1>
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	71 e0       	ldi	r23, 0x01	; 1
 4c8:	68 1b       	sub	r22, r24
 4ca:	79 0b       	sbc	r23, r25
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 4d2:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
            }
         break;
      }
      au8_errorState = INIT_OK;      
   }else{
      au8_errorState = INIT_NOK;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <TMU_Dispatch>:
*  @param void
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Dispatch(void)
{
 4ee:	8f 92       	push	r8
 4f0:	9f 92       	push	r9
 4f2:	af 92       	push	r10
 4f4:	bf 92       	push	r11
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
    /* Define Error state */
   uint8_t au8_errorState;   
   /* Check if the buffer not empty */
   if((0 <= gindex) && (1 == gu8_excuteFlag))
 506:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 50a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 50e:	99 23       	and	r25, r25
 510:	0c f4       	brge	.+2      	; 0x514 <TMU_Dispatch+0x26>
 512:	57 c0       	rjmp	.+174    	; 0x5c2 <TMU_Dispatch+0xd4>
 514:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <gu8_excuteFlag>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	09 f0       	breq	.+2      	; 0x51e <TMU_Dispatch+0x30>
 51c:	52 c0       	rjmp	.+164    	; 0x5c2 <TMU_Dispatch+0xd4>
   {
      sint16_t au16_iter = 0;
      uint32_t au32_overFlowTimes = gu32_overflowTimes;
 51e:	80 90 88 00 	lds	r8, 0x0088	; 0x800088 <gu32_overflowTimes>
 522:	90 90 89 00 	lds	r9, 0x0089	; 0x800089 <gu32_overflowTimes+0x1>
 526:	a0 90 8a 00 	lds	r10, 0x008A	; 0x80008a <gu32_overflowTimes+0x2>
 52a:	b0 90 8b 00 	lds	r11, 0x008B	; 0x80008b <gu32_overflowTimes+0x3>
      /* 1 - pull down execute flag */
      gu8_excuteFlag = 0;
 52e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <gu8_excuteFlag>
 532:	c2 e9       	ldi	r28, 0x92	; 146
 534:	d0 e0       	ldi	r29, 0x00	; 0
 536:	00 e0       	ldi	r16, 0x00	; 0
 538:	10 e0       	ldi	r17, 0x00	; 0
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
               {
                  /* Decrement gindex*/
                  gindex = -1;
 53a:	cc 24       	eor	r12, r12
 53c:	ca 94       	dec	r12
 53e:	dc 2c       	mov	r13, r12
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
      {
         /* Check if task counter is a multiple of over flow timer to determine whether to execute task's function or not */
         if((0 == (au32_overFlowTimes % garrTaskTMUBuffer[au16_iter].counter)) && (0 != au32_overFlowTimes))
 540:	2a 81       	ldd	r18, Y+2	; 0x02
 542:	3b 81       	ldd	r19, Y+3	; 0x03
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	c5 01       	movw	r24, r10
 54a:	b4 01       	movw	r22, r8
 54c:	0e 94 89 04 	call	0x912	; 0x912 <__udivmodsi4>
 550:	67 2b       	or	r22, r23
 552:	68 2b       	or	r22, r24
 554:	69 2b       	or	r22, r25
 556:	51 f5       	brne	.+84     	; 0x5ac <TMU_Dispatch+0xbe>
 558:	81 14       	cp	r8, r1
 55a:	91 04       	cpc	r9, r1
 55c:	a1 04       	cpc	r10, r1
 55e:	b1 04       	cpc	r11, r1
 560:	29 f1       	breq	.+74     	; 0x5ac <TMU_Dispatch+0xbe>
         {            
            /* 2 - Execute Task Function */
            garrTaskTMUBuffer[au16_iter].fn();                      
 562:	e8 81       	ld	r30, Y
 564:	f9 81       	ldd	r31, Y+1	; 0x01
 566:	09 95       	icall
            /* 3 - See Whether the task is periodic or one shoot -after its execution- */
            if(ONESHOOT == garrTaskTMUBuffer[au16_iter].work_mode)
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	f9 f4       	brne	.+62     	; 0x5ac <TMU_Dispatch+0xbe>
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
 56e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 572:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	29 f4       	brne	.+10     	; 0x584 <TMU_Dispatch+0x96>
               {
                  /* Decrement gindex*/
                  gindex = -1;
 57a:	d0 92 7f 00 	sts	0x007F, r13	; 0x80007f <gindex+0x1>
 57e:	c0 92 7e 00 	sts	0x007E, r12	; 0x80007e <gindex>
 582:	14 c0       	rjmp	.+40     	; 0x5ac <TMU_Dispatch+0xbe>
               }                
               else
               {
                  /* remove the Task : by replacing it with the last task in the buffer */
                  garrTaskTMUBuffer[au16_iter] = garrTaskTMUBuffer[gindex];
 584:	fc 01       	movw	r30, r24
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	ee 0f       	add	r30, r30
 58c:	ff 1f       	adc	r31, r31
 58e:	e8 0f       	add	r30, r24
 590:	f9 1f       	adc	r31, r25
 592:	ee 56       	subi	r30, 0x6E	; 110
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	25 e0       	ldi	r18, 0x05	; 5
 598:	de 01       	movw	r26, r28
 59a:	01 90       	ld	r0, Z+
 59c:	0d 92       	st	X+, r0
 59e:	2a 95       	dec	r18
 5a0:	e1 f7       	brne	.-8      	; 0x59a <TMU_Dispatch+0xac>
                  /* Decrement gindex */
                  gindex--;                  
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 5a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
      uint32_t au32_overFlowTimes = gu32_overflowTimes;
      /* 1 - pull down execute flag */
      gu8_excuteFlag = 0;
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
 5ac:	0f 5f       	subi	r16, 0xFF	; 255
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
 5b0:	25 96       	adiw	r28, 0x05	; 5
 5b2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 5b6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 5ba:	80 17       	cp	r24, r16
 5bc:	91 07       	cpc	r25, r17
 5be:	0c f0       	brlt	.+2      	; 0x5c2 <TMU_Dispatch+0xd4>
 5c0:	bf cf       	rjmp	.-130    	; 0x540 <TMU_Dispatch+0x52>
   {
      /* return error code array is empty */;
      au8_errorState = BUFFER_EMPTY;      
   }
   return au8_errorState;  
}
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	df 90       	pop	r13
 5d2:	cf 90       	pop	r12
 5d4:	bf 90       	pop	r11
 5d6:	af 90       	pop	r10
 5d8:	9f 90       	pop	r9
 5da:	8f 90       	pop	r8
 5dc:	08 95       	ret

000005de <TMU_Start_Timer>:
   */
   /*--- End Debug Point ---*/
   /* Define Error state */
   uint8_t au8_errorState;
   
   if(NULL != task_fn)
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
 5e2:	29 f1       	breq	.+74     	; 0x62e <TMU_Start_Timer+0x50>
   {
      /*---- Enable Interrupt ----*/
      /*---- Add Task to TMU Buffer while buffer is not full ----*/
      if(TMU_BUFFER_SIZE > gindex)
 5e4:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gindex>
 5e8:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <gindex+0x1>
 5ec:	3a 97       	sbiw	r30, 0x0a	; 10
 5ee:	0c f5       	brge	.+66     	; 0x632 <TMU_Start_Timer+0x54>
      {
         /* Create a new task */
         strTask_t *austr_Task = NULL;
         austr_Task->fn = task_fn;
 5f0:	e0 e0       	ldi	r30, 0x00	; 0
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	71 83       	std	Z+1, r23	; 0x01
 5f6:	60 83       	st	Z, r22
         austr_Task->counter = duration;
 5f8:	93 83       	std	Z+3, r25	; 0x03
 5fa:	82 83       	std	Z+2, r24	; 0x02
         austr_Task->work_mode = work_mode;
 5fc:	44 83       	std	Z+4, r20	; 0x04
         /* Increment gindex : to point to the next empty location to store the new task */
         gindex++;         
 5fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 602:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 60c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
 610:	dc 01       	movw	r26, r24
 612:	aa 0f       	add	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	aa 0f       	add	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	a8 0f       	add	r26, r24
 61c:	b9 1f       	adc	r27, r25
 61e:	ae 56       	subi	r26, 0x6E	; 110
 620:	bf 4f       	sbci	r27, 0xFF	; 255
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	8a 95       	dec	r24
 62a:	e1 f7       	brne	.-8      	; 0x624 <TMU_Start_Timer+0x46>
 62c:	03 c0       	rjmp	.+6      	; 0x634 <TMU_Start_Timer+0x56>
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
 62e:	25 e0       	ldi	r18, 0x05	; 5
 630:	01 c0       	rjmp	.+2      	; 0x634 <TMU_Start_Timer+0x56>
         gindex++;         
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
 632:	23 e0       	ldi	r18, 0x03	; 3
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
   }  
   return au8_errorState;
}
 634:	82 2f       	mov	r24, r18
 636:	08 95       	ret

00000638 <taskA>:
#include "../SL/TMU/TMU_PB_Cfg.h"
/*- FUNCTION DEFINITIONS ------------------------------------------------------------------------------------------------*/

void taskA(void)
{
   PORTB_DIR = 0xff;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0x10;   
 63c:	98 b3       	in	r25, 0x18	; 24
 63e:	80 e1       	ldi	r24, 0x10	; 16
 640:	89 27       	eor	r24, r25
 642:	88 bb       	out	0x18, r24	; 24
 644:	08 95       	ret

00000646 <taskB>:
}

void taskB(void)
{
   PORTB_DIR = 0xff;
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0x20;
 64a:	98 b3       	in	r25, 0x18	; 24
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	89 27       	eor	r24, r25
 650:	88 bb       	out	0x18, r24	; 24
 652:	08 95       	ret

00000654 <taskC>:
}

void taskC(void)
{
   PORTB_DIR = 0xff;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0x40;
 658:	98 b3       	in	r25, 0x18	; 24
 65a:	80 e4       	ldi	r24, 0x40	; 64
 65c:	89 27       	eor	r24, r25
 65e:	88 bb       	out	0x18, r24	; 24
 660:	08 95       	ret

00000662 <taskD>:
}

void taskD(void)
{
   PORTB_DIR = 0xff;
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0x80;
 666:	88 b3       	in	r24, 0x18	; 24
 668:	80 58       	subi	r24, 0x80	; 128
 66a:	88 bb       	out	0x18, r24	; 24
 66c:	08 95       	ret

0000066e <TmuTest>:
*
*  @return void
*/
void TmuTest(void)
{
   TMU_Init(&gstrTMUConfig);   
 66e:	80 e8       	ldi	r24, 0x80	; 128
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <TMU_Init>
   TMU_Start_Timer(3,taskA,PERIODIC);   
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	6c e1       	ldi	r22, 0x1C	; 28
 67a:	73 e0       	ldi	r23, 0x03	; 3
 67c:	83 e0       	ldi	r24, 0x03	; 3
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 ef 02 	call	0x5de	; 0x5de <TMU_Start_Timer>
   TMU_Start_Timer(20,taskB,PERIODIC);
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	63 e2       	ldi	r22, 0x23	; 35
 688:	73 e0       	ldi	r23, 0x03	; 3
 68a:	84 e1       	ldi	r24, 0x14	; 20
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 ef 02 	call	0x5de	; 0x5de <TMU_Start_Timer>
   TMU_Start_Timer(50,taskC,PERIODIC);
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	6a e2       	ldi	r22, 0x2A	; 42
 696:	73 e0       	ldi	r23, 0x03	; 3
 698:	82 e3       	ldi	r24, 0x32	; 50
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 ef 02 	call	0x5de	; 0x5de <TMU_Start_Timer>
   TMU_Start_Timer(60,taskD,PERIODIC);  
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	61 e3       	ldi	r22, 0x31	; 49
 6a4:	73 e0       	ldi	r23, 0x03	; 3
 6a6:	8c e3       	ldi	r24, 0x3C	; 60
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 ef 02 	call	0x5de	; 0x5de <TMU_Start_Timer>
   Timer_Start(TIMER_1,0);   
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer_Start>
   while(1)
   {      
      TMU_Dispatch();          
 6b8:	0e 94 77 02 	call	0x4ee	; 0x4ee <TMU_Dispatch>
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <TmuTest+0x4a>

000006be <__fixunssfsi>:
 6be:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_splitA>
 6c2:	88 f0       	brcs	.+34     	; 0x6e6 <__fixunssfsi+0x28>
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	98 f0       	brcs	.+38     	; 0x6ee <__fixunssfsi+0x30>
 6c8:	b9 2f       	mov	r27, r25
 6ca:	99 27       	eor	r25, r25
 6cc:	b7 51       	subi	r27, 0x17	; 23
 6ce:	b0 f0       	brcs	.+44     	; 0x6fc <__fixunssfsi+0x3e>
 6d0:	e1 f0       	breq	.+56     	; 0x70a <__fixunssfsi+0x4c>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a f0       	brmi	.+6      	; 0x6e2 <__fixunssfsi+0x24>
 6dc:	ba 95       	dec	r27
 6de:	c9 f7       	brne	.-14     	; 0x6d2 <__fixunssfsi+0x14>
 6e0:	14 c0       	rjmp	.+40     	; 0x70a <__fixunssfsi+0x4c>
 6e2:	b1 30       	cpi	r27, 0x01	; 1
 6e4:	91 f0       	breq	.+36     	; 0x70a <__fixunssfsi+0x4c>
 6e6:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_zero>
 6ea:	b1 e0       	ldi	r27, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_zero>
 6f2:	67 2f       	mov	r22, r23
 6f4:	78 2f       	mov	r23, r24
 6f6:	88 27       	eor	r24, r24
 6f8:	b8 5f       	subi	r27, 0xF8	; 248
 6fa:	39 f0       	breq	.+14     	; 0x70a <__fixunssfsi+0x4c>
 6fc:	b9 3f       	cpi	r27, 0xF9	; 249
 6fe:	cc f3       	brlt	.-14     	; 0x6f2 <__fixunssfsi+0x34>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b3 95       	inc	r27
 708:	d9 f7       	brne	.-10     	; 0x700 <__fixunssfsi+0x42>
 70a:	3e f4       	brtc	.+14     	; 0x71a <__fixunssfsi+0x5c>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__floatunsisf>:
 71c:	e8 94       	clt
 71e:	09 c0       	rjmp	.+18     	; 0x732 <__floatsisf+0x12>

00000720 <__floatsisf>:
 720:	97 fb       	bst	r25, 7
 722:	3e f4       	brtc	.+14     	; 0x732 <__floatsisf+0x12>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	99 23       	and	r25, r25
 734:	a9 f0       	breq	.+42     	; 0x760 <__floatsisf+0x40>
 736:	f9 2f       	mov	r31, r25
 738:	96 e9       	ldi	r25, 0x96	; 150
 73a:	bb 27       	eor	r27, r27
 73c:	93 95       	inc	r25
 73e:	f6 95       	lsr	r31
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f1 11       	cpse	r31, r1
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <__floatsisf+0x1c>
 74c:	fa f4       	brpl	.+62     	; 0x78c <__floatsisf+0x6c>
 74e:	bb 0f       	add	r27, r27
 750:	11 f4       	brne	.+4      	; 0x756 <__floatsisf+0x36>
 752:	60 ff       	sbrs	r22, 0
 754:	1b c0       	rjmp	.+54     	; 0x78c <__floatsisf+0x6c>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	16 c0       	rjmp	.+44     	; 0x78c <__floatsisf+0x6c>
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <__floatsisf+0x48>
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	11 c0       	rjmp	.+34     	; 0x78a <__floatsisf+0x6a>
 768:	77 23       	and	r23, r23
 76a:	21 f0       	breq	.+8      	; 0x774 <__floatsisf+0x54>
 76c:	9e e8       	ldi	r25, 0x8E	; 142
 76e:	87 2f       	mov	r24, r23
 770:	76 2f       	mov	r23, r22
 772:	05 c0       	rjmp	.+10     	; 0x77e <__floatsisf+0x5e>
 774:	66 23       	and	r22, r22
 776:	71 f0       	breq	.+28     	; 0x794 <__floatsisf+0x74>
 778:	96 e8       	ldi	r25, 0x86	; 134
 77a:	86 2f       	mov	r24, r22
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	2a f0       	brmi	.+10     	; 0x78c <__floatsisf+0x6c>
 782:	9a 95       	dec	r25
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	da f7       	brpl	.-10     	; 0x782 <__floatsisf+0x62>
 78c:	88 0f       	add	r24, r24
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__fp_split3>:
 796:	57 fd       	sbrc	r21, 7
 798:	90 58       	subi	r25, 0x80	; 128
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	59 f0       	breq	.+22     	; 0x7b6 <__fp_splitA+0x10>
 7a0:	5f 3f       	cpi	r21, 0xFF	; 255
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__fp_splitA+0x1a>
 7a4:	47 95       	ror	r20

000007a6 <__fp_splitA>:
 7a6:	88 0f       	add	r24, r24
 7a8:	97 fb       	bst	r25, 7
 7aa:	99 1f       	adc	r25, r25
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <__fp_splitA+0x20>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <__fp_splitA+0x2a>
 7b2:	87 95       	ror	r24
 7b4:	08 95       	ret
 7b6:	12 16       	cp	r1, r18
 7b8:	13 06       	cpc	r1, r19
 7ba:	14 06       	cpc	r1, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	f2 cf       	rjmp	.-28     	; 0x7a4 <__fp_split3+0xe>
 7c0:	46 95       	lsr	r20
 7c2:	f1 df       	rcall	.-30     	; 0x7a6 <__fp_splitA>
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <__fp_splitA+0x30>
 7c6:	16 16       	cp	r1, r22
 7c8:	17 06       	cpc	r1, r23
 7ca:	18 06       	cpc	r1, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	f1 cf       	rjmp	.-30     	; 0x7b2 <__fp_splitA+0xc>
 7d0:	86 95       	lsr	r24
 7d2:	71 05       	cpc	r23, r1
 7d4:	61 05       	cpc	r22, r1
 7d6:	08 94       	sec
 7d8:	08 95       	ret

000007da <__fp_zero>:
 7da:	e8 94       	clt

000007dc <__fp_szero>:
 7dc:	bb 27       	eor	r27, r27
 7de:	66 27       	eor	r22, r22
 7e0:	77 27       	eor	r23, r23
 7e2:	cb 01       	movw	r24, r22
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__mulsf3>:
 7e8:	0e 94 07 04 	call	0x80e	; 0x80e <__mulsf3x>
 7ec:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_round>
 7f0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_pscA>
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__mulsf3+0x1c>
 7f6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_pscB>
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__mulsf3+0x1c>
 7fc:	95 23       	and	r25, r21
 7fe:	11 f0       	breq	.+4      	; 0x804 <__mulsf3+0x1c>
 800:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 804:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_nan>
 808:	11 24       	eor	r1, r1
 80a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>

0000080e <__mulsf3x>:
 80e:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_split3>
 812:	70 f3       	brcs	.-36     	; 0x7f0 <__mulsf3+0x8>

00000814 <__mulsf3_pse>:
 814:	95 9f       	mul	r25, r21
 816:	c1 f3       	breq	.-16     	; 0x808 <__mulsf3+0x20>
 818:	95 0f       	add	r25, r21
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	55 1f       	adc	r21, r21
 81e:	62 9f       	mul	r22, r18
 820:	f0 01       	movw	r30, r0
 822:	72 9f       	mul	r23, r18
 824:	bb 27       	eor	r27, r27
 826:	f0 0d       	add	r31, r0
 828:	b1 1d       	adc	r27, r1
 82a:	63 9f       	mul	r22, r19
 82c:	aa 27       	eor	r26, r26
 82e:	f0 0d       	add	r31, r0
 830:	b1 1d       	adc	r27, r1
 832:	aa 1f       	adc	r26, r26
 834:	64 9f       	mul	r22, r20
 836:	66 27       	eor	r22, r22
 838:	b0 0d       	add	r27, r0
 83a:	a1 1d       	adc	r26, r1
 83c:	66 1f       	adc	r22, r22
 83e:	82 9f       	mul	r24, r18
 840:	22 27       	eor	r18, r18
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	62 1f       	adc	r22, r18
 848:	73 9f       	mul	r23, r19
 84a:	b0 0d       	add	r27, r0
 84c:	a1 1d       	adc	r26, r1
 84e:	62 1f       	adc	r22, r18
 850:	83 9f       	mul	r24, r19
 852:	a0 0d       	add	r26, r0
 854:	61 1d       	adc	r22, r1
 856:	22 1f       	adc	r18, r18
 858:	74 9f       	mul	r23, r20
 85a:	33 27       	eor	r19, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	23 1f       	adc	r18, r19
 862:	84 9f       	mul	r24, r20
 864:	60 0d       	add	r22, r0
 866:	21 1d       	adc	r18, r1
 868:	82 2f       	mov	r24, r18
 86a:	76 2f       	mov	r23, r22
 86c:	6a 2f       	mov	r22, r26
 86e:	11 24       	eor	r1, r1
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	50 40       	sbci	r21, 0x00	; 0
 874:	9a f0       	brmi	.+38     	; 0x89c <__stack+0x3d>
 876:	f1 f0       	breq	.+60     	; 0x8b4 <__stack+0x55>
 878:	88 23       	and	r24, r24
 87a:	4a f0       	brmi	.+18     	; 0x88e <__stack+0x2f>
 87c:	ee 0f       	add	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	bb 1f       	adc	r27, r27
 882:	66 1f       	adc	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	a9 f7       	brne	.-22     	; 0x878 <__stack+0x19>
 88e:	9e 3f       	cpi	r25, 0xFE	; 254
 890:	51 05       	cpc	r21, r1
 892:	80 f0       	brcs	.+32     	; 0x8b4 <__stack+0x55>
 894:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 898:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	e4 f3       	brlt	.-8      	; 0x898 <__stack+0x39>
 8a0:	98 3e       	cpi	r25, 0xE8	; 232
 8a2:	d4 f3       	brlt	.-12     	; 0x898 <__stack+0x39>
 8a4:	86 95       	lsr	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b7 95       	ror	r27
 8ac:	f7 95       	ror	r31
 8ae:	e7 95       	ror	r30
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	c1 f7       	brne	.-16     	; 0x8a4 <__stack+0x45>
 8b4:	fe 2b       	or	r31, r30
 8b6:	88 0f       	add	r24, r24
 8b8:	91 1d       	adc	r25, r1
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__fp_inf>:
 8c2:	97 f9       	bld	r25, 7
 8c4:	9f 67       	ori	r25, 0x7F	; 127
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	08 95       	ret

000008ce <__fp_nan>:
 8ce:	9f ef       	ldi	r25, 0xFF	; 255
 8d0:	80 ec       	ldi	r24, 0xC0	; 192
 8d2:	08 95       	ret

000008d4 <__fp_pscA>:
 8d4:	00 24       	eor	r0, r0
 8d6:	0a 94       	dec	r0
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	09 06       	cpc	r0, r25
 8e0:	08 95       	ret

000008e2 <__fp_pscB>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	14 06       	cpc	r1, r20
 8ec:	05 06       	cpc	r0, r21
 8ee:	08 95       	ret

000008f0 <__fp_round>:
 8f0:	09 2e       	mov	r0, r25
 8f2:	03 94       	inc	r0
 8f4:	00 0c       	add	r0, r0
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__fp_round+0xc>
 8f8:	88 23       	and	r24, r24
 8fa:	52 f0       	brmi	.+20     	; 0x910 <__fp_round+0x20>
 8fc:	bb 0f       	add	r27, r27
 8fe:	40 f4       	brcc	.+16     	; 0x910 <__fp_round+0x20>
 900:	bf 2b       	or	r27, r31
 902:	11 f4       	brne	.+4      	; 0x908 <__fp_round+0x18>
 904:	60 ff       	sbrs	r22, 0
 906:	04 c0       	rjmp	.+8      	; 0x910 <__fp_round+0x20>
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__udivmodsi4>:
 912:	a1 e2       	ldi	r26, 0x21	; 33
 914:	1a 2e       	mov	r1, r26
 916:	aa 1b       	sub	r26, r26
 918:	bb 1b       	sub	r27, r27
 91a:	fd 01       	movw	r30, r26
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__udivmodsi4_ep>

0000091e <__udivmodsi4_loop>:
 91e:	aa 1f       	adc	r26, r26
 920:	bb 1f       	adc	r27, r27
 922:	ee 1f       	adc	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	a2 17       	cp	r26, r18
 928:	b3 07       	cpc	r27, r19
 92a:	e4 07       	cpc	r30, r20
 92c:	f5 07       	cpc	r31, r21
 92e:	20 f0       	brcs	.+8      	; 0x938 <__udivmodsi4_ep>
 930:	a2 1b       	sub	r26, r18
 932:	b3 0b       	sbc	r27, r19
 934:	e4 0b       	sbc	r30, r20
 936:	f5 0b       	sbc	r31, r21

00000938 <__udivmodsi4_ep>:
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	1a 94       	dec	r1
 942:	69 f7       	brne	.-38     	; 0x91e <__udivmodsi4_loop>
 944:	60 95       	com	r22
 946:	70 95       	com	r23
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	9b 01       	movw	r18, r22
 94e:	ac 01       	movw	r20, r24
 950:	bd 01       	movw	r22, r26
 952:	cf 01       	movw	r24, r30
 954:	08 95       	ret

00000956 <_exit>:
 956:	f8 94       	cli

00000958 <__stop_program>:
 958:	ff cf       	rjmp	.-2      	; 0x958 <__stop_program>
