
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000075c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000075c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  00800080  00800080  00000810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a42  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a6  00000000  00000000  00003576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001319  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001258  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134d  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00008515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_9>
  28:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_10>
  2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_11>
  30:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_12>
  34:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 31       	cpi	r26, 0x10	; 16
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 00 01 	call	0x200	; 0x200 <main>
  8a:	0c 94 ac 03 	jmp	0x758	; 0x758 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_TxCallBack>:
          {
             /* Check Status again and see if BCM has finished or not */
             BCM_GetTxState(&au8_BCM_txState);
          }
          /* if BCM sending is done : Receive the new Usart new chunk */
          gu8_chunkReceiveState = USART_CHUNK_IDLE;
  92:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu8_txUsartByteCount>
  96:	84 36       	cpi	r24, 0x64	; 100
  98:	19 f4       	brne	.+6      	; 0xa0 <UART_TxCallBack+0xe>
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__data_end>
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	98 0f       	add	r25, r24
  a4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <gu8_txUsartByteCount>
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	8e 57       	subi	r24, 0x7E	; 126
  ac:	9f 4f       	sbci	r25, 0xFF	; 255
  ae:	0e 94 8a 02 	call	0x514	; 0x514 <UsartWriteTx>
  b2:	08 95       	ret

000000b4 <BCM_Receive>:
 * @param void
 *
 * @return void
 */
 void BCM_Receive(void)
 {
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
    uint8_t au8_BCM_rxState = 0;
  be:	19 82       	std	Y+1, r1	; 0x01
    /*------ 1 - BCM INIT ---------*/
    /* Initialize BCM -Receive- */
    BCM_Init(&gstr_BCM_Receive_Init);
  c0:	80 e7       	ldi	r24, 0x70	; 112
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 57 03 	call	0x6ae	; 0x6ae <BCM_Init>
    /* Setup Your Buffer/chunk size and address */
    BCM_SetupRxBuffer(ga_txUsartChunk,CHUNK_SIZE);
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	82 e8       	ldi	r24, 0x82	; 130
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 48 03 	call	0x690	; 0x690 <BCM_SetupRxBuffer>
    /* ------  (USART INIT) -------- */
    /* Usart setup call back */
    USART_SetTxCallBack(UART_TxCallBack);
  d4:	89 e4       	ldi	r24, 0x49	; 73
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 97 02 	call	0x52e	; 0x52e <USART_SetTxCallBack>
    /* Initialize UART : to transmit the chunk of data */
    Usart_Init(&usart_init_config_transmit);
  dc:	82 e7       	ldi	r24, 0x72	; 114
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Usart_Init>
    UCSRB = 0x48;        /* ---> Forcing UCSRB configuration for Debugging purpose */
  e4:	88 e4       	ldi	r24, 0x48	; 72
  e6:	8a b9       	out	0x0a, r24	; 10
    /* Initiate Usart chunk Transmitting state */
    gu8_chunkTransmitState =  USART_CHUNK_IDLE;
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
    /* Initiate BCM Receive process */
    BCM_Read();
  ee:	0e 94 87 03 	call	0x70e	; 0x70e <BCM_Read>
          {
             BCM_RxDispatcher();
             BCM_GetRxState(&au8_BCM_rxState);
          }
          /* Initiate Usart chunk Transmit */
          gu8_chunkTransmitState = USART_CHUNK_TRANSMITTING;
  f2:	14 e0       	ldi	r17, 0x04	; 4
    /* Initiate BCM Receive process */
    BCM_Read();
    while(1)
    {
       /*get BCM Rx state */
       BCM_GetRxState(&au8_BCM_rxState);
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	0e 94 3e 03 	call	0x67c	; 0x67c <BCM_GetRxState>
       switch(au8_BCM_rxState)
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	19 f0       	breq	.+6      	; 0x108 <BCM_Receive+0x54>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	69 f0       	breq	.+26     	; 0x120 <BCM_Receive+0x6c>
 106:	f6 cf       	rjmp	.-20     	; 0xf4 <BCM_Receive+0x40>
          break;
          case RECIEVING_BYTES:
          /* Wait until receiving - from BCM transmitter - is complete */
          while(RECIEVING_BYTES == au8_BCM_rxState)
          {
             BCM_RxDispatcher();
 108:	0e 94 93 03 	call	0x726	; 0x726 <BCM_RxDispatcher>
             BCM_GetRxState(&au8_BCM_rxState);
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 3e 03 	call	0x67c	; 0x67c <BCM_GetRxState>
          case IDLE:
          /* Initiate BCM read Again and Move to RECEUVUNG_BYTE State to start again*/
          break;
          case RECIEVING_BYTES:
          /* Wait until receiving - from BCM transmitter - is complete */
          while(RECIEVING_BYTES == au8_BCM_rxState)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	b9 f3       	breq	.-18     	; 0x108 <BCM_Receive+0x54>
          {
             BCM_RxDispatcher();
             BCM_GetRxState(&au8_BCM_rxState);
          }
          /* Initiate Usart chunk Transmit */
          gu8_chunkTransmitState = USART_CHUNK_TRANSMITTING;
 11a:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__data_end>
          break;
 11e:	ea cf       	rjmp	.-44     	; 0xf4 <BCM_Receive+0x40>
          case RECIEVING_COMPLETE:
          switch(gu8_chunkTransmitState)
 120:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 f0       	breq	.+36     	; 0x14c <BCM_Receive+0x98>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	21 f7       	brne	.-56     	; 0xf4 <BCM_Receive+0x40>
          {
             case USART_CHUNK_TRANSMITTING:
             /* Trigger transmit process through writing the first byte */
             UsartWriteTx(&ga_txUsartChunk[gu8_txUsartByteCount++]);
 12c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu8_txUsartByteCount>
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	98 0f       	add	r25, r24
 134:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <gu8_txUsartByteCount>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	8e 57       	subi	r24, 0x7E	; 126
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	0e 94 8a 02 	call	0x514	; 0x514 <UsartWriteTx>
             /* Wait Until chunk transmitting is complete */
             while (USART_CHUNK_TRANSMITTING == gu8_chunkTransmitState);
 142:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	f1 f3       	breq	.-4      	; 0x146 <BCM_Receive+0x92>
 14a:	d4 cf       	rjmp	.-88     	; 0xf4 <BCM_Receive+0x40>
             break;
             case USART_CHUNK_TRANSMIT_COMPLETE:
             /* reset counter */
             gu8_txUsartByteCount = 0;
 14c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gu8_txUsartByteCount>
             /* Move BCM rx state system to idle */
             au8_BCM_rxState = IDLE;
 150:	19 82       	std	Y+1, r1	; 0x01
             break;             
 152:	d0 cf       	rjmp	.-96     	; 0xf4 <BCM_Receive+0x40>

00000154 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
 176:	04 b6       	in	r0, 0x34	; 52
 178:	06 fe       	sbrs	r0, 6
 17a:	12 c0       	rjmp	.+36     	; 0x1a0 <__vector_3+0x4c>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 67 01 	call	0x2ce	; 0x2ce <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
 186:	8b b7       	in	r24, 0x3b	; 59
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
 18c:	84 b7       	in	r24, 0x34	; 52
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
 192:	8a b7       	in	r24, 0x3a	; 58
 194:	80 62       	ori	r24, 0x20	; 32
 196:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
 198:	8b b7       	in	r24, 0x3b	; 59
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	8b bf       	out	0x3b, r24	; 59
 19e:	1f c0       	rjmp	.+62     	; 0x1de <__vector_3+0x8a>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
 1a0:	04 b6       	in	r0, 0x34	; 52
 1a2:	06 fc       	sbrc	r0, 6
 1a4:	1c c0       	rjmp	.+56     	; 0x1de <__vector_3+0x8a>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 87 01 	call	0x30e	; 0x30e <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
 1ac:	66 ee       	ldi	r22, 0xE6	; 230
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 a5 01 	call	0x34a	; 0x34a <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 97 01 	call	0x32e	; 0x32e <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 1c6:	8b b7       	in	r24, 0x3b	; 59
 1c8:	8f 7d       	andi	r24, 0xDF	; 223
 1ca:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 1cc:	84 b7       	in	r24, 0x34	; 52
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 1d2:	8a b7       	in	r24, 0x3a	; 58
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 1d8:	8b b7       	in	r24, 0x3b	; 59
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:
   
   
   
   /*--------------------- Start BCM test -----------------------------*/
   //BCM_Transmit();  /* Burn its hex on master */
   BCM_Receive();   /* Burn its hex on slave */
 200:	0e 94 5a 00 	call	0xb4	; 0xb4 <BCM_Receive>
   /*--------------------- End BCM test -------------------------------*/
   
   
       
}
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret

0000020a <SPI_Init>:
   {
      /* Report transmission fail */
      au8_errorState = SPI_TRANSMISSION_FAIL;      
   }
   return au8_errorState;
}
 20a:	fc 01       	movw	r30, r24
 20c:	89 2b       	or	r24, r25
 20e:	e1 f0       	breq	.+56     	; 0x248 <SPI_Init+0x3e>
 210:	81 81       	ldd	r24, Z+1	; 0x01
 212:	88 23       	and	r24, r24
 214:	09 f0       	breq	.+2      	; 0x218 <SPI_Init+0xe>
 216:	78 94       	sei
 218:	9e b1       	in	r25, 0x0e	; 14
 21a:	86 81       	ldd	r24, Z+6	; 0x06
 21c:	89 2b       	or	r24, r25
 21e:	8e b9       	out	0x0e, r24	; 14
 220:	9d b1       	in	r25, 0x0d	; 13
 222:	81 81       	ldd	r24, Z+1	; 0x01
 224:	89 2b       	or	r24, r25
 226:	90 81       	ld	r25, Z
 228:	89 2b       	or	r24, r25
 22a:	92 81       	ldd	r25, Z+2	; 0x02
 22c:	89 2b       	or	r24, r25
 22e:	93 81       	ldd	r25, Z+3	; 0x03
 230:	89 2b       	or	r24, r25
 232:	94 81       	ldd	r25, Z+4	; 0x04
 234:	89 2b       	or	r24, r25
 236:	95 81       	ldd	r25, Z+5	; 0x05
 238:	89 2b       	or	r24, r25
 23a:	8d b9       	out	0x0d, r24	; 13
 23c:	97 b3       	in	r25, 0x17	; 23
 23e:	87 81       	ldd	r24, Z+7	; 0x07
 240:	89 2b       	or	r24, r25
 242:	87 bb       	out	0x17, r24	; 23
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	08 95       	ret

0000024c <SPI_Enable>:
 24c:	6e 9a       	sbi	0x0d, 6	; 13
 24e:	08 95       	ret

00000250 <SPI_Disable>:
 250:	6e 98       	cbi	0x0d, 6	; 13
 252:	08 95       	ret

00000254 <SPI_WriteByte>:
 254:	8f b9       	out	0x0f, r24	; 15
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	08 95       	ret

0000025a <SPI_ReadByte>:
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	29 f0       	breq	.+10     	; 0x268 <SPI_ReadByte+0xe>
 25e:	2f b1       	in	r18, 0x0f	; 15
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <SPI_Set_ISR_CallBack>:
EnumSPIError_t SPI_Set_ISR_CallBack(void (*call_back_ISR)(void))
{
   /* Define error state */
   uint8_t au8_errorState = 0;
   /* Check pointer against NUll */
   if(NULL != call_back_ISR)
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	31 f0       	breq	.+12     	; 0x27c <SPI_Set_ISR_CallBack+0x10>
   {
      call_back = call_back_ISR;
 270:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <call_back+0x1>
 274:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <call_back>
      /* report success*/
      au8_errorState = SPI_CALL_BACK_SET_SUCCESS;
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	08 95       	ret
   }
   else
   {
      /* report fail */
      au8_errorState = SPI_CALL_BACK_SET_FAIL; 
 27c:	87 e0       	ldi	r24, 0x07	; 7
   }
   return au8_errorState;  
}
 27e:	08 95       	ret

00000280 <__vector_12>:


/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
   /* Raise transmission complete flag */
   //gu8_transmissionComplete = 1;
   /* Call call_back() */
   call_back();
 2a2:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <call_back>
 2a6:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <call_back+0x1>
 2aa:	09 95       	icall
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <Timer_Start>:
   }
   else
   {
      return E_NOK;
   }
}
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	59 f0       	breq	.+22     	; 0x2e8 <Timer_Start+0x1a>
 2d2:	18 f0       	brcs	.+6      	; 0x2da <Timer_Start+0xc>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	99 f0       	breq	.+38     	; 0x2fe <Timer_Start+0x30>
 2d8:	18 c0       	rjmp	.+48     	; 0x30a <Timer_Start+0x3c>
 2da:	62 bf       	out	0x32, r22	; 50
 2dc:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <gu8_t0Prescaler>
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	89 2b       	or	r24, r25
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	11 c0       	rjmp	.+34     	; 0x30a <Timer_Start+0x3c>
 2e8:	77 27       	eor	r23, r23
 2ea:	7d bd       	out	0x2d, r23	; 45
 2ec:	6c bd       	out	0x2c, r22	; 44
 2ee:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <gu16_t1Prescaler>
 2f2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <gu16_t1Prescaler+0x1>
 2f6:	9e b5       	in	r25, 0x2e	; 46
 2f8:	89 2b       	or	r24, r25
 2fa:	8e bd       	out	0x2e, r24	; 46
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <Timer_Start+0x3c>
 2fe:	64 bd       	out	0x24, r22	; 36
 300:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <gu8_t2Prescaler>
 304:	85 b5       	in	r24, 0x25	; 37
 306:	89 2b       	or	r24, r25
 308:	85 bd       	out	0x25, r24	; 37
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret

0000030e <Timer_Stop>:
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	39 f0       	breq	.+14     	; 0x320 <Timer_Stop+0x12>
 312:	18 f0       	brcs	.+6      	; 0x31a <Timer_Stop+0xc>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	39 f0       	breq	.+14     	; 0x326 <Timer_Stop+0x18>
 318:	08 c0       	rjmp	.+16     	; 0x32a <Timer_Stop+0x1c>
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	13 be       	out	0x33, r1	; 51
 31e:	05 c0       	rjmp	.+10     	; 0x32a <Timer_Stop+0x1c>
 320:	8e b5       	in	r24, 0x2e	; 46
 322:	1e bc       	out	0x2e, r1	; 46
 324:	02 c0       	rjmp	.+4      	; 0x32a <Timer_Stop+0x1c>
 326:	85 b5       	in	r24, 0x25	; 37
 328:	15 bc       	out	0x25, r1	; 37
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret

0000032e <Timer_SetValue>:
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	31 f0       	breq	.+12     	; 0x33e <Timer_SetValue+0x10>
 332:	18 f0       	brcs	.+6      	; 0x33a <Timer_SetValue+0xc>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	31 f0       	breq	.+12     	; 0x344 <Timer_SetValue+0x16>
 338:	06 c0       	rjmp	.+12     	; 0x346 <Timer_SetValue+0x18>
 33a:	62 bf       	out	0x32, r22	; 50
 33c:	04 c0       	rjmp	.+8      	; 0x346 <Timer_SetValue+0x18>
 33e:	7d bd       	out	0x2d, r23	; 45
 340:	6c bd       	out	0x2c, r22	; 44
 342:	01 c0       	rjmp	.+2      	; 0x346 <Timer_SetValue+0x18>
 344:	64 bd       	out	0x24, r22	; 36
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	08 95       	ret

0000034a <Timer_GetValue>:
 34a:	61 15       	cp	r22, r1
 34c:	71 05       	cpc	r23, r1
 34e:	d9 f0       	breq	.+54     	; 0x386 <Timer_GetValue+0x3c>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	59 f0       	breq	.+22     	; 0x36a <Timer_GetValue+0x20>
 354:	18 f0       	brcs	.+6      	; 0x35c <Timer_GetValue+0x12>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	79 f0       	breq	.+30     	; 0x378 <Timer_GetValue+0x2e>
 35a:	17 c0       	rjmp	.+46     	; 0x38a <Timer_GetValue+0x40>
 35c:	82 b7       	in	r24, 0x32	; 50
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fb 01       	movw	r30, r22
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret
 36a:	8c b5       	in	r24, 0x2c	; 44
 36c:	9d b5       	in	r25, 0x2d	; 45
 36e:	fb 01       	movw	r30, r22
 370:	91 83       	std	Z+1, r25	; 0x01
 372:	80 83       	st	Z, r24
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
 378:	84 b5       	in	r24, 0x24	; 36
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fb 01       	movw	r30, r22
 37e:	91 83       	std	Z+1, r25	; 0x01
 380:	80 83       	st	Z, r24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	08 95       	ret
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret

0000038e <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 3a4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gu32_overflowTimes>
 3a8:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <gu32_overflowTimes+0x1>
 3ac:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <gu32_overflowTimes+0x2>
 3b0:	b0 91 ef 00 	lds	r27, 0x00EF	; 0x8000ef <gu32_overflowTimes+0x3>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gu32_overflowTimes>
 3be:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <gu32_overflowTimes+0x1>
 3c2:	a0 93 ee 00 	sts	0x00EE, r26	; 0x8000ee <gu32_overflowTimes+0x2>
 3c6:	b0 93 ef 00 	sts	0x00EF, r27	; 0x8000ef <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 3d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <gu16_preloader>
 3d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	82 1b       	sub	r24, r18
 3de:	93 0b       	sbc	r25, r19
 3e0:	82 bf       	out	0x32, r24	; 50
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
     
}
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <__vector_9>:

ISR_TIMER1_OVF(){
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++; 
 40a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gu32_overflowTimes>
 40e:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <gu32_overflowTimes+0x1>
 412:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <gu32_overflowTimes+0x2>
 416:	b0 91 ef 00 	lds	r27, 0x00EF	; 0x8000ef <gu32_overflowTimes+0x3>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	a1 1d       	adc	r26, r1
 41e:	b1 1d       	adc	r27, r1
 420:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gu32_overflowTimes>
 424:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <gu32_overflowTimes+0x1>
 428:	a0 93 ee 00 	sts	0x00EE, r26	; 0x8000ee <gu32_overflowTimes+0x2>
 42c:	b0 93 ef 00 	sts	0x00EF, r27	; 0x8000ef <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
 436:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gu16_preloader>
 43a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gu16_preloader+0x1>
 43e:	91 95       	neg	r25
 440:	81 95       	neg	r24
 442:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 444:	9d bd       	out	0x2d, r25	; 45
 446:	8c bd       	out	0x2c, r24	; 44
   gu32_overflowTimes++; 
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
}
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_5>:

ISR_TIMER2_OVF(){
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 470:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gu32_overflowTimes>
 474:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <gu32_overflowTimes+0x1>
 478:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <gu32_overflowTimes+0x2>
 47c:	b0 91 ef 00 	lds	r27, 0x00EF	; 0x8000ef <gu32_overflowTimes+0x3>
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	a1 1d       	adc	r26, r1
 484:	b1 1d       	adc	r27, r1
 486:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gu32_overflowTimes>
 48a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <gu32_overflowTimes+0x1>
 48e:	a0 93 ee 00 	sts	0x00EE, r26	; 0x8000ee <gu32_overflowTimes+0x2>
 492:	b0 93 ef 00 	sts	0x00EF, r27	; 0x8000ef <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 49c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <gu16_preloader>
 4a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	82 1b       	sub	r24, r18
 4aa:	93 0b       	sbc	r25, r19
 4ac:	84 bd       	out	0x24, r24	; 36
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
     
}
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_10>:



ISR_TIMER0_COMP(){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <Usart_Init>:
   {
      /* report fail */
      au8_errorState = INVALID_USART_INPUT_PARAMS;
   }
   return au8_errorState;
}
 4d8:	fc 01       	movw	r30, r24
 4da:	89 2b       	or	r24, r25
 4dc:	c9 f0       	breq	.+50     	; 0x510 <Usart_Init+0x38>
 4de:	90 b5       	in	r25, 0x20	; 32
 4e0:	80 81       	ld	r24, Z
 4e2:	89 2b       	or	r24, r25
 4e4:	86 60       	ori	r24, 0x06	; 6
 4e6:	92 81       	ldd	r25, Z+2	; 0x02
 4e8:	89 2b       	or	r24, r25
 4ea:	93 81       	ldd	r25, Z+3	; 0x03
 4ec:	89 2b       	or	r24, r25
 4ee:	80 bd       	out	0x20, r24	; 32
 4f0:	8a b1       	in	r24, 0x0a	; 10
 4f2:	25 81       	ldd	r18, Z+5	; 0x05
 4f4:	28 7f       	andi	r18, 0xF8	; 248
 4f6:	94 81       	ldd	r25, Z+4	; 0x04
 4f8:	89 2b       	or	r24, r25
 4fa:	82 2b       	or	r24, r18
 4fc:	8a b9       	out	0x0a, r24	; 10
 4fe:	9b b1       	in	r25, 0x0b	; 11
 500:	86 81       	ldd	r24, Z+6	; 0x06
 502:	83 7e       	andi	r24, 0xE3	; 227
 504:	89 2b       	or	r24, r25
 506:	8b b9       	out	0x0b, r24	; 11
 508:	87 e6       	ldi	r24, 0x67	; 103
 50a:	89 b9       	out	0x09, r24	; 9
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret

00000514 <UsartWriteTx>:
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	39 f0       	breq	.+14     	; 0x526 <UsartWriteTx+0x12>
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	8c b9       	out	0x0c, r24	; 12
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <gu8_txNotification>
 524:	08 95       	ret
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <gu8_txNotification>
 52c:	08 95       	ret

0000052e <USART_SetTxCallBack>:
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	31 f0       	breq	.+12     	; 0x53e <USART_SetTxCallBack+0x10>
 532:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <tx_call_back+0x1>
 536:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <tx_call_back>
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	08 95       	ret
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret

00000542 <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
   /* on successful character reception : you can read the new character */  
   //gu8_RX_CompleteFlag = 1;
   rx_call_back();
 564:	e0 91 f5 00 	lds	r30, 0x00F5	; 0x8000f5 <rx_call_back>
 568:	f0 91 f6 00 	lds	r31, 0x00F6	; 0x8000f6 <rx_call_back+0x1>
 56c:	09 95       	icall
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_15>:
//{
   /* if data register is empty : you can write a new character. */            
//}

ISR_USART_TX()
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
   /* if data register is empty : you can write a new character. */
   //gu8_TX_CompleteFlag = 1;
   tx_call_back();     
 5b2:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <tx_call_back>
 5b6:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <tx_call_back+0x1>
 5ba:	09 95       	icall
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <BCM_SPI_RX_CallBack>:
   gu8_TxState = SENDING_BYTES;
   /* 3 - Start Communication protocol */
   switch (gu8_protocol)
   {
      case SPI:
         SPI_Enable();
 5de:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <gstr_rxBufferCfg+0x2>
 5e2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <gstr_rxBufferCfg+0x3>
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	31 09       	sbc	r19, r1
 5ea:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <gu16_rxByteCounter>
 5ee:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <gu16_rxByteCounter+0x1>
 5f2:	28 17       	cp	r18, r24
 5f4:	39 07       	cpc	r19, r25
 5f6:	61 f4       	brne	.+24     	; 0x610 <BCM_SPI_RX_CallBack+0x32>
 5f8:	86 e0       	ldi	r24, 0x06	; 6
 5fa:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <gu8_RxNotification>
 5fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gstr_rxBufferCfg>
 602:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <gstr_rxBufferCfg+0x1>
 606:	82 0f       	add	r24, r18
 608:	93 1f       	adc	r25, r19
 60a:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_ReadByte>
 60e:	08 95       	ret
 610:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <gstr_rxBufferCfg>
 614:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <gstr_rxBufferCfg+0x1>
 618:	82 0f       	add	r24, r18
 61a:	93 1f       	adc	r25, r19
 61c:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_ReadByte>
 620:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <gu16_rxByteCounter>
 624:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <gu16_rxByteCounter+0x1>
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <gu16_rxByteCounter+0x1>
 62e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <gu16_rxByteCounter>
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <gu8_RxNotification>
 638:	08 95       	ret

0000063a <BCM_SPI_TX_CallBack>:
 63a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <gu16_txByteCounter>
 63e:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <gu16_txByteCounter+0x1>
 642:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <gstr_txBufferCfg+0x2>
 646:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <gstr_txBufferCfg+0x3>
 64a:	28 17       	cp	r18, r24
 64c:	39 07       	cpc	r19, r25
 64e:	21 f4       	brne	.+8      	; 0x658 <BCM_SPI_TX_CallBack+0x1e>
 650:	84 e0       	ldi	r24, 0x04	; 4
 652:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <gu8_TxNotification>
 656:	08 95       	ret
 658:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <gu8_TxNotification>
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <gu16_txByteCounter+0x1>
 662:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <gu16_txByteCounter>
 666:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <gstr_txBufferCfg>
 66a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <gstr_txBufferCfg+0x1>
 66e:	f9 01       	movw	r30, r18
 670:	e8 0f       	add	r30, r24
 672:	f9 1f       	adc	r31, r25
 674:	80 81       	ld	r24, Z
 676:	0e 94 2a 01 	call	0x254	; 0x254 <SPI_WriteByte>
 67a:	08 95       	ret

0000067c <BCM_GetRxState>:
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	31 f0       	breq	.+12     	; 0x68c <BCM_GetRxState+0x10>
 680:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <gu8_RxState>
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
 688:	8b e0       	ldi	r24, 0x0B	; 11
 68a:	08 95       	ret
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <BCM_SetupRxBuffer>:
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	59 f0       	breq	.+22     	; 0x6aa <BCM_SetupRxBuffer+0x1a>
 694:	ea e0       	ldi	r30, 0x0A	; 10
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	91 83       	std	Z+1, r25	; 0x01
 69a:	80 83       	st	Z, r24
 69c:	73 83       	std	Z+3, r23	; 0x03
 69e:	62 83       	std	Z+2, r22	; 0x02
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	85 83       	std	Z+5, r24	; 0x05
 6a4:	14 82       	std	Z+4, r1	; 0x04
 6a6:	88 e0       	ldi	r24, 0x08	; 8
 6a8:	08 95       	ret
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret

000006ae <BCM_Init>:
 6ae:	00 97       	sbiw	r24, 0x00	; 0
 6b0:	61 f1       	breq	.+88     	; 0x70a <BCM_Init+0x5c>
 6b2:	fc 01       	movw	r30, r24
 6b4:	80 81       	ld	r24, Z
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	19 f0       	breq	.+6      	; 0x6c0 <BCM_Init+0x12>
 6ba:	82 30       	cpi	r24, 0x02	; 2
 6bc:	89 f0       	breq	.+34     	; 0x6e0 <BCM_Init+0x32>
 6be:	1f c0       	rjmp	.+62     	; 0x6fe <BCM_Init+0x50>
 6c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <gu8_TxState>
 6c4:	81 81       	ldd	r24, Z+1	; 0x01
 6c6:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <gu8_protocol>
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	c1 f4       	brne	.+48     	; 0x6fe <BCM_Init+0x50>
 6ce:	88 e6       	ldi	r24, 0x68	; 104
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 05 01 	call	0x20a	; 0x20a <SPI_Init>
 6d6:	8d e1       	ldi	r24, 0x1D	; 29
 6d8:	93 e0       	ldi	r25, 0x03	; 3
 6da:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_Set_ISR_CallBack>
 6de:	0f c0       	rjmp	.+30     	; 0x6fe <BCM_Init+0x50>
 6e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <gu8_RxState>
 6e4:	81 81       	ldd	r24, Z+1	; 0x01
 6e6:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <gu8_protocol>
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	41 f4       	brne	.+16     	; 0x6fe <BCM_Init+0x50>
 6ee:	80 e6       	ldi	r24, 0x60	; 96
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 05 01 	call	0x20a	; 0x20a <SPI_Init>
 6f6:	8f ee       	ldi	r24, 0xEF	; 239
 6f8:	92 e0       	ldi	r25, 0x02	; 2
 6fa:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_Set_ISR_CallBack>
 6fe:	89 e7       	ldi	r24, 0x79	; 121
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Usart_Init>
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	08 95       	ret

0000070e <BCM_Read>:
*  @return void
*/
void BCM_Read(void)
{
   /* 1 - Lock Rx buffer ahead of any further coming actions */   
   gstr_rxBufferCfg.buffer_state = BUFFER_LOCKED;
 70e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <gstr_rxBufferCfg+0x5>
   /* 2 - Triggers Rx state machines */
   gu8_RxState = RECIEVING_BYTES;
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gu8_RxState>
   /* 3 - Start Communication protocol */
   switch (gu8_protocol)
 718:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <gu8_protocol>
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	11 f4       	brne	.+4      	; 0x724 <BCM_Read+0x16>
   {
      case SPI:
         SPI_Enable();
 720:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_Enable>
 724:	08 95       	ret

00000726 <BCM_RxDispatcher>:
*  @return void
*/
void BCM_RxDispatcher(void)
{
   /* Switching on system states to take action */
   switch(gu8_RxState)
 726:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gu8_RxState>
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	a1 f4       	brne	.+40     	; 0x756 <BCM_RxDispatcher+0x30>
      break;
      case RECIEVING_BYTES:         
         /* 1 - wait for the notification fired by ISR -on successful transmission : which mean that you can read -*/
         if(RECIEVING_BYTES == gu8_RxState)
         {
            switch(gu8_RxNotification)
 72e:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <gu8_RxNotification>
 732:	86 30       	cpi	r24, 0x06	; 6
 734:	81 f4       	brne	.+32     	; 0x756 <BCM_RxDispatcher+0x30>
            {                                              
               case BCM_RECIEVE_COMPLETE:
                  /* 1 - Reset Received bytes counter */
                  gu16_rxByteCounter = 0;
 736:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <gu16_rxByteCounter+0x1>
 73a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <gu16_rxByteCounter>
                  /* 2 - Unlock RX Buffer */
                  gstr_rxBufferCfg.buffer_state = (uint8_t)BUFFER_UNLOCKED;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <gstr_rxBufferCfg+0x5>
                  /* 3 - Set RX state to IDLE */
                  gu8_RxState = RECIEVING_COMPLETE;
 744:	84 e0       	ldi	r24, 0x04	; 4
 746:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gu8_RxState>
                  /* 4 - Initialize Rx Buffer Address to NUll*/
                  //gstr_rxBufferCfg.bufferAddress = NULL;
                  /*disable spi or I2c*/
                  /* 5 - Stop Communication protocol */
                  switch (gu8_protocol)
 74a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <gu8_protocol>
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	11 f4       	brne	.+4      	; 0x756 <BCM_RxDispatcher+0x30>
                  {
                     case SPI:
                        SPI_Disable();
 752:	0e 94 28 01 	call	0x250	; 0x250 <SPI_Disable>
 756:	08 95       	ret

00000758 <_exit>:
 758:	f8 94       	cli

0000075a <__stop_program>:
 75a:	ff cf       	rjmp	.-2      	; 0x75a <__stop_program>
