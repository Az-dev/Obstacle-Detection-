
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164f  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2a  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  00002761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bed  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0d  00000000  00000000  0000419d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_9>
  28:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_10>
  2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_11>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_12>
  34:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b4:	04 b6       	in	r0, 0x34	; 52
  b6:	06 fe       	sbrs	r0, 6
  b8:	12 c0       	rjmp	.+36     	; 0xde <__vector_3+0x4c>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 b1 00 	call	0x162	; 0x162 <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  ca:	84 b7       	in	r24, 0x34	; 52
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d0:	8a b7       	in	r24, 0x3a	; 58
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	1f c0       	rjmp	.+62     	; 0x11c <__vector_3+0x8a>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  de:	04 b6       	in	r0, 0x34	; 52
  e0:	06 fc       	sbrc	r0, 6
  e2:	1c c0       	rjmp	.+56     	; 0x11c <__vector_3+0x8a>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ea:	60 e6       	ldi	r22, 0x60	; 96
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 ef 00 	call	0x1de	; 0x1de <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10a:	84 b7       	in	r24, 0x34	; 52
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 110:	8a b7       	in	r24, 0x3a	; 58
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:
   
   /*---------------------- Start UART test ---------------------------*/   
   //myUsartFullDuplexInterruptTest(); // ----> test passed for both transmission and reciption
   /*---------------------- End UART Test -----------------------------*/ 
    
}
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret

00000144 <__vector_12>:
   return au8_errorState;
}

/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
   /* Raise transmission complete flag */
   gu8_transmissionComplete = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gu8_transmissionComplete>
}
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <Timer_Start>:
   }
   else
   {
      return E_NOK;
   }
}
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	59 f0       	breq	.+22     	; 0x17c <Timer_Start+0x1a>
 166:	18 f0       	brcs	.+6      	; 0x16e <Timer_Start+0xc>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	99 f0       	breq	.+38     	; 0x192 <Timer_Start+0x30>
 16c:	18 c0       	rjmp	.+48     	; 0x19e <Timer_Start+0x3c>
 16e:	62 bf       	out	0x32, r22	; 50
 170:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <gu8_t0Prescaler>
 174:	83 b7       	in	r24, 0x33	; 51
 176:	89 2b       	or	r24, r25
 178:	83 bf       	out	0x33, r24	; 51
 17a:	11 c0       	rjmp	.+34     	; 0x19e <Timer_Start+0x3c>
 17c:	77 27       	eor	r23, r23
 17e:	7d bd       	out	0x2d, r23	; 45
 180:	6c bd       	out	0x2c, r22	; 44
 182:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu16_t1Prescaler>
 186:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <gu16_t1Prescaler+0x1>
 18a:	9e b5       	in	r25, 0x2e	; 46
 18c:	89 2b       	or	r24, r25
 18e:	8e bd       	out	0x2e, r24	; 46
 190:	06 c0       	rjmp	.+12     	; 0x19e <Timer_Start+0x3c>
 192:	64 bd       	out	0x24, r22	; 36
 194:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <gu8_t2Prescaler>
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	89 2b       	or	r24, r25
 19c:	85 bd       	out	0x25, r24	; 37
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <Timer_Stop>:
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	39 f0       	breq	.+14     	; 0x1b4 <Timer_Stop+0x12>
 1a6:	18 f0       	brcs	.+6      	; 0x1ae <Timer_Stop+0xc>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	39 f0       	breq	.+14     	; 0x1ba <Timer_Stop+0x18>
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <Timer_Stop+0x1c>
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	13 be       	out	0x33, r1	; 51
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <Timer_Stop+0x1c>
 1b4:	8e b5       	in	r24, 0x2e	; 46
 1b6:	1e bc       	out	0x2e, r1	; 46
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Timer_Stop+0x1c>
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	15 bc       	out	0x25, r1	; 37
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <Timer_SetValue>:
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <Timer_SetValue+0x10>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <Timer_SetValue+0xc>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <Timer_SetValue+0x16>
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <Timer_SetValue+0x18>
 1ce:	62 bf       	out	0x32, r22	; 50
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <Timer_SetValue+0x18>
 1d2:	7d bd       	out	0x2d, r23	; 45
 1d4:	6c bd       	out	0x2c, r22	; 44
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <Timer_SetValue+0x18>
 1d8:	64 bd       	out	0x24, r22	; 36
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

000001de <Timer_GetValue>:
 1de:	61 15       	cp	r22, r1
 1e0:	71 05       	cpc	r23, r1
 1e2:	d9 f0       	breq	.+54     	; 0x21a <Timer_GetValue+0x3c>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	59 f0       	breq	.+22     	; 0x1fe <Timer_GetValue+0x20>
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <Timer_GetValue+0x12>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	79 f0       	breq	.+30     	; 0x20c <Timer_GetValue+0x2e>
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <Timer_GetValue+0x40>
 1f0:	82 b7       	in	r24, 0x32	; 50
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fb 01       	movw	r30, r22
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	8c b5       	in	r24, 0x2c	; 44
 200:	9d b5       	in	r25, 0x2d	; 45
 202:	fb 01       	movw	r30, r22
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
 20c:	84 b5       	in	r24, 0x24	; 36
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fb 01       	movw	r30, r22
 212:	91 83       	std	Z+1, r25	; 0x01
 214:	80 83       	st	Z, r24
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret

00000222 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 238:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu32_overflowTimes>
 23c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <gu32_overflowTimes+0x1>
 240:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <gu32_overflowTimes+0x2>
 244:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <gu32_overflowTimes+0x3>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	a1 1d       	adc	r26, r1
 24c:	b1 1d       	adc	r27, r1
 24e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu32_overflowTimes>
 252:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu32_overflowTimes+0x1>
 256:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <gu32_overflowTimes+0x2>
 25a:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 264:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <gu16_preloader>
 268:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	82 1b       	sub	r24, r18
 272:	93 0b       	sbc	r25, r19
 274:	82 bf       	out	0x32, r24	; 50
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
     
}
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_9>:

ISR_TIMER1_OVF(){
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++; 
 29e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu32_overflowTimes>
 2a2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <gu32_overflowTimes+0x1>
 2a6:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <gu32_overflowTimes+0x2>
 2aa:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <gu32_overflowTimes+0x3>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	a1 1d       	adc	r26, r1
 2b2:	b1 1d       	adc	r27, r1
 2b4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu32_overflowTimes>
 2b8:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu32_overflowTimes+0x1>
 2bc:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <gu32_overflowTimes+0x2>
 2c0:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
 2ca:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gu16_preloader>
 2ce:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gu16_preloader+0x1>
 2d2:	91 95       	neg	r25
 2d4:	81 95       	neg	r24
 2d6:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 2d8:	9d bd       	out	0x2d, r25	; 45
 2da:	8c bd       	out	0x2c, r24	; 44
   gu32_overflowTimes++; 
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
}
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_5>:

ISR_TIMER2_OVF(){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 304:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu32_overflowTimes>
 308:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <gu32_overflowTimes+0x1>
 30c:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <gu32_overflowTimes+0x2>
 310:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <gu32_overflowTimes+0x3>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	a1 1d       	adc	r26, r1
 318:	b1 1d       	adc	r27, r1
 31a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu32_overflowTimes>
 31e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu32_overflowTimes+0x1>
 322:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <gu32_overflowTimes+0x2>
 326:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 330:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <gu16_preloader>
 334:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	82 1b       	sub	r24, r18
 33e:	93 0b       	sbc	r25, r19
 340:	84 bd       	out	0x24, r24	; 36
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
     
}
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_10>:



ISR_TIMER0_COMP(){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
   /* on successful character reception : you can read the new character */  
   gu8_RX_CompleteFlag = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_RX_CompleteFlag>
}
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
