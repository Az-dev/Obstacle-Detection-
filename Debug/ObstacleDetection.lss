
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000a4e  00000ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800084  00800084  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a87  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e90  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133a  00000000  00000000  00004723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  00005a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fce  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ed  00000000  00000000  000070ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000081bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_9>
  28:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_10>
  2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_12>
  34:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8a:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b4:	04 b6       	in	r0, 0x34	; 52
  b6:	06 fe       	sbrs	r0, 6
  b8:	12 c0       	rjmp	.+36     	; 0xde <__vector_3+0x4c>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  ca:	84 b7       	in	r24, 0x34	; 52
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d0:	8a b7       	in	r24, 0x3a	; 58
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	1f c0       	rjmp	.+62     	; 0x11c <__vector_3+0x8a>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  de:	04 b6       	in	r0, 0x34	; 52
  e0:	06 fc       	sbrc	r0, 6
  e2:	1c c0       	rjmp	.+56     	; 0x11c <__vector_3+0x8a>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 49 01 	call	0x292	; 0x292 <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ea:	64 e8       	ldi	r22, 0x84	; 132
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10a:	84 b7       	in	r24, 0x34	; 52
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 110:	8a b7       	in	r24, 0x3a	; 58
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:
#include "APP/BCM_BasedApp/BCM_Based.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   /*------------------- START TMU APPLICATION  ------------------------*/
   TmuTest();
 13e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <TmuTest>
   //BCM_Receive();   /* Burn its hex on slave */
   /*--------------------- End BCM test -------------------------------*/
   
   
       
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <__vector_12>:
}


/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
   /* Raise transmission complete flag */
   //gu8_transmissionComplete = 1;
   /* Call call_back() */
   call_back();
 16a:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <call_back>
 16e:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <call_back+0x1>
 172:	09 95       	icall
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <Timer_SetCallBack>:
   }
   else
   {
      return E_NOK;
   }
}
 196:	41 15       	cp	r20, r1
 198:	51 05       	cpc	r21, r1
 19a:	f1 f0       	breq	.+60     	; 0x1d8 <Timer_SetCallBack+0x42>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	61 f0       	breq	.+24     	; 0x1b8 <Timer_SetCallBack+0x22>
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <Timer_SetCallBack+0x12>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <Timer_SetCallBack+0x32>
 1a6:	1a c0       	rjmp	.+52     	; 0x1dc <Timer_SetCallBack+0x46>
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	d1 f4       	brne	.+52     	; 0x1e0 <Timer_SetCallBack+0x4a>
 1ac:	50 93 8e 00 	sts	0x008E, r21	; 0x80008e <TOV_T0_Call_Back+0x1>
 1b0:	40 93 8d 00 	sts	0x008D, r20	; 0x80008d <TOV_T0_Call_Back>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	a1 f4       	brne	.+40     	; 0x1e4 <Timer_SetCallBack+0x4e>
 1bc:	50 93 8c 00 	sts	0x008C, r21	; 0x80008c <TOV_T1_Call_Back+0x1>
 1c0:	40 93 8b 00 	sts	0x008B, r20	; 0x80008b <TOV_T1_Call_Back>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <Timer_SetCallBack+0x52>
 1cc:	50 93 8a 00 	sts	0x008A, r21	; 0x80008a <TOV_T2_Call_Back+0x1>
 1d0:	40 93 89 00 	sts	0x0089, r20	; 0x800089 <TOV_T2_Call_Back>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret

000001ec <Timer_Init>:
 1ec:	fc 01       	movw	r30, r24
 1ee:	89 2b       	or	r24, r25
 1f0:	71 f1       	breq	.+92     	; 0x24e <Timer_Init+0x62>
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	91 05       	cpc	r25, r1
 1fa:	61 f0       	breq	.+24     	; 0x214 <Timer_Init+0x28>
 1fc:	18 f0       	brcs	.+6      	; 0x204 <Timer_Init+0x18>
 1fe:	02 97       	sbiw	r24, 0x02	; 2
 200:	c1 f0       	breq	.+48     	; 0x232 <Timer_Init+0x46>
 202:	1e c0       	rjmp	.+60     	; 0x240 <Timer_Init+0x54>
 204:	93 b7       	in	r25, 0x33	; 51
 206:	82 81       	ldd	r24, Z+2	; 0x02
 208:	89 2b       	or	r24, r25
 20a:	83 bf       	out	0x33, r24	; 51
 20c:	86 81       	ldd	r24, Z+6	; 0x06
 20e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <gu8_t0Prescaler>
 212:	16 c0       	rjmp	.+44     	; 0x240 <Timer_Init+0x54>
 214:	2e b5       	in	r18, 0x2e	; 46
 216:	3f b5       	in	r19, 0x2f	; 47
 218:	82 81       	ldd	r24, Z+2	; 0x02
 21a:	93 81       	ldd	r25, Z+3	; 0x03
 21c:	82 2b       	or	r24, r18
 21e:	93 2b       	or	r25, r19
 220:	9f bd       	out	0x2f, r25	; 47
 222:	8e bd       	out	0x2e, r24	; 46
 224:	86 81       	ldd	r24, Z+6	; 0x06
 226:	97 81       	ldd	r25, Z+7	; 0x07
 228:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <gu16_t1Prescaler+0x1>
 22c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <gu16_t1Prescaler>
 230:	07 c0       	rjmp	.+14     	; 0x240 <Timer_Init+0x54>
 232:	95 b5       	in	r25, 0x25	; 37
 234:	82 81       	ldd	r24, Z+2	; 0x02
 236:	89 2b       	or	r24, r25
 238:	85 bd       	out	0x25, r24	; 37
 23a:	86 81       	ldd	r24, Z+6	; 0x06
 23c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <gu8_t2Prescaler>
 240:	78 94       	sei
 242:	99 b7       	in	r25, 0x39	; 57
 244:	80 85       	ldd	r24, Z+8	; 0x08
 246:	89 2b       	or	r24, r25
 248:	89 bf       	out	0x39, r24	; 57
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret

00000252 <Timer_Start>:
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	59 f0       	breq	.+22     	; 0x26c <Timer_Start+0x1a>
 256:	18 f0       	brcs	.+6      	; 0x25e <Timer_Start+0xc>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	99 f0       	breq	.+38     	; 0x282 <Timer_Start+0x30>
 25c:	18 c0       	rjmp	.+48     	; 0x28e <Timer_Start+0x3c>
 25e:	62 bf       	out	0x32, r22	; 50
 260:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <gu8_t0Prescaler>
 264:	83 b7       	in	r24, 0x33	; 51
 266:	89 2b       	or	r24, r25
 268:	83 bf       	out	0x33, r24	; 51
 26a:	11 c0       	rjmp	.+34     	; 0x28e <Timer_Start+0x3c>
 26c:	77 27       	eor	r23, r23
 26e:	7d bd       	out	0x2d, r23	; 45
 270:	6c bd       	out	0x2c, r22	; 44
 272:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu16_t1Prescaler>
 276:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu16_t1Prescaler+0x1>
 27a:	9e b5       	in	r25, 0x2e	; 46
 27c:	89 2b       	or	r24, r25
 27e:	8e bd       	out	0x2e, r24	; 46
 280:	06 c0       	rjmp	.+12     	; 0x28e <Timer_Start+0x3c>
 282:	64 bd       	out	0x24, r22	; 36
 284:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <gu8_t2Prescaler>
 288:	85 b5       	in	r24, 0x25	; 37
 28a:	89 2b       	or	r24, r25
 28c:	85 bd       	out	0x25, r24	; 37
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <Timer_Stop>:
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	39 f0       	breq	.+14     	; 0x2a4 <Timer_Stop+0x12>
 296:	18 f0       	brcs	.+6      	; 0x29e <Timer_Stop+0xc>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	39 f0       	breq	.+14     	; 0x2aa <Timer_Stop+0x18>
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <Timer_Stop+0x1c>
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	13 be       	out	0x33, r1	; 51
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <Timer_Stop+0x1c>
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	1e bc       	out	0x2e, r1	; 46
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Timer_Stop+0x1c>
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	15 bc       	out	0x25, r1	; 37
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret

000002b2 <Timer_SetValue>:
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <Timer_SetValue+0x10>
 2b6:	18 f0       	brcs	.+6      	; 0x2be <Timer_SetValue+0xc>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <Timer_SetValue+0x16>
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <Timer_SetValue+0x18>
 2be:	62 bf       	out	0x32, r22	; 50
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <Timer_SetValue+0x18>
 2c2:	7d bd       	out	0x2d, r23	; 45
 2c4:	6c bd       	out	0x2c, r22	; 44
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Timer_SetValue+0x18>
 2c8:	64 bd       	out	0x24, r22	; 36
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <Timer_GetValue>:
 2ce:	61 15       	cp	r22, r1
 2d0:	71 05       	cpc	r23, r1
 2d2:	d9 f0       	breq	.+54     	; 0x30a <Timer_GetValue+0x3c>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	59 f0       	breq	.+22     	; 0x2ee <Timer_GetValue+0x20>
 2d8:	18 f0       	brcs	.+6      	; 0x2e0 <Timer_GetValue+0x12>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	79 f0       	breq	.+30     	; 0x2fc <Timer_GetValue+0x2e>
 2de:	17 c0       	rjmp	.+46     	; 0x30e <Timer_GetValue+0x40>
 2e0:	82 b7       	in	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	fb 01       	movw	r30, r22
 2e6:	91 83       	std	Z+1, r25	; 0x01
 2e8:	80 83       	st	Z, r24
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
 2ee:	8c b5       	in	r24, 0x2c	; 44
 2f0:	9d b5       	in	r25, 0x2d	; 45
 2f2:	fb 01       	movw	r30, r22
 2f4:	91 83       	std	Z+1, r25	; 0x01
 2f6:	80 83       	st	Z, r24
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
 2fc:	84 b5       	in	r24, 0x24	; 36
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fb 01       	movw	r30, r22
 302:	91 83       	std	Z+1, r25	; 0x01
 304:	80 83       	st	Z, r24
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret

00000312 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){      
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
   TOV_T0_Call_Back();    
 334:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <TOV_T0_Call_Back>
 338:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <TOV_T0_Call_Back+0x1>
 33c:	09 95       	icall
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_9>:

ISR_TIMER1_OVF(){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
   TOV_T1_Call_Back();     
 382:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <TOV_T1_Call_Back>
 386:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <TOV_T1_Call_Back+0x1>
 38a:	09 95       	icall
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_5>:

ISR_TIMER2_OVF(){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
   TOV_T2_Call_Back();    
 3d0:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <TOV_T2_Call_Back>
 3d4:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <TOV_T2_Call_Back+0x1>
 3d8:	09 95       	icall
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_10>:



ISR_TIMER0_COMP(){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
   /* on successful character reception : you can read the new character */  
   //gu8_RX_CompleteFlag = 1;
   rx_call_back();
 432:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <rx_call_back>
 436:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <rx_call_back+0x1>
 43a:	09 95       	icall
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_15>:
//{
   /* if data register is empty : you can write a new character. */            
//}

ISR_USART_TX()
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
   /* if data register is empty : you can write a new character. */
   //gu8_TX_CompleteFlag = 1;
   tx_call_back();     
 480:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <tx_call_back>
 484:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <tx_call_back+0x1>
 488:	09 95       	icall
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <TMU_T2_OV_CallBack>:
*/
static void TMU_T2_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
 4b2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu16_preloader>
 4b6:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu16_preloader+0x1>
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	71 e0       	ldi	r23, 0x01	; 1
 4be:	68 1b       	sub	r22, r24
 4c0:	79 0b       	sbc	r23, r25
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 4c8:	08 95       	ret

000004ca <TMU_T1_OV_CallBack>:
*/
static void TMU_T1_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
 4d0:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu16_preloader>
 4d4:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <gu16_preloader+0x1>
 4d8:	71 95       	neg	r23
 4da:	61 95       	neg	r22
 4dc:	71 09       	sbc	r23, r1
 4de:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 4e2:	08 95       	ret

000004e4 <TMU_T0_OV_CallBack>:
*/
static void TMU_T0_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Rise execute flag or tick flag */
   gu8_tickFlag = 1;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/         
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));       
 4ea:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu16_preloader>
 4ee:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu16_preloader+0x1>
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	71 e0       	ldi	r23, 0x01	; 1
 4f6:	68 1b       	sub	r22, r24
 4f8:	79 0b       	sbc	r23, r25
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 500:	08 95       	ret

00000502 <TMU_Init>:
*  @param  const strTMU_Cfg_t *  strTMU_Init
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Init(const strTMU_Cfg_t * strTMU_Init)
{
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strTMU_Init)
 506:	00 97       	sbiw	r24, 0x00	; 0
 508:	09 f4       	brne	.+2      	; 0x50c <TMU_Init+0xa>
 50a:	95 c0       	rjmp	.+298    	; 0x636 <TMU_Init+0x134>
 50c:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strTMU_Init->timer_channel)
 50e:	88 81       	ld	r24, Y
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	a1 f1       	breq	.+104    	; 0x57c <TMU_Init+0x7a>
 514:	20 f0       	brcs	.+8      	; 0x51e <TMU_Init+0x1c>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f4       	brne	.+2      	; 0x51c <TMU_Init+0x1a>
 51a:	5e c0       	rjmp	.+188    	; 0x5d8 <TMU_Init+0xd6>
 51c:	8e c0       	rjmp	.+284    	; 0x63a <TMU_Init+0x138>
      {
         case TIMER_0:
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0TmuConfig);
 51e:	84 e7       	ldi	r24, 0x74	; 116
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
 526:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gstrTimer0TmuConfig+0x6>
 52a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gstrTimer0TmuConfig+0x7>
 52e:	05 97       	sbiw	r24, 0x05	; 5
 530:	e9 f4       	brne	.+58     	; 0x56c <TMU_Init+0x6a>
               break;
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 532:	69 81       	ldd	r22, Y+1	; 0x01
 534:	7a 81       	ldd	r23, Y+2	; 0x02
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 2a 04 	call	0x854	; 0x854 <__floatunsisf>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	4a e7       	ldi	r20, 0x7A	; 122
 544:	51 e4       	ldi	r21, 0x41	; 65
 546:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 54a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fixunssfsi>
 54e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gu16_preloader+0x1>
 552:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gu16_preloader>
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
 556:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu16_preloader>
 55a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu16_preloader+0x1>
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	68 1b       	sub	r22, r24
 564:	79 0b       	sbc	r23, r25
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
               break;               
            }
            /* Set timer0 call Back */            
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,TMU_T0_OV_CallBack);            
 56c:	42 e7       	ldi	r20, 0x72	; 114
 56e:	52 e0       	ldi	r21, 0x02	; 2
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,TMU_T2_OV_CallBack);
         break;
      }
      au8_errorState = INIT_OK;      
 578:	80 e0       	ldi	r24, 0x00	; 0
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
               break;               
            }
            /* Set timer0 call Back */            
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,TMU_T0_OV_CallBack);            
         break;
 57a:	60 c0       	rjmp	.+192    	; 0x63c <TMU_Init+0x13a>
         case TIMER_1:
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1TmuConfig);
 57c:	8a e6       	ldi	r24, 0x6A	; 106
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
 584:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gstrTimer1TmuConfig+0x6>
 588:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gstrTimer1TmuConfig+0x7>
 58c:	05 97       	sbiw	r24, 0x05	; 5
 58e:	e1 f4       	brne	.+56     	; 0x5c8 <TMU_Init+0xc6>
               break;
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 590:	69 81       	ldd	r22, Y+1	; 0x01
 592:	7a 81       	ldd	r23, Y+2	; 0x02
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 2a 04 	call	0x854	; 0x854 <__floatunsisf>
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	4a e7       	ldi	r20, 0x7A	; 122
 5a2:	51 e4       	ldi	r21, 0x41	; 65
 5a4:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 5a8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fixunssfsi>
 5ac:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gu16_preloader+0x1>
 5b0:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gu16_preloader>
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
 5b4:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu16_preloader>
 5b8:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <gu16_preloader+0x1>
 5bc:	71 95       	neg	r23
 5be:	61 95       	neg	r22
 5c0:	71 09       	sbc	r23, r1
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,TMU_T1_OV_CallBack);
 5c8:	45 e6       	ldi	r20, 0x65	; 101
 5ca:	52 e0       	ldi	r21, 0x02	; 2
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,TMU_T2_OV_CallBack);
         break;
      }
      au8_errorState = INIT_OK;      
 5d4:	80 e0       	ldi	r24, 0x00	; 0
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,TMU_T1_OV_CallBack);
         break;
 5d6:	32 c0       	rjmp	.+100    	; 0x63c <TMU_Init+0x13a>
         case TIMER_2:
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2TmuConfig);
 5d8:	80 e6       	ldi	r24, 0x60	; 96
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
 5e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_start+0x6>
 5e4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_start+0x7>
 5e8:	07 97       	sbiw	r24, 0x07	; 7
 5ea:	e9 f4       	brne	.+58     	; 0x626 <TMU_Init+0x124>
               break;
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 5ec:	69 81       	ldd	r22, Y+1	; 0x01
 5ee:	7a 81       	ldd	r23, Y+2	; 0x02
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 2a 04 	call	0x854	; 0x854 <__floatunsisf>
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	4a e7       	ldi	r20, 0x7A	; 122
 5fe:	51 e4       	ldi	r21, 0x41	; 65
 600:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 604:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fixunssfsi>
 608:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gu16_preloader+0x1>
 60c:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gu16_preloader>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
 610:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu16_preloader>
 614:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu16_preloader+0x1>
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	71 e0       	ldi	r23, 0x01	; 1
 61c:	68 1b       	sub	r22, r24
 61e:	79 0b       	sbc	r23, r25
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,TMU_T2_OV_CallBack);
 626:	46 e5       	ldi	r20, 0x56	; 86
 628:	52 e0       	ldi	r21, 0x02	; 2
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
         break;
      }
      au8_errorState = INIT_OK;      
 632:	80 e0       	ldi	r24, 0x00	; 0
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,TMU_T2_OV_CallBack);
         break;
 634:	03 c0       	rjmp	.+6      	; 0x63c <TMU_Init+0x13a>
      }
      au8_errorState = INIT_OK;      
   }else{
      au8_errorState = INIT_NOK;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	01 c0       	rjmp	.+2      	; 0x63c <TMU_Init+0x13a>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,TMU_T2_OV_CallBack);
         break;
      }
      au8_errorState = INIT_OK;      
 63a:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <TMU_Dispatch>:
*  @param void
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Dispatch(void)
{
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
    /* Define Error state */
   uint8_t au8_errorState;   
   /* Check if the buffer not empty */
   if((0 <= gindex) && (1 == gu8_tickFlag))
 652:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 656:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 65a:	99 23       	and	r25, r25
 65c:	0c f4       	brge	.+2      	; 0x660 <TMU_Dispatch+0x1e>
 65e:	4c c0       	rjmp	.+152    	; 0x6f8 <TMU_Dispatch+0xb6>
 660:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <gu8_tickFlag>
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	09 f0       	breq	.+2      	; 0x66a <TMU_Dispatch+0x28>
 668:	47 c0       	rjmp	.+142    	; 0x6f8 <TMU_Dispatch+0xb6>
   {
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
 66a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <gu8_tickFlag>
 66e:	ca e9       	ldi	r28, 0x9A	; 154
 670:	d0 e0       	ldi	r29, 0x00	; 0
 672:	00 e0       	ldi	r16, 0x00	; 0
 674:	10 e0       	ldi	r17, 0x00	; 0
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
               {
                  /* Decrement gindex*/
                  gindex = -1;
 676:	ee 24       	eor	r14, r14
 678:	ea 94       	dec	r14
 67a:	fe 2c       	mov	r15, r14
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
      {
         /* Increment task internal tick count */
         garrTaskTMUBuffer[au16_iter].tick_counts++;
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	9c 81       	ldd	r25, Y+4	; 0x04
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	9c 83       	std	Y+4, r25	; 0x04
 684:	8b 83       	std	Y+3, r24	; 0x03
         /* Check if task ticks count has reached to the required tick value -which is (task.counter)- to determine whether to execute task's function or not */
         if((garrTaskTMUBuffer[au16_iter].tick_counts) == (garrTaskTMUBuffer[au16_iter].counter))
 686:	28 81       	ld	r18, Y
 688:	39 81       	ldd	r19, Y+1	; 0x01
 68a:	82 17       	cp	r24, r18
 68c:	93 07       	cpc	r25, r19
 68e:	51 f5       	brne	.+84     	; 0x6e4 <TMU_Dispatch+0xa2>
         { 
            /* 2 - Reset task tick_counts*/ 
            garrTaskTMUBuffer[au16_iter].tick_counts = 0;          
 690:	1c 82       	std	Y+4, r1	; 0x04
 692:	1b 82       	std	Y+3, r1	; 0x03
            /* 3 - Execute Task Function */
            garrTaskTMUBuffer[au16_iter].fn();                      
 694:	ed 81       	ldd	r30, Y+5	; 0x05
 696:	fe 81       	ldd	r31, Y+6	; 0x06
 698:	09 95       	icall
            /* 4 - See Whether the task is periodic or one shoot -after its execution- */
            if(ONESHOOT == garrTaskTMUBuffer[au16_iter].work_mode)
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	11 f5       	brne	.+68     	; 0x6e4 <TMU_Dispatch+0xa2>
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
 6a0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 6a4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <TMU_Dispatch+0x74>
               {
                  /* Decrement gindex*/
                  gindex = -1;
 6ac:	f0 92 7f 00 	sts	0x007F, r15	; 0x80007f <gindex+0x1>
 6b0:	e0 92 7e 00 	sts	0x007E, r14	; 0x80007e <gindex>
 6b4:	17 c0       	rjmp	.+46     	; 0x6e4 <TMU_Dispatch+0xa2>
               }                
               else
               {
                  /* remove the Task : by replacing it with the last task in the buffer */
                  garrTaskTMUBuffer[au16_iter] = garrTaskTMUBuffer[gindex];
 6b6:	fc 01       	movw	r30, r24
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	e8 1b       	sub	r30, r24
 6c6:	f9 0b       	sbc	r31, r25
 6c8:	e6 56       	subi	r30, 0x66	; 102
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	27 e0       	ldi	r18, 0x07	; 7
 6ce:	ac 2f       	mov	r26, r28
 6d0:	bd 2f       	mov	r27, r29
 6d2:	01 90       	ld	r0, Z+
 6d4:	0d 92       	st	X+, r0
 6d6:	2a 95       	dec	r18
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <TMU_Dispatch+0x90>
                  /* Decrement gindex */
                  gindex--;                  
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 6e0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
 6e4:	0f 5f       	subi	r16, 0xFF	; 255
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	27 96       	adiw	r28, 0x07	; 7
 6ea:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 6ee:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 6f2:	80 17       	cp	r24, r16
 6f4:	91 07       	cpc	r25, r17
 6f6:	14 f6       	brge	.-124    	; 0x67c <TMU_Dispatch+0x3a>
   {
      /* return error code array is empty */;
      au8_errorState = BUFFER_EMPTY;      
   }
   return au8_errorState;  
}
 6f8:	84 e0       	ldi	r24, 0x04	; 4
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	08 95       	ret

0000070c <TMU_Start_Timer>:
   */
   /*--- End Debug Point ---*/
   /* Define Error state */
   uint8_t au8_errorState = 0;
   
   if(NULL != task_fn)
 70c:	61 15       	cp	r22, r1
 70e:	71 05       	cpc	r23, r1
 710:	59 f1       	breq	.+86     	; 0x768 <TMU_Start_Timer+0x5c>
   {
      /*---- Enable Interrupt ----*/
      /*---- Add Task to TMU Buffer while buffer is not full ----*/
      if(TMU_BUFFER_SIZE > gindex)
 712:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <gindex>
 716:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <gindex+0x1>
 71a:	2a 30       	cpi	r18, 0x0A	; 10
 71c:	31 05       	cpc	r19, r1
 71e:	34 f5       	brge	.+76     	; 0x76c <TMU_Start_Timer+0x60>
      {
         /* Create a new task */
         strTask_t *austr_Task = NULL;
         austr_Task->fn = task_fn;
 720:	e0 e0       	ldi	r30, 0x00	; 0
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	76 83       	std	Z+6, r23	; 0x06
 726:	65 83       	std	Z+5, r22	; 0x05
         austr_Task->counter = duration;
 728:	91 83       	std	Z+1, r25	; 0x01
 72a:	80 83       	st	Z, r24
         austr_Task->work_mode = work_mode;
 72c:	42 83       	std	Z+2, r20	; 0x02
         austr_Task->tick_counts = 0;
 72e:	14 82       	std	Z+4, r1	; 0x04
 730:	13 82       	std	Z+3, r1	; 0x03
         /* Increment gindex : to point to the next empty location to store the new task */
         gindex++;         
 732:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 736:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 740:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
 744:	dc 01       	movw	r26, r24
 746:	aa 0f       	add	r26, r26
 748:	bb 1f       	adc	r27, r27
 74a:	aa 0f       	add	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	aa 0f       	add	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	a8 1b       	sub	r26, r24
 754:	b9 0b       	sbc	r27, r25
 756:	a6 56       	subi	r26, 0x66	; 102
 758:	bf 4f       	sbci	r27, 0xFF	; 255
 75a:	87 e0       	ldi	r24, 0x07	; 7
 75c:	01 90       	ld	r0, Z+
 75e:	0d 92       	st	X+, r0
 760:	8a 95       	dec	r24
 762:	e1 f7       	brne	.-8      	; 0x75c <TMU_Start_Timer+0x50>
   garrTaskTMUBuffer[0] = *austr_Task;
   return 0;
   */
   /*--- End Debug Point ---*/
   /* Define Error state */
   uint8_t au8_errorState = 0;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
 768:	85 e0       	ldi	r24, 0x05	; 5
 76a:	08 95       	ret
         gindex++;         
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
 76c:	83 e0       	ldi	r24, 0x03	; 3
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
   }  
   return au8_errorState;
}
 76e:	08 95       	ret

00000770 <taskA>:
{
   /* Idle mode */
   MCUCR &= ~(1<<5) & ~(1<<6) & ~(1<<4);
   /* Sleep enable */
   MCUCR |= (1<<7);
   __asm__ __volatile__("sleep" "\n\t" ::);
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	8a bb       	out	0x1a, r24	; 26
 774:	9b b3       	in	r25, 0x1b	; 27
 776:	80 e1       	ldi	r24, 0x10	; 16
 778:	89 27       	eor	r24, r25
 77a:	8b bb       	out	0x1b, r24	; 27
 77c:	08 95       	ret

0000077e <taskB>:
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	8a bb       	out	0x1a, r24	; 26
 782:	9b b3       	in	r25, 0x1b	; 27
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	89 27       	eor	r24, r25
 788:	8b bb       	out	0x1b, r24	; 27
 78a:	08 95       	ret

0000078c <taskC>:
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	8a bb       	out	0x1a, r24	; 26
 790:	9b b3       	in	r25, 0x1b	; 27
 792:	80 e4       	ldi	r24, 0x40	; 64
 794:	89 27       	eor	r24, r25
 796:	8b bb       	out	0x1b, r24	; 27
 798:	08 95       	ret

0000079a <taskD>:
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	8a bb       	out	0x1a, r24	; 26
 79e:	8b b3       	in	r24, 0x1b	; 27
 7a0:	80 58       	subi	r24, 0x80	; 128
 7a2:	8b bb       	out	0x1b, r24	; 27
 7a4:	08 95       	ret

000007a6 <TmuTest>:
*  @return void
*/
void TmuTest(void)
{
   //PORTA_DIR = 0xff;
   TMU_Init(&gstrTMUConfig);
 7a6:	80 e8       	ldi	r24, 0x80	; 128
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 81 02 	call	0x502	; 0x502 <TMU_Init>
   TMU_Start_Timer(5,taskA,PERIODIC);
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	68 eb       	ldi	r22, 0xB8	; 184
 7b2:	73 e0       	ldi	r23, 0x03	; 3
 7b4:	85 e0       	ldi	r24, 0x05	; 5
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 86 03 	call	0x70c	; 0x70c <TMU_Start_Timer>
   TMU_Start_Timer(10,taskB,PERIODIC);
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	6f eb       	ldi	r22, 0xBF	; 191
 7c0:	73 e0       	ldi	r23, 0x03	; 3
 7c2:	8a e0       	ldi	r24, 0x0A	; 10
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 86 03 	call	0x70c	; 0x70c <TMU_Start_Timer>
   TMU_Start_Timer(20,taskC,PERIODIC);
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	66 ec       	ldi	r22, 0xC6	; 198
 7ce:	73 e0       	ldi	r23, 0x03	; 3
 7d0:	84 e1       	ldi	r24, 0x14	; 20
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 86 03 	call	0x70c	; 0x70c <TMU_Start_Timer>
   TMU_Start_Timer(60,taskD,ONESHOOT);
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	6d ec       	ldi	r22, 0xCD	; 205
 7dc:	73 e0       	ldi	r23, 0x03	; 3
 7de:	8c e3       	ldi	r24, 0x3C	; 60
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 86 03 	call	0x70c	; 0x70c <TMU_Start_Timer>
   Timer_Start(TIMER_0,0);
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
   while(1)
   {
      //PORTA_DATA |= 0x08;
      TMU_Dispatch();
 7f0:	0e 94 21 03 	call	0x642	; 0x642 <TMU_Dispatch>
 7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <TmuTest+0x4a>

000007f6 <__fixunssfsi>:
 7f6:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_splitA>
 7fa:	88 f0       	brcs	.+34     	; 0x81e <__fixunssfsi+0x28>
 7fc:	9f 57       	subi	r25, 0x7F	; 127
 7fe:	98 f0       	brcs	.+38     	; 0x826 <__fixunssfsi+0x30>
 800:	b9 2f       	mov	r27, r25
 802:	99 27       	eor	r25, r25
 804:	b7 51       	subi	r27, 0x17	; 23
 806:	b0 f0       	brcs	.+44     	; 0x834 <__fixunssfsi+0x3e>
 808:	e1 f0       	breq	.+56     	; 0x842 <__fixunssfsi+0x4c>
 80a:	66 0f       	add	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	1a f0       	brmi	.+6      	; 0x81a <__fixunssfsi+0x24>
 814:	ba 95       	dec	r27
 816:	c9 f7       	brne	.-14     	; 0x80a <__fixunssfsi+0x14>
 818:	14 c0       	rjmp	.+40     	; 0x842 <__fixunssfsi+0x4c>
 81a:	b1 30       	cpi	r27, 0x01	; 1
 81c:	91 f0       	breq	.+36     	; 0x842 <__fixunssfsi+0x4c>
 81e:	0e 94 89 04 	call	0x912	; 0x912 <__fp_zero>
 822:	b1 e0       	ldi	r27, 0x01	; 1
 824:	08 95       	ret
 826:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 82a:	67 2f       	mov	r22, r23
 82c:	78 2f       	mov	r23, r24
 82e:	88 27       	eor	r24, r24
 830:	b8 5f       	subi	r27, 0xF8	; 248
 832:	39 f0       	breq	.+14     	; 0x842 <__fixunssfsi+0x4c>
 834:	b9 3f       	cpi	r27, 0xF9	; 249
 836:	cc f3       	brlt	.-14     	; 0x82a <__fixunssfsi+0x34>
 838:	86 95       	lsr	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b3 95       	inc	r27
 840:	d9 f7       	brne	.-10     	; 0x838 <__fixunssfsi+0x42>
 842:	3e f4       	brtc	.+14     	; 0x852 <__fixunssfsi+0x5c>
 844:	90 95       	com	r25
 846:	80 95       	com	r24
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	08 95       	ret

00000854 <__floatunsisf>:
 854:	e8 94       	clt
 856:	09 c0       	rjmp	.+18     	; 0x86a <__stack+0xb>

00000858 <__floatsisf>:
 858:	97 fb       	bst	r25, 7
 85a:	3e f4       	brtc	.+14     	; 0x86a <__stack+0xb>
 85c:	90 95       	com	r25
 85e:	80 95       	com	r24
 860:	70 95       	com	r23
 862:	61 95       	neg	r22
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	99 23       	and	r25, r25
 86c:	a9 f0       	breq	.+42     	; 0x898 <__stack+0x39>
 86e:	f9 2f       	mov	r31, r25
 870:	96 e9       	ldi	r25, 0x96	; 150
 872:	bb 27       	eor	r27, r27
 874:	93 95       	inc	r25
 876:	f6 95       	lsr	r31
 878:	87 95       	ror	r24
 87a:	77 95       	ror	r23
 87c:	67 95       	ror	r22
 87e:	b7 95       	ror	r27
 880:	f1 11       	cpse	r31, r1
 882:	f8 cf       	rjmp	.-16     	; 0x874 <__stack+0x15>
 884:	fa f4       	brpl	.+62     	; 0x8c4 <__stack+0x65>
 886:	bb 0f       	add	r27, r27
 888:	11 f4       	brne	.+4      	; 0x88e <__stack+0x2f>
 88a:	60 ff       	sbrs	r22, 0
 88c:	1b c0       	rjmp	.+54     	; 0x8c4 <__stack+0x65>
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <__stack+0x65>
 898:	88 23       	and	r24, r24
 89a:	11 f0       	breq	.+4      	; 0x8a0 <__stack+0x41>
 89c:	96 e9       	ldi	r25, 0x96	; 150
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__stack+0x63>
 8a0:	77 23       	and	r23, r23
 8a2:	21 f0       	breq	.+8      	; 0x8ac <__stack+0x4d>
 8a4:	9e e8       	ldi	r25, 0x8E	; 142
 8a6:	87 2f       	mov	r24, r23
 8a8:	76 2f       	mov	r23, r22
 8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <__stack+0x57>
 8ac:	66 23       	and	r22, r22
 8ae:	71 f0       	breq	.+28     	; 0x8cc <__stack+0x6d>
 8b0:	96 e8       	ldi	r25, 0x86	; 134
 8b2:	86 2f       	mov	r24, r22
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	2a f0       	brmi	.+10     	; 0x8c4 <__stack+0x65>
 8ba:	9a 95       	dec	r25
 8bc:	66 0f       	add	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	da f7       	brpl	.-10     	; 0x8ba <__stack+0x5b>
 8c4:	88 0f       	add	r24, r24
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__fp_splitA+0x2a>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__fp_splitA+0x30>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__mulsf3>:
 920:	0e 94 a3 04 	call	0x946	; 0x946 <__mulsf3x>
 924:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 928:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 92c:	38 f0       	brcs	.+14     	; 0x93c <__mulsf3+0x1c>
 92e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 932:	20 f0       	brcs	.+8      	; 0x93c <__mulsf3+0x1c>
 934:	95 23       	and	r25, r21
 936:	11 f0       	breq	.+4      	; 0x93c <__mulsf3+0x1c>
 938:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 93c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 940:	11 24       	eor	r1, r1
 942:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>

00000946 <__mulsf3x>:
 946:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 94a:	70 f3       	brcs	.-36     	; 0x928 <__mulsf3+0x8>

0000094c <__mulsf3_pse>:
 94c:	95 9f       	mul	r25, r21
 94e:	c1 f3       	breq	.-16     	; 0x940 <__mulsf3+0x20>
 950:	95 0f       	add	r25, r21
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	55 1f       	adc	r21, r21
 956:	62 9f       	mul	r22, r18
 958:	f0 01       	movw	r30, r0
 95a:	72 9f       	mul	r23, r18
 95c:	bb 27       	eor	r27, r27
 95e:	f0 0d       	add	r31, r0
 960:	b1 1d       	adc	r27, r1
 962:	63 9f       	mul	r22, r19
 964:	aa 27       	eor	r26, r26
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	aa 1f       	adc	r26, r26
 96c:	64 9f       	mul	r22, r20
 96e:	66 27       	eor	r22, r22
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	66 1f       	adc	r22, r22
 976:	82 9f       	mul	r24, r18
 978:	22 27       	eor	r18, r18
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	62 1f       	adc	r22, r18
 980:	73 9f       	mul	r23, r19
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	83 9f       	mul	r24, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	22 1f       	adc	r18, r18
 990:	74 9f       	mul	r23, r20
 992:	33 27       	eor	r19, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	23 1f       	adc	r18, r19
 99a:	84 9f       	mul	r24, r20
 99c:	60 0d       	add	r22, r0
 99e:	21 1d       	adc	r18, r1
 9a0:	82 2f       	mov	r24, r18
 9a2:	76 2f       	mov	r23, r22
 9a4:	6a 2f       	mov	r22, r26
 9a6:	11 24       	eor	r1, r1
 9a8:	9f 57       	subi	r25, 0x7F	; 127
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	9a f0       	brmi	.+38     	; 0x9d4 <__mulsf3_pse+0x88>
 9ae:	f1 f0       	breq	.+60     	; 0x9ec <__mulsf3_pse+0xa0>
 9b0:	88 23       	and	r24, r24
 9b2:	4a f0       	brmi	.+18     	; 0x9c6 <__mulsf3_pse+0x7a>
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	bb 1f       	adc	r27, r27
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	91 50       	subi	r25, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__mulsf3_pse+0x64>
 9c6:	9e 3f       	cpi	r25, 0xFE	; 254
 9c8:	51 05       	cpc	r21, r1
 9ca:	80 f0       	brcs	.+32     	; 0x9ec <__mulsf3_pse+0xa0>
 9cc:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 9d0:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	e4 f3       	brlt	.-8      	; 0x9d0 <__mulsf3_pse+0x84>
 9d8:	98 3e       	cpi	r25, 0xE8	; 232
 9da:	d4 f3       	brlt	.-12     	; 0x9d0 <__mulsf3_pse+0x84>
 9dc:	86 95       	lsr	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f7 95       	ror	r31
 9e6:	e7 95       	ror	r30
 9e8:	9f 5f       	subi	r25, 0xFF	; 255
 9ea:	c1 f7       	brne	.-16     	; 0x9dc <__mulsf3_pse+0x90>
 9ec:	fe 2b       	or	r31, r30
 9ee:	88 0f       	add	r24, r24
 9f0:	91 1d       	adc	r25, r1
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret

000009fa <__fp_inf>:
 9fa:	97 f9       	bld	r25, 7
 9fc:	9f 67       	ori	r25, 0x7F	; 127
 9fe:	80 e8       	ldi	r24, 0x80	; 128
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	08 95       	ret

00000a06 <__fp_nan>:
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	80 ec       	ldi	r24, 0xC0	; 192
 a0a:	08 95       	ret

00000a0c <__fp_pscA>:
 a0c:	00 24       	eor	r0, r0
 a0e:	0a 94       	dec	r0
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	09 06       	cpc	r0, r25
 a18:	08 95       	ret

00000a1a <__fp_pscB>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	12 16       	cp	r1, r18
 a20:	13 06       	cpc	r1, r19
 a22:	14 06       	cpc	r1, r20
 a24:	05 06       	cpc	r0, r21
 a26:	08 95       	ret

00000a28 <__fp_round>:
 a28:	09 2e       	mov	r0, r25
 a2a:	03 94       	inc	r0
 a2c:	00 0c       	add	r0, r0
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__fp_round+0xc>
 a30:	88 23       	and	r24, r24
 a32:	52 f0       	brmi	.+20     	; 0xa48 <__fp_round+0x20>
 a34:	bb 0f       	add	r27, r27
 a36:	40 f4       	brcc	.+16     	; 0xa48 <__fp_round+0x20>
 a38:	bf 2b       	or	r27, r31
 a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0x18>
 a3c:	60 ff       	sbrs	r22, 0
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__fp_round+0x20>
 a40:	6f 5f       	subi	r22, 0xFF	; 255
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	08 95       	ret

00000a4a <_exit>:
 a4a:	f8 94       	cli

00000a4c <__stop_program>:
 a4c:	ff cf       	rjmp	.-2      	; 0xa4c <__stop_program>
