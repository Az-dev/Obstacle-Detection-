
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000b76  00000c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  008000a2  008000a2  00000c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d5f  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbd  00000000  00000000  00003cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bb  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  00006140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f4  00000000  00000000  00006838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134e  00000000  00000000  0000792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_9>
  28:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_10>
  2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_12>
  34:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8a:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b4:	04 b6       	in	r0, 0x34	; 52
  b6:	06 fe       	sbrs	r0, 6
  b8:	12 c0       	rjmp	.+36     	; 0xde <__vector_3+0x4c>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  ca:	84 b7       	in	r24, 0x34	; 52
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d0:	8a b7       	in	r24, 0x3a	; 58
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	1f c0       	rjmp	.+62     	; 0x11c <__vector_3+0x8a>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  de:	04 b6       	in	r0, 0x34	; 52
  e0:	06 fc       	sbrc	r0, 6
  e2:	1c c0       	rjmp	.+56     	; 0x11c <__vector_3+0x8a>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 49 01 	call	0x292	; 0x292 <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ea:	62 ea       	ldi	r22, 0xA2	; 162
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10a:	84 b7       	in	r24, 0x34	; 52
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 110:	8a b7       	in	r24, 0x3a	; 58
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:
   /*------------------- START TMU APPLICATION  ------------------------*/
   //TmuTest();
   /*------------------- END TMU APPLICATION   ------------------------*/ 

   /*------------------- START SOS APPLICATION  ------------------------*/
   SosTest();
 13e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SosTest>
   //BCM_Receive();   /* Burn its hex on slave */
   /*--------------------- End BCM test -------------------------------*/
   
   
       
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <__vector_12>:
}


/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
   /* Raise transmission complete flag */
   //gu8_transmissionComplete = 1;
   /* Call call_back() */
   call_back();
 16a:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <call_back>
 16e:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <call_back+0x1>
 172:	09 95       	icall
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <Timer_SetCallBack>:
   }
   else
   {
      return E_NOK;
   }
}
 196:	41 15       	cp	r20, r1
 198:	51 05       	cpc	r21, r1
 19a:	f1 f0       	breq	.+60     	; 0x1d8 <Timer_SetCallBack+0x42>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	61 f0       	breq	.+24     	; 0x1b8 <Timer_SetCallBack+0x22>
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <Timer_SetCallBack+0x12>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <Timer_SetCallBack+0x32>
 1a6:	1a c0       	rjmp	.+52     	; 0x1dc <Timer_SetCallBack+0x46>
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	d1 f4       	brne	.+52     	; 0x1e0 <Timer_SetCallBack+0x4a>
 1ac:	50 93 ac 00 	sts	0x00AC, r21	; 0x8000ac <TOV_T0_Call_Back+0x1>
 1b0:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <TOV_T0_Call_Back>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	a1 f4       	brne	.+40     	; 0x1e4 <Timer_SetCallBack+0x4e>
 1bc:	50 93 aa 00 	sts	0x00AA, r21	; 0x8000aa <TOV_T1_Call_Back+0x1>
 1c0:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <TOV_T1_Call_Back>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <Timer_SetCallBack+0x52>
 1cc:	50 93 a8 00 	sts	0x00A8, r21	; 0x8000a8 <TOV_T2_Call_Back+0x1>
 1d0:	40 93 a7 00 	sts	0x00A7, r20	; 0x8000a7 <TOV_T2_Call_Back>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret

000001ec <Timer_Init>:
 1ec:	fc 01       	movw	r30, r24
 1ee:	89 2b       	or	r24, r25
 1f0:	71 f1       	breq	.+92     	; 0x24e <Timer_Init+0x62>
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	91 05       	cpc	r25, r1
 1fa:	61 f0       	breq	.+24     	; 0x214 <Timer_Init+0x28>
 1fc:	18 f0       	brcs	.+6      	; 0x204 <Timer_Init+0x18>
 1fe:	02 97       	sbiw	r24, 0x02	; 2
 200:	c1 f0       	breq	.+48     	; 0x232 <Timer_Init+0x46>
 202:	1e c0       	rjmp	.+60     	; 0x240 <Timer_Init+0x54>
 204:	93 b7       	in	r25, 0x33	; 51
 206:	82 81       	ldd	r24, Z+2	; 0x02
 208:	89 2b       	or	r24, r25
 20a:	83 bf       	out	0x33, r24	; 51
 20c:	86 81       	ldd	r24, Z+6	; 0x06
 20e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu8_t0Prescaler>
 212:	16 c0       	rjmp	.+44     	; 0x240 <Timer_Init+0x54>
 214:	2e b5       	in	r18, 0x2e	; 46
 216:	3f b5       	in	r19, 0x2f	; 47
 218:	82 81       	ldd	r24, Z+2	; 0x02
 21a:	93 81       	ldd	r25, Z+3	; 0x03
 21c:	82 2b       	or	r24, r18
 21e:	93 2b       	or	r25, r19
 220:	9f bd       	out	0x2f, r25	; 47
 222:	8e bd       	out	0x2e, r24	; 46
 224:	86 81       	ldd	r24, Z+6	; 0x06
 226:	97 81       	ldd	r25, Z+7	; 0x07
 228:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <gu16_t1Prescaler+0x1>
 22c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <gu16_t1Prescaler>
 230:	07 c0       	rjmp	.+14     	; 0x240 <Timer_Init+0x54>
 232:	95 b5       	in	r25, 0x25	; 37
 234:	82 81       	ldd	r24, Z+2	; 0x02
 236:	89 2b       	or	r24, r25
 238:	85 bd       	out	0x25, r24	; 37
 23a:	86 81       	ldd	r24, Z+6	; 0x06
 23c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gu8_t2Prescaler>
 240:	78 94       	sei
 242:	99 b7       	in	r25, 0x39	; 57
 244:	80 85       	ldd	r24, Z+8	; 0x08
 246:	89 2b       	or	r24, r25
 248:	89 bf       	out	0x39, r24	; 57
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret

00000252 <Timer_Start>:
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	59 f0       	breq	.+22     	; 0x26c <Timer_Start+0x1a>
 256:	18 f0       	brcs	.+6      	; 0x25e <Timer_Start+0xc>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	99 f0       	breq	.+38     	; 0x282 <Timer_Start+0x30>
 25c:	18 c0       	rjmp	.+48     	; 0x28e <Timer_Start+0x3c>
 25e:	62 bf       	out	0x32, r22	; 50
 260:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <gu8_t0Prescaler>
 264:	83 b7       	in	r24, 0x33	; 51
 266:	89 2b       	or	r24, r25
 268:	83 bf       	out	0x33, r24	; 51
 26a:	11 c0       	rjmp	.+34     	; 0x28e <Timer_Start+0x3c>
 26c:	77 27       	eor	r23, r23
 26e:	7d bd       	out	0x2d, r23	; 45
 270:	6c bd       	out	0x2c, r22	; 44
 272:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <gu16_t1Prescaler>
 276:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <gu16_t1Prescaler+0x1>
 27a:	9e b5       	in	r25, 0x2e	; 46
 27c:	89 2b       	or	r24, r25
 27e:	8e bd       	out	0x2e, r24	; 46
 280:	06 c0       	rjmp	.+12     	; 0x28e <Timer_Start+0x3c>
 282:	64 bd       	out	0x24, r22	; 36
 284:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <gu8_t2Prescaler>
 288:	85 b5       	in	r24, 0x25	; 37
 28a:	89 2b       	or	r24, r25
 28c:	85 bd       	out	0x25, r24	; 37
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <Timer_Stop>:
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	39 f0       	breq	.+14     	; 0x2a4 <Timer_Stop+0x12>
 296:	18 f0       	brcs	.+6      	; 0x29e <Timer_Stop+0xc>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	39 f0       	breq	.+14     	; 0x2aa <Timer_Stop+0x18>
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <Timer_Stop+0x1c>
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	13 be       	out	0x33, r1	; 51
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <Timer_Stop+0x1c>
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	1e bc       	out	0x2e, r1	; 46
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Timer_Stop+0x1c>
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	15 bc       	out	0x25, r1	; 37
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret

000002b2 <Timer_SetValue>:
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <Timer_SetValue+0x10>
 2b6:	18 f0       	brcs	.+6      	; 0x2be <Timer_SetValue+0xc>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <Timer_SetValue+0x16>
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <Timer_SetValue+0x18>
 2be:	62 bf       	out	0x32, r22	; 50
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <Timer_SetValue+0x18>
 2c2:	7d bd       	out	0x2d, r23	; 45
 2c4:	6c bd       	out	0x2c, r22	; 44
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Timer_SetValue+0x18>
 2c8:	64 bd       	out	0x24, r22	; 36
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <Timer_GetValue>:
 2ce:	61 15       	cp	r22, r1
 2d0:	71 05       	cpc	r23, r1
 2d2:	d9 f0       	breq	.+54     	; 0x30a <Timer_GetValue+0x3c>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	59 f0       	breq	.+22     	; 0x2ee <Timer_GetValue+0x20>
 2d8:	18 f0       	brcs	.+6      	; 0x2e0 <Timer_GetValue+0x12>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	79 f0       	breq	.+30     	; 0x2fc <Timer_GetValue+0x2e>
 2de:	17 c0       	rjmp	.+46     	; 0x30e <Timer_GetValue+0x40>
 2e0:	82 b7       	in	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	fb 01       	movw	r30, r22
 2e6:	91 83       	std	Z+1, r25	; 0x01
 2e8:	80 83       	st	Z, r24
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
 2ee:	8c b5       	in	r24, 0x2c	; 44
 2f0:	9d b5       	in	r25, 0x2d	; 45
 2f2:	fb 01       	movw	r30, r22
 2f4:	91 83       	std	Z+1, r25	; 0x01
 2f6:	80 83       	st	Z, r24
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
 2fc:	84 b5       	in	r24, 0x24	; 36
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fb 01       	movw	r30, r22
 302:	91 83       	std	Z+1, r25	; 0x01
 304:	80 83       	st	Z, r24
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret

00000312 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){      
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
   TOV_T0_Call_Back();    
 334:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <TOV_T0_Call_Back>
 338:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <TOV_T0_Call_Back+0x1>
 33c:	09 95       	icall
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_9>:

ISR_TIMER1_OVF(){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
   TOV_T1_Call_Back();     
 382:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <TOV_T1_Call_Back>
 386:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <TOV_T1_Call_Back+0x1>
 38a:	09 95       	icall
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_5>:

ISR_TIMER2_OVF(){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
   TOV_T2_Call_Back();    
 3d0:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <TOV_T2_Call_Back>
 3d4:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <TOV_T2_Call_Back+0x1>
 3d8:	09 95       	icall
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_10>:



ISR_TIMER0_COMP(){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
   /* on successful character reception : you can read the new character */  
   //gu8_RX_CompleteFlag = 1;
   rx_call_back();
 432:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <rx_call_back>
 436:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <rx_call_back+0x1>
 43a:	09 95       	icall
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_15>:
//{
   /* if data register is empty : you can write a new character. */            
//}

ISR_USART_TX()
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
   /* if data register is empty : you can write a new character. */
   //gu8_TX_CompleteFlag = 1;
   tx_call_back();     
 480:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <tx_call_back>
 484:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <tx_call_back+0x1>
 488:	09 95       	icall
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <SOS_NO_OP>:
   gu8_tickFlag = 1;
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
}

static void SOS_NO_OP(void){}
 4ac:	08 95       	ret

000004ae <SOS_T2_OV_CallBack>:
*/
static void SOS_T2_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
 4b4:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 4b8:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 4c2:	08 95       	ret

000004c4 <SOS_T1_OV_CallBack>:
*/
static void SOS_T1_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag*/
   gu8_tickFlag = 1;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
 4ca:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 4ce:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 4d2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 4d6:	08 95       	ret

000004d8 <SOS_T0_OV_CallBack>:
*/
static void SOS_T0_OV_CallBack(void)
{
   /*---- TMU Over Flow Procedure ----*/   
   /* 1 - Rise execute flag or tick flag */
   gu8_tickFlag = 1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <gu8_tickFlag>
   /* 2 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
 4de:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 4e2:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Timer_SetValue>
 4ec:	08 95       	ret

000004ee <SOS_Init>:
*  @param const strSOS_Cfg_t *  strSOS_Init
*
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_Init(const strSOS_Cfg_t * strSOS_Init)
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strSOS_Init)
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <SOS_Init+0xa>
 4f6:	8a c0       	rjmp	.+276    	; 0x60c <SOS_Init+0x11e>
 4f8:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strSOS_Init->timer_channel)
 4fa:	98 81       	ld	r25, Y
 4fc:	91 30       	cpi	r25, 0x01	; 1
 4fe:	81 f1       	breq	.+96     	; 0x560 <SOS_Init+0x72>
 500:	20 f0       	brcs	.+8      	; 0x50a <SOS_Init+0x1c>
 502:	92 30       	cpi	r25, 0x02	; 2
 504:	09 f4       	brne	.+2      	; 0x508 <SOS_Init+0x1a>
 506:	56 c0       	rjmp	.+172    	; 0x5b4 <SOS_Init+0xc6>
 508:	83 c0       	rjmp	.+262    	; 0x610 <SOS_Init+0x122>
      {
         case TIMER_0:
            gu8_timerChannel = TIMER_0; 
 50a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <gu8_timerChannel>
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0SosConfig);
 50e:	84 e7       	ldi	r24, 0x74	; 116
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
 516:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gstrTimer0TmuConfig+0x6>
 51a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gstrTimer0TmuConfig+0x7>
 51e:	05 97       	sbiw	r24, 0x05	; 5
 520:	b9 f4       	brne	.+46     	; 0x550 <SOS_Init+0x62>
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T0_OV_VAL - gu16_preloader;                  
 522:	69 81       	ldd	r22, Y+1	; 0x01
 524:	7a 81       	ldd	r23, Y+2	; 0x02
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 be 04 	call	0x97c	; 0x97c <__floatunsisf>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	4a e7       	ldi	r20, 0x7A	; 122
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 53a:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	c9 01       	movw	r24, r18
 544:	86 1b       	sub	r24, r22
 546:	97 0b       	sbc	r25, r23
 548:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <gu16_preloader+0x1>
 54c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu16_preloader>
               break;               
            }
            /* Set timer0 call Back */
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,SOS_T0_OV_CallBack);           
 550:	4c e6       	ldi	r20, 0x6C	; 108
 552:	52 e0       	ldi	r21, 0x02	; 2
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
 55c:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T0_OV_VAL - gu16_preloader;                  
               break;               
            }
            /* Set timer0 call Back */
            Timer_SetCallBack(TIMER_0,TOV_CALL_BACK,SOS_T0_OV_CallBack);           
         break;
 55e:	59 c0       	rjmp	.+178    	; 0x612 <SOS_Init+0x124>
         case TIMER_1:
            gu8_timerChannel = TIMER_1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_timerChannel>
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1SosConfig);
 566:	8a e6       	ldi	r24, 0x6A	; 106
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
 56e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <gstrTimer1TmuConfig+0x6>
 572:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <gstrTimer1TmuConfig+0x7>
 576:	05 97       	sbiw	r24, 0x05	; 5
 578:	a9 f4       	brne	.+42     	; 0x5a4 <SOS_Init+0xb6>
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T1_OV_VAL - gu16_preloader;                  
 57a:	69 81       	ldd	r22, Y+1	; 0x01
 57c:	7a 81       	ldd	r23, Y+2	; 0x02
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 be 04 	call	0x97c	; 0x97c <__floatunsisf>
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	4a e7       	ldi	r20, 0x7A	; 122
 58c:	51 e4       	ldi	r21, 0x41	; 65
 58e:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 592:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
 596:	71 95       	neg	r23
 598:	61 95       	neg	r22
 59a:	71 09       	sbc	r23, r1
 59c:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <gu16_preloader+0x1>
 5a0:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <gu16_preloader>
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,SOS_T1_OV_CallBack);
 5a4:	42 e6       	ldi	r20, 0x62	; 98
 5a6:	52 e0       	ldi	r21, 0x02	; 2
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
 5b0:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T1_OV_VAL - gu16_preloader;                  
               break;
            }
            /* Set timer1 call Back */
            Timer_SetCallBack(TIMER_1,TOV_CALL_BACK,SOS_T1_OV_CallBack);
         break;
 5b2:	2f c0       	rjmp	.+94     	; 0x612 <SOS_Init+0x124>
         case TIMER_2:
            gu8_timerChannel = TIMER_2;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_timerChannel>
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2SosConfig);
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
 5c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <gstrTimer2TmuConfig+0x6>
 5c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gstrTimer2TmuConfig+0x7>
 5ca:	07 97       	sbiw	r24, 0x07	; 7
 5cc:	b9 f4       	brne	.+46     	; 0x5fc <SOS_Init+0x10e>
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strSOS_Init->resolution);
                  gu16_preloader = T2_OV_VAL - gu16_preloader;                  
 5ce:	69 81       	ldd	r22, Y+1	; 0x01
 5d0:	7a 81       	ldd	r23, Y+2	; 0x02
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 be 04 	call	0x97c	; 0x97c <__floatunsisf>
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	4a e7       	ldi	r20, 0x7A	; 122
 5e0:	51 e4       	ldi	r21, 0x41	; 65
 5e2:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 5e6:	0e 94 8f 04 	call	0x91e	; 0x91e <__fixunssfsi>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	31 e0       	ldi	r19, 0x01	; 1
 5ee:	c9 01       	movw	r24, r18
 5f0:	86 1b       	sub	r24, r22
 5f2:	97 0b       	sbc	r25, r23
 5f4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <gu16_preloader+0x1>
 5f8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu16_preloader>
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
 5fc:	47 e5       	ldi	r20, 0x57	; 87
 5fe:	52 e0       	ldi	r21, 0x02	; 2
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_SetCallBack>
         break;
      }
      au8_errorState = SOS_INIT_OK;      
 608:	80 e0       	ldi	r24, 0x00	; 0
                  gu16_preloader = T2_OV_VAL - gu16_preloader;                  
               break;
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
 60a:	03 c0       	rjmp	.+6      	; 0x612 <SOS_Init+0x124>
      }
      au8_errorState = SOS_INIT_OK;      
   }else{
      au8_errorState = SOS_INIT_NOK;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	01 c0       	rjmp	.+2      	; 0x612 <SOS_Init+0x124>
            }
            /* Set timer2 call Back */
            Timer_SetCallBack(TIMER_2,TOV_CALL_BACK,SOS_T2_OV_CallBack);
         break;
      }
      au8_errorState = SOS_INIT_OK;      
 610:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = SOS_INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <SOS_Dispatch>:
*  @param void
*
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_Dispatch(void)
{
 618:	af 92       	push	r10
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
    /* Define Error state */
   uint8_t au8_errorState;   
   /* Check if the buffer not empty and excute or tick flag has been fired or not*/
   if((0 <= gindex) && (1 == gu8_tickFlag))
 62c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <gindex>
 630:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <gindex+0x1>
 634:	99 23       	and	r25, r25
 636:	0c f4       	brge	.+2      	; 0x63a <SOS_Dispatch+0x22>
 638:	41 c0       	rjmp	.+130    	; 0x6bc <SOS_Dispatch+0xa4>
 63a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <gu8_tickFlag>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	e9 f5       	brne	.+122    	; 0x6bc <SOS_Dispatch+0xa4>
   {
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
 642:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <gu8_tickFlag>
 646:	c9 eb       	ldi	r28, 0xB9	; 185
 648:	d0 e0       	ldi	r29, 0x00	; 0
 64a:	00 e0       	ldi	r16, 0x00	; 0
 64c:	10 e0       	ldi	r17, 0x00	; 0
                  gindex = -1;
               }                
               else
               {
                  /* Assign to it a task with no operation */
                  garrTaskSOSBuffer[au16_iter].fn = SOS_NO_OP;                
 64e:	0f 2e       	mov	r0, r31
 650:	f6 e5       	ldi	r31, 0x56	; 86
 652:	af 2e       	mov	r10, r31
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	bf 2e       	mov	r11, r31
 658:	f0 2d       	mov	r31, r0
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
               {
                  /* Decrement gindex*/
                  gindex = -1;
 65a:	cc 24       	eor	r12, r12
 65c:	ca 94       	dec	r12
 65e:	dc 2c       	mov	r13, r12
      
      /* Search for the Task of the given function within SOS buffer*/
      for(;au16_iter <= gindex; au16_iter++)
      {
         /* Increment task internal tick count */
         garrTaskSOSBuffer[au16_iter].tick_counts++;
 660:	8d 81       	ldd	r24, Y+5	; 0x05
 662:	9e 81       	ldd	r25, Y+6	; 0x06
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	8d 83       	std	Y+5, r24	; 0x05
         /* Check if task ticks count has reached to the required tick value -which is (task.counter)- to determine whether to execute task's function or not */
         if((garrTaskSOSBuffer[au16_iter].tick_counts) == (garrTaskSOSBuffer[au16_iter].counter))
 66a:	28 81       	ld	r18, Y
 66c:	39 81       	ldd	r19, Y+1	; 0x01
 66e:	82 17       	cp	r24, r18
 670:	93 07       	cpc	r25, r19
 672:	d1 f4       	brne	.+52     	; 0x6a8 <SOS_Dispatch+0x90>
         { 
            /* 2 - Reset task tick_counts*/ 
            garrTaskSOSBuffer[au16_iter].tick_counts = 0;          
 674:	1e 82       	std	Y+6, r1	; 0x06
 676:	1d 82       	std	Y+5, r1	; 0x05
            /* 3 - Execute Task Function */
            garrTaskSOSBuffer[au16_iter].fn();                      
 678:	ef 81       	ldd	r30, Y+7	; 0x07
 67a:	f8 85       	ldd	r31, Y+8	; 0x08
 67c:	09 95       	icall
            /* 4 - See Whether the task is periodic or one shoot -after its execution- */
            if((ONESHOOT == garrTaskSOSBuffer[au16_iter].work_mode) && (SOS_NO_OP != garrTaskSOSBuffer[au16_iter].fn))
 67e:	8c 81       	ldd	r24, Y+4	; 0x04
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 f4       	brne	.+36     	; 0x6a8 <SOS_Dispatch+0x90>
 684:	8f 81       	ldd	r24, Y+7	; 0x07
 686:	98 85       	ldd	r25, Y+8	; 0x08
 688:	86 55       	subi	r24, 0x56	; 86
 68a:	92 40       	sbci	r25, 0x02	; 2
 68c:	69 f0       	breq	.+26     	; 0x6a8 <SOS_Dispatch+0x90>
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
 68e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <gindex>
 692:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <gindex+0x1>
 696:	89 2b       	or	r24, r25
 698:	29 f4       	brne	.+10     	; 0x6a4 <SOS_Dispatch+0x8c>
               {
                  /* Decrement gindex*/
                  gindex = -1;
 69a:	d0 92 9d 00 	sts	0x009D, r13	; 0x80009d <gindex+0x1>
 69e:	c0 92 9c 00 	sts	0x009C, r12	; 0x80009c <gindex>
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <SOS_Dispatch+0x90>
               }                
               else
               {
                  /* Assign to it a task with no operation */
                  garrTaskSOSBuffer[au16_iter].fn = SOS_NO_OP;                
 6a4:	b8 86       	std	Y+8, r11	; 0x08
 6a6:	af 82       	std	Y+7, r10	; 0x07
      sint16_t au16_iter = 0;      
      /* 1 - pull down execute flag or tick flag */
      gu8_tickFlag = 0;
      
      /* Search for the Task of the given function within SOS buffer*/
      for(;au16_iter <= gindex; au16_iter++)
 6a8:	0f 5f       	subi	r16, 0xFF	; 255
 6aa:	1f 4f       	sbci	r17, 0xFF	; 255
 6ac:	29 96       	adiw	r28, 0x09	; 9
 6ae:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <gindex>
 6b2:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <gindex+0x1>
 6b6:	80 17       	cp	r24, r16
 6b8:	91 07       	cpc	r25, r17
 6ba:	94 f6       	brge	.-92     	; 0x660 <SOS_Dispatch+0x48>
   {
      /* return error code array is empty */;
      au8_errorState = SOS_BUFFER_EMPTY;      
   }
   return au8_errorState;  
}
 6bc:	84 e0       	ldi	r24, 0x04	; 4
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	bf 90       	pop	r11
 6d0:	af 90       	pop	r10
 6d2:	08 95       	ret

000006d4 <SOS_AddTask>:
EnmSOSError_t SOS_AddTask(uint16_t duration , void (* task_fn)(void)  , uint8_t work_mode ,uint16_t priority)
{
   /* Define Error state */
   uint8_t au8_errorState = 0;
   
   if(NULL != task_fn)
 6d4:	61 15       	cp	r22, r1
 6d6:	71 05       	cpc	r23, r1
 6d8:	61 f1       	breq	.+88     	; 0x732 <SOS_AddTask+0x5e>
   {
      /*---- Enable Interrupt ----*/
      /*---- Add Task to SOS Buffer while buffer is not full ----*/
      if(SOS_BUFFER_SIZE > gindex)
 6da:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <gindex>
 6de:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <gindex+0x1>
 6e2:	3a 97       	sbiw	r30, 0x0a	; 10
 6e4:	44 f5       	brge	.+80     	; 0x736 <SOS_AddTask+0x62>
      {
         /* Create a new task */
         strTaskSos_t *austr_Task = NULL;         
         austr_Task->counter = duration;
 6e6:	e0 e0       	ldi	r30, 0x00	; 0
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
         austr_Task->work_mode = work_mode;
 6ee:	44 83       	std	Z+4, r20	; 0x04
         austr_Task->tick_counts = 0;
 6f0:	16 82       	std	Z+6, r1	; 0x06
 6f2:	15 82       	std	Z+5, r1	; 0x05
         austr_Task->priority = priority;
 6f4:	33 83       	std	Z+3, r19	; 0x03
 6f6:	22 83       	std	Z+2, r18	; 0x02
         austr_Task->fn = task_fn;
 6f8:	70 87       	std	Z+8, r23	; 0x08
 6fa:	67 83       	std	Z+7, r22	; 0x07
         /* Increment gindex : to point to the next empty location to store the new task */
         gindex++;         
 6fc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <gindex>
 700:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <gindex+0x1>
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <gindex+0x1>
 70a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <gindex>
         /* Append the task to SOS buffer */
         garrTaskSOSBuffer[gindex] = *austr_Task;         
 70e:	dc 01       	movw	r26, r24
 710:	aa 0f       	add	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	aa 0f       	add	r26, r26
 716:	bb 1f       	adc	r27, r27
 718:	aa 0f       	add	r26, r26
 71a:	bb 1f       	adc	r27, r27
 71c:	a8 0f       	add	r26, r24
 71e:	b9 1f       	adc	r27, r25
 720:	a7 54       	subi	r26, 0x47	; 71
 722:	bf 4f       	sbci	r27, 0xFF	; 255
 724:	89 e0       	ldi	r24, 0x09	; 9
 726:	01 90       	ld	r0, Z+
 728:	0d 92       	st	X+, r0
 72a:	8a 95       	dec	r24
 72c:	e1 f7       	brne	.-8      	; 0x726 <SOS_AddTask+0x52>
*  @return EnmSOSError_t
*/
EnmSOSError_t SOS_AddTask(uint16_t duration , void (* task_fn)(void)  , uint8_t work_mode ,uint16_t priority)
{
   /* Define Error state */
   uint8_t au8_errorState = 0;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
      }else{
         /* return error code buffer is full*/
         au8_errorState = SOS_BUFFER_FULL;
      }
   }else{
      au8_errorState = SOS_INVALID_TASK_PARAM;
 732:	85 e0       	ldi	r24, 0x05	; 5
 734:	08 95       	ret
         gindex++;         
         /* Append the task to SOS buffer */
         garrTaskSOSBuffer[gindex] = *austr_Task;         
      }else{
         /* return error code buffer is full*/
         au8_errorState = SOS_BUFFER_FULL;
 736:	83 e0       	ldi	r24, 0x03	; 3
      }
   }else{
      au8_errorState = SOS_INVALID_TASK_PARAM;
   }  
   return au8_errorState;
}
 738:	08 95       	ret

0000073a <SOS_TimerStart>:
*  @param void
*
*  @return void
*/
EnmSOSError_t SOS_TimerStart(void)
{
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	29 97       	sbiw	r28, 0x09	; 9
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
   /* Sort the tasks before starting your timer - After adding tasks - : gindex+1 represents the number of current elements exist in the buffer*/
   priorityBubbleSort(garrTaskSOSBuffer,(uint16_t)(gindex+1));
 752:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <gindex>
 756:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <gindex+0x1>
{
   uint16_t i = n-1;   //we could deal with n directly without needing i , but to indicate that
   // `i` is a parameter that is to express the number of values remaining to
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	09 f4       	brne	.+2      	; 0x760 <SOS_TimerStart+0x26>
 75e:	44 c0       	rjmp	.+136    	; 0x7e8 <SOS_TimerStart+0xae>
 760:	8c 01       	movw	r16, r24
 762:	01 50       	subi	r16, 0x01	; 1
 764:	11 09       	sbc	r17, r1
 766:	bc 01       	movw	r22, r24
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	68 0f       	add	r22, r24
 776:	79 1f       	adc	r23, r25
 778:	67 54       	subi	r22, 0x47	; 71
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	2e c0       	rjmp	.+92     	; 0x7da <SOS_TimerStart+0xa0>
   {
      uint16_t j = 0;
      for(;j < i;j++)
      {
         if((arr[j].priority) > (arr[j+1].priority))
 77e:	fc 01       	movw	r30, r24
 780:	22 81       	ldd	r18, Z+2	; 0x02
 782:	33 81       	ldd	r19, Z+3	; 0x03
 784:	43 85       	ldd	r20, Z+11	; 0x0b
 786:	54 85       	ldd	r21, Z+12	; 0x0c
 788:	42 17       	cp	r20, r18
 78a:	53 07       	cpc	r21, r19
 78c:	d8 f4       	brcc	.+54     	; 0x7c4 <SOS_TimerStart+0x8a>
/*---- End Of Call Backs ----*/
/*---- Start Priority Sorting Handler ----*/
static void swapVal(strTaskSos_t * a,strTaskSos_t * b)
{
   strTaskSos_t temp;
   PORTB_DATA = a->priority;
 78e:	28 bb       	out	0x18, r18	; 24
   PORTC_DATA = b->priority;
 790:	23 85       	ldd	r18, Z+11	; 0x0b
 792:	25 bb       	out	0x15, r18	; 21
   temp = *a;
 794:	29 e0       	ldi	r18, 0x09	; 9
 796:	de 01       	movw	r26, r28
 798:	11 96       	adiw	r26, 0x01	; 1
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	2a 95       	dec	r18
 7a0:	e1 f7       	brne	.-8      	; 0x79a <SOS_TimerStart+0x60>
   *a = *b;
 7a2:	29 e0       	ldi	r18, 0x09	; 9
 7a4:	fc 01       	movw	r30, r24
 7a6:	39 96       	adiw	r30, 0x09	; 9
 7a8:	dc 01       	movw	r26, r24
 7aa:	01 90       	ld	r0, Z+
 7ac:	0d 92       	st	X+, r0
 7ae:	2a 95       	dec	r18
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <SOS_TimerStart+0x70>
   *b = temp;
 7b2:	29 e0       	ldi	r18, 0x09	; 9
 7b4:	fe 01       	movw	r30, r28
 7b6:	31 96       	adiw	r30, 0x01	; 1
 7b8:	dc 01       	movw	r26, r24
 7ba:	19 96       	adiw	r26, 0x09	; 9
 7bc:	01 90       	ld	r0, Z+
 7be:	0d 92       	st	X+, r0
 7c0:	2a 95       	dec	r18
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <SOS_TimerStart+0x82>
 7c4:	09 96       	adiw	r24, 0x09	; 9
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
   {
      uint16_t j = 0;
      for(;j < i;j++)
 7c6:	68 17       	cp	r22, r24
 7c8:	79 07       	cpc	r23, r25
 7ca:	c9 f6       	brne	.-78     	; 0x77e <SOS_TimerStart+0x44>
{
   uint16_t i = n-1;   //we could deal with n directly without needing i , but to indicate that
   // `i` is a parameter that is to express the number of values remaining to
   // be sorted the size of the array -it is just initialized with the size
   //of the array-
   while(i > 0)
 7cc:	01 15       	cp	r16, r1
 7ce:	11 05       	cpc	r17, r1
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <SOS_TimerStart+0xae>
 7d2:	01 50       	subi	r16, 0x01	; 1
 7d4:	11 09       	sbc	r17, r1
 7d6:	69 50       	subi	r22, 0x09	; 9
 7d8:	71 09       	sbc	r23, r1
   {
      uint16_t j = 0;
      for(;j < i;j++)
 7da:	0f 3f       	cpi	r16, 0xFF	; 255
 7dc:	ff ef       	ldi	r31, 0xFF	; 255
 7de:	1f 07       	cpc	r17, r31
 7e0:	c1 f3       	breq	.-16     	; 0x7d2 <SOS_TimerStart+0x98>
 7e2:	89 eb       	ldi	r24, 0xB9	; 185
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	cb cf       	rjmp	.-106    	; 0x77e <SOS_TimerStart+0x44>
   /*  
   Switch on gu8_timerChannel instead of passing it directly 
   to Timer_Start() is a kind of protection if the initialized
   channel in the initialization process was wrong.
   */
   switch(gu8_timerChannel)
 7e8:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_timerChannel>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	61 f0       	breq	.+24     	; 0x808 <SOS_TimerStart+0xce>
 7f0:	18 f0       	brcs	.+6      	; 0x7f8 <SOS_TimerStart+0xbe>
 7f2:	82 30       	cpi	r24, 0x02	; 2
 7f4:	89 f0       	breq	.+34     	; 0x818 <SOS_TimerStart+0xde>
 7f6:	17 c0       	rjmp	.+46     	; 0x826 <SOS_TimerStart+0xec>
   {
      case TIMER_0:
         Timer_Start(TIMER_0,gu16_preloader);
 7f8:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 7fc:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
      break;
 806:	0f c0       	rjmp	.+30     	; 0x826 <SOS_TimerStart+0xec>
      case TIMER_1:
         Timer_Start(TIMER_1,gu16_preloader);
 808:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 80c:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
      break;
 816:	07 c0       	rjmp	.+14     	; 0x826 <SOS_TimerStart+0xec>
      case TIMER_2:
         Timer_Start(TIMER_2,gu16_preloader);
 818:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <gu16_preloader>
 81c:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <gu16_preloader+0x1>
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	0e 94 29 01 	call	0x252	; 0x252 <Timer_Start>
      break;
   }
   return SOS_TIMER_START_SUCCESS;
}
 826:	86 e0       	ldi	r24, 0x06	; 6
 828:	29 96       	adiw	r28, 0x09	; 9
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <taskB>:
{
   /* Idle mode */
   MCUCR &= ~(1<<5) & ~(1<<6) & ~(1<<4);
   /* Sleep enable */
   MCUCR |= (1<<7);
   __asm__ __volatile__("sleep" "\n\t" ::);
 83e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu8_state>
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	71 f4       	brne	.+28     	; 0x862 <__stack+0x3>
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	8a bb       	out	0x1a, r24	; 26
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	8b bb       	out	0x1b, r24	; 27
 84e:	8f ec       	ldi	r24, 0xCF	; 207
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <taskB+0x14>
 856:	00 c0       	rjmp	.+0      	; 0x858 <taskB+0x1a>
 858:	00 00       	nop
 85a:	1b ba       	out	0x1b, r1	; 27
 85c:	82 e0       	ldi	r24, 0x02	; 2
 85e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu8_state>
 862:	08 95       	ret

00000864 <taskC>:
 864:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu8_state>
 868:	82 30       	cpi	r24, 0x02	; 2
 86a:	71 f4       	brne	.+28     	; 0x888 <taskC+0x24>
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	8a bb       	out	0x1a, r24	; 26
 870:	80 e4       	ldi	r24, 0x40	; 64
 872:	8b bb       	out	0x1b, r24	; 27
 874:	8f ec       	ldi	r24, 0xCF	; 207
 876:	97 e0       	ldi	r25, 0x07	; 7
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	f1 f7       	brne	.-4      	; 0x878 <taskC+0x14>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <taskC+0x1a>
 87e:	00 00       	nop
 880:	1b ba       	out	0x1b, r1	; 27
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu8_state>
 888:	08 95       	ret

0000088a <taskD>:
 88a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu8_state>
 88e:	83 30       	cpi	r24, 0x03	; 3
 890:	c1 f4       	brne	.+48     	; 0x8c2 <taskD+0x38>
 892:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <trial_counter>
 896:	88 23       	and	r24, r24
 898:	a1 f0       	breq	.+40     	; 0x8c2 <taskD+0x38>
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	8a bb       	out	0x1a, r24	; 26
 89e:	80 e8       	ldi	r24, 0x80	; 128
 8a0:	8b bb       	out	0x1b, r24	; 27
 8a2:	8f ec       	ldi	r24, 0xCF	; 207
 8a4:	97 e0       	ldi	r25, 0x07	; 7
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <taskD+0x1c>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <taskD+0x22>
 8ac:	00 00       	nop
 8ae:	1b ba       	out	0x1b, r1	; 27
 8b0:	82 e0       	ldi	r24, 0x02	; 2
 8b2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu8_state>
 8b6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <trial_counter>
 8ba:	81 50       	subi	r24, 0x01	; 1
 8bc:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <trial_counter>
 8c0:	08 95       	ret
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <trial_counter>
 8c8:	82 e0       	ldi	r24, 0x02	; 2
 8ca:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu8_state>
 8ce:	08 95       	ret

000008d0 <SosTest>:
*
*  @return void
*/
void SosTest(void)
{
   gu8_state = TASK_B;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu8_state>
   //PORTA_DIR = 0xff;
   SOS_Init(&gstrSOSConfig);
 8d6:	8f e9       	ldi	r24, 0x9F	; 159
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 77 02 	call	0x4ee	; 0x4ee <SOS_Init>
   //SOS_AddTask(1,taskA,ONESHOOT,0);
   SOS_AddTask(1,taskB,PERIODIC,0);
 8de:	20 e0       	ldi	r18, 0x00	; 0
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	6f e1       	ldi	r22, 0x1F	; 31
 8e6:	74 e0       	ldi	r23, 0x04	; 4
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SOS_AddTask>
   SOS_AddTask(13,taskC,PERIODIC,1);
 8f0:	21 e0       	ldi	r18, 0x01	; 1
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	40 e0       	ldi	r20, 0x00	; 0
 8f6:	62 e3       	ldi	r22, 0x32	; 50
 8f8:	74 e0       	ldi	r23, 0x04	; 4
 8fa:	8d e0       	ldi	r24, 0x0D	; 13
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SOS_AddTask>
   SOS_AddTask(1,taskD,PERIODIC,2);
 902:	22 e0       	ldi	r18, 0x02	; 2
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	65 e4       	ldi	r22, 0x45	; 69
 90a:	74 e0       	ldi	r23, 0x04	; 4
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SOS_AddTask>
   /* Start SOS */
   SOS_TimerStart();
 914:	0e 94 9d 03 	call	0x73a	; 0x73a <SOS_TimerStart>
   while(1)
   {
      //PORTA_DATA |= 0x10;
      SOS_Dispatch();
 918:	0e 94 0c 03 	call	0x618	; 0x618 <SOS_Dispatch>
 91c:	fd cf       	rjmp	.-6      	; 0x918 <SosTest+0x48>

0000091e <__fixunssfsi>:
 91e:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 922:	88 f0       	brcs	.+34     	; 0x946 <__fixunssfsi+0x28>
 924:	9f 57       	subi	r25, 0x7F	; 127
 926:	98 f0       	brcs	.+38     	; 0x94e <__fixunssfsi+0x30>
 928:	b9 2f       	mov	r27, r25
 92a:	99 27       	eor	r25, r25
 92c:	b7 51       	subi	r27, 0x17	; 23
 92e:	b0 f0       	brcs	.+44     	; 0x95c <__fixunssfsi+0x3e>
 930:	e1 f0       	breq	.+56     	; 0x96a <__fixunssfsi+0x4c>
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	1a f0       	brmi	.+6      	; 0x942 <__fixunssfsi+0x24>
 93c:	ba 95       	dec	r27
 93e:	c9 f7       	brne	.-14     	; 0x932 <__fixunssfsi+0x14>
 940:	14 c0       	rjmp	.+40     	; 0x96a <__fixunssfsi+0x4c>
 942:	b1 30       	cpi	r27, 0x01	; 1
 944:	91 f0       	breq	.+36     	; 0x96a <__fixunssfsi+0x4c>
 946:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_zero>
 94a:	b1 e0       	ldi	r27, 0x01	; 1
 94c:	08 95       	ret
 94e:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 952:	67 2f       	mov	r22, r23
 954:	78 2f       	mov	r23, r24
 956:	88 27       	eor	r24, r24
 958:	b8 5f       	subi	r27, 0xF8	; 248
 95a:	39 f0       	breq	.+14     	; 0x96a <__fixunssfsi+0x4c>
 95c:	b9 3f       	cpi	r27, 0xF9	; 249
 95e:	cc f3       	brlt	.-14     	; 0x952 <__fixunssfsi+0x34>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b3 95       	inc	r27
 968:	d9 f7       	brne	.-10     	; 0x960 <__fixunssfsi+0x42>
 96a:	3e f4       	brtc	.+14     	; 0x97a <__fixunssfsi+0x5c>
 96c:	90 95       	com	r25
 96e:	80 95       	com	r24
 970:	70 95       	com	r23
 972:	61 95       	neg	r22
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <__floatunsisf>:
 97c:	e8 94       	clt
 97e:	09 c0       	rjmp	.+18     	; 0x992 <__floatsisf+0x12>

00000980 <__floatsisf>:
 980:	97 fb       	bst	r25, 7
 982:	3e f4       	brtc	.+14     	; 0x992 <__floatsisf+0x12>
 984:	90 95       	com	r25
 986:	80 95       	com	r24
 988:	70 95       	com	r23
 98a:	61 95       	neg	r22
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	99 23       	and	r25, r25
 994:	a9 f0       	breq	.+42     	; 0x9c0 <__floatsisf+0x40>
 996:	f9 2f       	mov	r31, r25
 998:	96 e9       	ldi	r25, 0x96	; 150
 99a:	bb 27       	eor	r27, r27
 99c:	93 95       	inc	r25
 99e:	f6 95       	lsr	r31
 9a0:	87 95       	ror	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f1 11       	cpse	r31, r1
 9aa:	f8 cf       	rjmp	.-16     	; 0x99c <__floatsisf+0x1c>
 9ac:	fa f4       	brpl	.+62     	; 0x9ec <__floatsisf+0x6c>
 9ae:	bb 0f       	add	r27, r27
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__floatsisf+0x36>
 9b2:	60 ff       	sbrs	r22, 0
 9b4:	1b c0       	rjmp	.+54     	; 0x9ec <__floatsisf+0x6c>
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	16 c0       	rjmp	.+44     	; 0x9ec <__floatsisf+0x6c>
 9c0:	88 23       	and	r24, r24
 9c2:	11 f0       	breq	.+4      	; 0x9c8 <__floatsisf+0x48>
 9c4:	96 e9       	ldi	r25, 0x96	; 150
 9c6:	11 c0       	rjmp	.+34     	; 0x9ea <__floatsisf+0x6a>
 9c8:	77 23       	and	r23, r23
 9ca:	21 f0       	breq	.+8      	; 0x9d4 <__floatsisf+0x54>
 9cc:	9e e8       	ldi	r25, 0x8E	; 142
 9ce:	87 2f       	mov	r24, r23
 9d0:	76 2f       	mov	r23, r22
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__floatsisf+0x5e>
 9d4:	66 23       	and	r22, r22
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__floatsisf+0x74>
 9d8:	96 e8       	ldi	r25, 0x86	; 134
 9da:	86 2f       	mov	r24, r22
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	2a f0       	brmi	.+10     	; 0x9ec <__floatsisf+0x6c>
 9e2:	9a 95       	dec	r25
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	da f7       	brpl	.-10     	; 0x9e2 <__floatsisf+0x62>
 9ec:	88 0f       	add	r24, r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__fp_split3>:
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	44 0f       	add	r20, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__fp_splitA+0x10>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	71 f0       	breq	.+28     	; 0xa20 <__fp_splitA+0x1a>
 a04:	47 95       	ror	r20

00000a06 <__fp_splitA>:
 a06:	88 0f       	add	r24, r24
 a08:	97 fb       	bst	r25, 7
 a0a:	99 1f       	adc	r25, r25
 a0c:	61 f0       	breq	.+24     	; 0xa26 <__fp_splitA+0x20>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	79 f0       	breq	.+30     	; 0xa30 <__fp_splitA+0x2a>
 a12:	87 95       	ror	r24
 a14:	08 95       	ret
 a16:	12 16       	cp	r1, r18
 a18:	13 06       	cpc	r1, r19
 a1a:	14 06       	cpc	r1, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <__fp_split3+0xe>
 a20:	46 95       	lsr	r20
 a22:	f1 df       	rcall	.-30     	; 0xa06 <__fp_splitA>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <__fp_splitA+0x30>
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <__fp_splitA+0xc>
 a30:	86 95       	lsr	r24
 a32:	71 05       	cpc	r23, r1
 a34:	61 05       	cpc	r22, r1
 a36:	08 94       	sec
 a38:	08 95       	ret

00000a3a <__fp_zero>:
 a3a:	e8 94       	clt

00000a3c <__fp_szero>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	66 27       	eor	r22, r22
 a40:	77 27       	eor	r23, r23
 a42:	cb 01       	movw	r24, r22
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__mulsf3>:
 a48:	0e 94 37 05 	call	0xa6e	; 0xa6e <__mulsf3x>
 a4c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_round>
 a50:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fp_pscA>
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__mulsf3+0x1c>
 a56:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscB>
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__mulsf3+0x1c>
 a5c:	95 23       	and	r25, r21
 a5e:	11 f0       	breq	.+4      	; 0xa64 <__mulsf3+0x1c>
 a60:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 a64:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_nan>
 a68:	11 24       	eor	r1, r1
 a6a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>

00000a6e <__mulsf3x>:
 a6e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 a72:	70 f3       	brcs	.-36     	; 0xa50 <__mulsf3+0x8>

00000a74 <__mulsf3_pse>:
 a74:	95 9f       	mul	r25, r21
 a76:	c1 f3       	breq	.-16     	; 0xa68 <__mulsf3+0x20>
 a78:	95 0f       	add	r25, r21
 a7a:	50 e0       	ldi	r21, 0x00	; 0
 a7c:	55 1f       	adc	r21, r21
 a7e:	62 9f       	mul	r22, r18
 a80:	f0 01       	movw	r30, r0
 a82:	72 9f       	mul	r23, r18
 a84:	bb 27       	eor	r27, r27
 a86:	f0 0d       	add	r31, r0
 a88:	b1 1d       	adc	r27, r1
 a8a:	63 9f       	mul	r22, r19
 a8c:	aa 27       	eor	r26, r26
 a8e:	f0 0d       	add	r31, r0
 a90:	b1 1d       	adc	r27, r1
 a92:	aa 1f       	adc	r26, r26
 a94:	64 9f       	mul	r22, r20
 a96:	66 27       	eor	r22, r22
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	66 1f       	adc	r22, r22
 a9e:	82 9f       	mul	r24, r18
 aa0:	22 27       	eor	r18, r18
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	62 1f       	adc	r22, r18
 aa8:	73 9f       	mul	r23, r19
 aaa:	b0 0d       	add	r27, r0
 aac:	a1 1d       	adc	r26, r1
 aae:	62 1f       	adc	r22, r18
 ab0:	83 9f       	mul	r24, r19
 ab2:	a0 0d       	add	r26, r0
 ab4:	61 1d       	adc	r22, r1
 ab6:	22 1f       	adc	r18, r18
 ab8:	74 9f       	mul	r23, r20
 aba:	33 27       	eor	r19, r19
 abc:	a0 0d       	add	r26, r0
 abe:	61 1d       	adc	r22, r1
 ac0:	23 1f       	adc	r18, r19
 ac2:	84 9f       	mul	r24, r20
 ac4:	60 0d       	add	r22, r0
 ac6:	21 1d       	adc	r18, r1
 ac8:	82 2f       	mov	r24, r18
 aca:	76 2f       	mov	r23, r22
 acc:	6a 2f       	mov	r22, r26
 ace:	11 24       	eor	r1, r1
 ad0:	9f 57       	subi	r25, 0x7F	; 127
 ad2:	50 40       	sbci	r21, 0x00	; 0
 ad4:	9a f0       	brmi	.+38     	; 0xafc <__mulsf3_pse+0x88>
 ad6:	f1 f0       	breq	.+60     	; 0xb14 <__mulsf3_pse+0xa0>
 ad8:	88 23       	and	r24, r24
 ada:	4a f0       	brmi	.+18     	; 0xaee <__mulsf3_pse+0x7a>
 adc:	ee 0f       	add	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	bb 1f       	adc	r27, r27
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	a9 f7       	brne	.-22     	; 0xad8 <__mulsf3_pse+0x64>
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	51 05       	cpc	r21, r1
 af2:	80 f0       	brcs	.+32     	; 0xb14 <__mulsf3_pse+0xa0>
 af4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_inf>
 af8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	e4 f3       	brlt	.-8      	; 0xaf8 <__mulsf3_pse+0x84>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	d4 f3       	brlt	.-12     	; 0xaf8 <__mulsf3_pse+0x84>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	e7 95       	ror	r30
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c1 f7       	brne	.-16     	; 0xb04 <__mulsf3_pse+0x90>
 b14:	fe 2b       	or	r31, r30
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <__fp_inf>:
 b22:	97 f9       	bld	r25, 7
 b24:	9f 67       	ori	r25, 0x7F	; 127
 b26:	80 e8       	ldi	r24, 0x80	; 128
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	60 e0       	ldi	r22, 0x00	; 0
 b2c:	08 95       	ret

00000b2e <__fp_nan>:
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	80 ec       	ldi	r24, 0xC0	; 192
 b32:	08 95       	ret

00000b34 <__fp_pscA>:
 b34:	00 24       	eor	r0, r0
 b36:	0a 94       	dec	r0
 b38:	16 16       	cp	r1, r22
 b3a:	17 06       	cpc	r1, r23
 b3c:	18 06       	cpc	r1, r24
 b3e:	09 06       	cpc	r0, r25
 b40:	08 95       	ret

00000b42 <__fp_pscB>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	05 06       	cpc	r0, r21
 b4e:	08 95       	ret

00000b50 <__fp_round>:
 b50:	09 2e       	mov	r0, r25
 b52:	03 94       	inc	r0
 b54:	00 0c       	add	r0, r0
 b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0xc>
 b58:	88 23       	and	r24, r24
 b5a:	52 f0       	brmi	.+20     	; 0xb70 <__fp_round+0x20>
 b5c:	bb 0f       	add	r27, r27
 b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fp_round+0x20>
 b60:	bf 2b       	or	r27, r31
 b62:	11 f4       	brne	.+4      	; 0xb68 <__fp_round+0x18>
 b64:	60 ff       	sbrs	r22, 0
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__fp_round+0x20>
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <_exit>:
 b72:	f8 94       	cli

00000b74 <__stop_program>:
 b74:	ff cf       	rjmp	.-2      	; 0xb74 <__stop_program>
