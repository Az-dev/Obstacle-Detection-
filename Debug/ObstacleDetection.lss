
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800082  00800082  000007b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c02  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1c  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000874  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080c  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_9>
  28:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_10>
  2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	78 94       	sei
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b6:	04 b6       	in	r0, 0x34	; 52
  b8:	06 fe       	sbrs	r0, 6
  ba:	12 c0       	rjmp	.+36     	; 0xe0 <__vector_3+0x4e>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  cc:	84 b7       	in	r24, 0x34	; 52
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d2:	8a b7       	in	r24, 0x3a	; 58
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	1f c0       	rjmp	.+62     	; 0x11e <__vector_3+0x8c>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  e0:	04 b6       	in	r0, 0x34	; 52
  e2:	06 fc       	sbrc	r0, 6
  e4:	1c c0       	rjmp	.+56     	; 0x11e <__vector_3+0x8c>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ec:	62 e8       	ldi	r22, 0x82	; 130
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 16 01 	call	0x22c	; 0x22c <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	8f 7d       	andi	r24, 0xDF	; 223
 10a:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10c:	84 b7       	in	r24, 0x34	; 52
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 112:	8a b7       	in	r24, 0x3a	; 58
 114:	80 62       	ori	r24, 0x20	; 32
 116:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
#include "APP/CarSM/CarSM.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   //TimerTest(); /* ---> test passed*/
   TmuTest();
 140:	0e 94 48 02 	call	0x490	; 0x490 <TmuTest>
   /*------------------- START CAR APPLICATION  ------------------------*/
   //Car_SM_Init();
   //Car_SM_Update();
   /*------------------- END CAR APPLICATION   ------------------------*/ 
    
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <Timer_Init>:
   }
   else
   {
      return E_NOK;
   }
}
 14a:	fc 01       	movw	r30, r24
 14c:	89 2b       	or	r24, r25
 14e:	71 f1       	breq	.+92     	; 0x1ac <Timer_Init+0x62>
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 05       	cpc	r25, r1
 158:	61 f0       	breq	.+24     	; 0x172 <Timer_Init+0x28>
 15a:	18 f0       	brcs	.+6      	; 0x162 <Timer_Init+0x18>
 15c:	02 97       	sbiw	r24, 0x02	; 2
 15e:	c1 f0       	breq	.+48     	; 0x190 <Timer_Init+0x46>
 160:	1e c0       	rjmp	.+60     	; 0x19e <Timer_Init+0x54>
 162:	93 b7       	in	r25, 0x33	; 51
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	89 2b       	or	r24, r25
 168:	83 bf       	out	0x33, r24	; 51
 16a:	86 81       	ldd	r24, Z+6	; 0x06
 16c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu8_t0Prescaler>
 170:	16 c0       	rjmp	.+44     	; 0x19e <Timer_Init+0x54>
 172:	2e b5       	in	r18, 0x2e	; 46
 174:	3f b5       	in	r19, 0x2f	; 47
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	93 81       	ldd	r25, Z+3	; 0x03
 17a:	82 2b       	or	r24, r18
 17c:	93 2b       	or	r25, r19
 17e:	9f bd       	out	0x2f, r25	; 47
 180:	8e bd       	out	0x2e, r24	; 46
 182:	86 81       	ldd	r24, Z+6	; 0x06
 184:	97 81       	ldd	r25, Z+7	; 0x07
 186:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <gu16_t1Prescaler+0x1>
 18a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu16_t1Prescaler>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <Timer_Init+0x54>
 190:	95 b5       	in	r25, 0x25	; 37
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	89 2b       	or	r24, r25
 196:	85 bd       	out	0x25, r24	; 37
 198:	86 81       	ldd	r24, Z+6	; 0x06
 19a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <gu8_t2Prescaler>
 19e:	78 94       	sei
 1a0:	99 b7       	in	r25, 0x39	; 57
 1a2:	80 85       	ldd	r24, Z+8	; 0x08
 1a4:	89 2b       	or	r24, r25
 1a6:	89 bf       	out	0x39, r24	; 57
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret

000001b0 <Timer_Start>:
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	59 f0       	breq	.+22     	; 0x1ca <Timer_Start+0x1a>
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <Timer_Start+0xc>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <Timer_Start+0x30>
 1ba:	18 c0       	rjmp	.+48     	; 0x1ec <Timer_Start+0x3c>
 1bc:	62 bf       	out	0x32, r22	; 50
 1be:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gu8_t0Prescaler>
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	89 2b       	or	r24, r25
 1c6:	83 bf       	out	0x33, r24	; 51
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <Timer_Start+0x3c>
 1ca:	77 27       	eor	r23, r23
 1cc:	7d bd       	out	0x2d, r23	; 45
 1ce:	6c bd       	out	0x2c, r22	; 44
 1d0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gu16_t1Prescaler>
 1d4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <gu16_t1Prescaler+0x1>
 1d8:	9e b5       	in	r25, 0x2e	; 46
 1da:	89 2b       	or	r24, r25
 1dc:	8e bd       	out	0x2e, r24	; 46
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <Timer_Start+0x3c>
 1e0:	64 bd       	out	0x24, r22	; 36
 1e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gu8_t2Prescaler>
 1e6:	85 b5       	in	r24, 0x25	; 37
 1e8:	89 2b       	or	r24, r25
 1ea:	85 bd       	out	0x25, r24	; 37
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <Timer_Stop>:
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	39 f0       	breq	.+14     	; 0x202 <Timer_Stop+0x12>
 1f4:	18 f0       	brcs	.+6      	; 0x1fc <Timer_Stop+0xc>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	39 f0       	breq	.+14     	; 0x208 <Timer_Stop+0x18>
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <Timer_Stop+0x1c>
 1fc:	83 b7       	in	r24, 0x33	; 51
 1fe:	13 be       	out	0x33, r1	; 51
 200:	05 c0       	rjmp	.+10     	; 0x20c <Timer_Stop+0x1c>
 202:	8e b5       	in	r24, 0x2e	; 46
 204:	1e bc       	out	0x2e, r1	; 46
 206:	02 c0       	rjmp	.+4      	; 0x20c <Timer_Stop+0x1c>
 208:	85 b5       	in	r24, 0x25	; 37
 20a:	15 bc       	out	0x25, r1	; 37
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <Timer_SetValue>:
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	31 f0       	breq	.+12     	; 0x220 <Timer_SetValue+0x10>
 214:	18 f0       	brcs	.+6      	; 0x21c <Timer_SetValue+0xc>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	31 f0       	breq	.+12     	; 0x226 <Timer_SetValue+0x16>
 21a:	06 c0       	rjmp	.+12     	; 0x228 <Timer_SetValue+0x18>
 21c:	62 bf       	out	0x32, r22	; 50
 21e:	04 c0       	rjmp	.+8      	; 0x228 <Timer_SetValue+0x18>
 220:	7d bd       	out	0x2d, r23	; 45
 222:	6c bd       	out	0x2c, r22	; 44
 224:	01 c0       	rjmp	.+2      	; 0x228 <Timer_SetValue+0x18>
 226:	64 bd       	out	0x24, r22	; 36
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <Timer_GetValue>:
 22c:	61 15       	cp	r22, r1
 22e:	71 05       	cpc	r23, r1
 230:	d9 f0       	breq	.+54     	; 0x268 <Timer_GetValue+0x3c>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	59 f0       	breq	.+22     	; 0x24c <Timer_GetValue+0x20>
 236:	18 f0       	brcs	.+6      	; 0x23e <Timer_GetValue+0x12>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	79 f0       	breq	.+30     	; 0x25a <Timer_GetValue+0x2e>
 23c:	17 c0       	rjmp	.+46     	; 0x26c <Timer_GetValue+0x40>
 23e:	82 b7       	in	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fb 01       	movw	r30, r22
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	8c b5       	in	r24, 0x2c	; 44
 24e:	9d b5       	in	r25, 0x2d	; 45
 250:	fb 01       	movw	r30, r22
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fb 01       	movw	r30, r22
 260:	91 83       	std	Z+1, r25	; 0x01
 262:	80 83       	st	Z, r24
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

00000270 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 270:	78 94       	sei
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
 284:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 288:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 28c:	82 bf       	out	0x32, r24	; 50
/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 28e:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <gu16_preloader>
 292:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	82 1b       	sub	r24, r18
 29c:	93 0b       	sbc	r25, r19
 29e:	82 bf       	out	0x32, r24	; 50
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_0 , gu16_preloader);
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */
   PORTB_DIR = 0xff;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	80 95       	com	r24
 2a8:	88 bb       	out	0x18, r24	; 24
   
}
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_9>:

ISR_TIMER1_OVF(){
 2bc:	78 94       	sei
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
 2cc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 2d0:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 2d4:	9d bd       	out	0x2d, r25	; 45
 2d6:	8c bd       	out	0x2c, r24	; 44

ISR_TIMER1_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));   
 2d8:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 2dc:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
 2e0:	91 95       	neg	r25
 2e2:	81 95       	neg	r24
 2e4:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 2e6:	9d bd       	out	0x2d, r25	; 45
 2e8:	8c bd       	out	0x2c, r24	; 44
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_1 , gu16_preloader);
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */
   PORTB_DIR = 0xff;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	80 95       	com	r24
 2f2:	88 bb       	out	0x18, r24	; 24
   
}
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_5>:

ISR_TIMER2_OVF(){
 302:	78 94       	sei
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
 316:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 31a:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 31e:	84 bd       	out	0x24, r24	; 36

ISR_TIMER2_OVF(){
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 320:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <gu16_preloader>
 324:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	84 bd       	out	0x24, r24	; 36
   /* 1 - Reload TCNT ---*/
   Timer_SetValue(TIMER_2 , gu16_preloader);
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
   /* 2 - Increment Global tick counter --*/   
   /* Debug Point */  
   PORTB_DIR = 0xff;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA ^= 0xff;
 336:	88 b3       	in	r24, 0x18	; 24
 338:	80 95       	com	r24
 33a:	88 bb       	out	0x18, r24	; 24
   
}
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_10>:



ISR_TIMER0_COMP(){
 34e:	78 94       	sei
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <TMU_Init>:
*  @param  const strTMU_Cfg_t *  strTMU_Init
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Init(const strTMU_Cfg_t * strTMU_Init)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strTMU_Init)
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	09 f4       	brne	.+2      	; 0x36e <TMU_Init+0xa>
 36c:	85 c0       	rjmp	.+266    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 36e:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strTMU_Init->timer_channel)
 370:	88 81       	ld	r24, Y
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	79 f1       	breq	.+94     	; 0x3d4 <TMU_Init+0x70>
 376:	20 f0       	brcs	.+8      	; 0x380 <TMU_Init+0x1c>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	09 f4       	brne	.+2      	; 0x37e <TMU_Init+0x1a>
 37c:	54 c0       	rjmp	.+168    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 37e:	7e c0       	rjmp	.+252    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
      {
         case TIMER_0:
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0TmuConfig);
 380:	84 e7       	ldi	r24, 0x74	; 116
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
 388:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gstrTimer0TmuConfig+0x6>
 38c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gstrTimer0TmuConfig+0x7>
 390:	05 97       	sbiw	r24, 0x05	; 5
 392:	09 f0       	breq	.+2      	; 0x396 <TMU_Init+0x32>
 394:	75 c0       	rjmp	.+234    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
               break;
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 396:	69 81       	ldd	r22, Y+1	; 0x01
 398:	7a 81       	ldd	r23, Y+2	; 0x02
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 81 02 	call	0x502	; 0x502 <__floatunsisf>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4a e7       	ldi	r20, 0x7A	; 122
 3a8:	51 e4       	ldi	r21, 0x41	; 65
 3aa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__mulsf3>
 3ae:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fixunssfsi>
 3b2:	70 93 8a 00 	sts	0x008A, r23	; 0x80008a <gu16_preloader+0x1>
 3b6:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <gu16_preloader>
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
 3ba:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 3be:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	71 e0       	ldi	r23, 0x01	; 1
 3c6:	68 1b       	sub	r22, r24
 3c8:	79 0b       	sbc	r23, r25
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 3d0:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
               break;               
 3d2:	5b c0       	rjmp	.+182    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
            }            
         break;
         case TIMER_1:
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1TmuConfig);
 3d4:	8a e6       	ldi	r24, 0x6A	; 106
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
 3dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gstrTimer1TmuConfig+0x6>
 3e0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gstrTimer1TmuConfig+0x7>
 3e4:	05 97       	sbiw	r24, 0x05	; 5
 3e6:	09 f0       	breq	.+2      	; 0x3ea <TMU_Init+0x86>
 3e8:	4d c0       	rjmp	.+154    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
               break;
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 3ea:	69 81       	ldd	r22, Y+1	; 0x01
 3ec:	7a 81       	ldd	r23, Y+2	; 0x02
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 81 02 	call	0x502	; 0x502 <__floatunsisf>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	4a e7       	ldi	r20, 0x7A	; 122
 3fc:	51 e4       	ldi	r21, 0x41	; 65
 3fe:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__mulsf3>
 402:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fixunssfsi>
 406:	70 93 8a 00 	sts	0x008A, r23	; 0x80008a <gu16_preloader+0x1>
 40a:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <gu16_preloader>
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
 40e:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <gu16_preloader>
 412:	70 91 8a 00 	lds	r23, 0x008A	; 0x80008a <gu16_preloader+0x1>
 416:	71 95       	neg	r23
 418:	61 95       	neg	r22
 41a:	71 09       	sbc	r23, r1
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 422:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
               break;
 424:	32 c0       	rjmp	.+100    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
            }
         break;
         case TIMER_2:
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2TmuConfig);
 426:	80 e6       	ldi	r24, 0x60	; 96
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 a5 00 	call	0x14a	; 0x14a <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
 42e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 432:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 436:	07 97       	sbiw	r24, 0x07	; 7
 438:	39 f5       	brne	.+78     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
               break;
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 43a:	69 81       	ldd	r22, Y+1	; 0x01
 43c:	7a 81       	ldd	r23, Y+2	; 0x02
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 81 02 	call	0x502	; 0x502 <__floatunsisf>
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	4a e7       	ldi	r20, 0x7A	; 122
 44c:	51 e4       	ldi	r21, 0x41	; 65
 44e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__mulsf3>
 452:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fixunssfsi>
 456:	70 93 8a 00 	sts	0x008A, r23	; 0x80008a <gu16_preloader+0x1>
 45a:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <gu16_preloader>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
 45e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu16_preloader>
 462:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <gu16_preloader+0x1>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	71 e0       	ldi	r23, 0x01	; 1
 46a:	68 1b       	sub	r22, r24
 46c:	79 0b       	sbc	r23, r25
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	0e 94 08 01 	call	0x210	; 0x210 <Timer_SetValue>
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 474:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
 476:	09 c0       	rjmp	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
            }
         break;
      }
      au8_errorState = INIT_OK;      
   }else{
      au8_errorState = INIT_NOK;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	03 c0       	rjmp	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	01 c0       	rjmp	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <TmuTest>:
*/
void TmuTest(void)
{
   
   /* Testing TMU Init */
   TMU_Init(&gstrTMUConfig); // ---> success with different configurations , tested timer_setVal and asserted the TCNT value for different timers
 490:	8e e7       	ldi	r24, 0x7E	; 126
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 b2 01 	call	0x364	; 0x364 <TMU_Init>
   Timer_Start(TIMER_1,0);   
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer_Start>
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <TmuTest+0x12>

000004a4 <__fixunssfsi>:
 4a4:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_splitA>
 4a8:	88 f0       	brcs	.+34     	; 0x4cc <__fixunssfsi+0x28>
 4aa:	9f 57       	subi	r25, 0x7F	; 127
 4ac:	98 f0       	brcs	.+38     	; 0x4d4 <__fixunssfsi+0x30>
 4ae:	b9 2f       	mov	r27, r25
 4b0:	99 27       	eor	r25, r25
 4b2:	b7 51       	subi	r27, 0x17	; 23
 4b4:	b0 f0       	brcs	.+44     	; 0x4e2 <__fixunssfsi+0x3e>
 4b6:	e1 f0       	breq	.+56     	; 0x4f0 <__fixunssfsi+0x4c>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	1a f0       	brmi	.+6      	; 0x4c8 <__fixunssfsi+0x24>
 4c2:	ba 95       	dec	r27
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__fixunssfsi+0x14>
 4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <__fixunssfsi+0x4c>
 4c8:	b1 30       	cpi	r27, 0x01	; 1
 4ca:	91 f0       	breq	.+36     	; 0x4f0 <__fixunssfsi+0x4c>
 4cc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_zero>
 4d0:	b1 e0       	ldi	r27, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_zero>
 4d8:	67 2f       	mov	r22, r23
 4da:	78 2f       	mov	r23, r24
 4dc:	88 27       	eor	r24, r24
 4de:	b8 5f       	subi	r27, 0xF8	; 248
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <__fixunssfsi+0x4c>
 4e2:	b9 3f       	cpi	r27, 0xF9	; 249
 4e4:	cc f3       	brlt	.-14     	; 0x4d8 <__fixunssfsi+0x34>
 4e6:	86 95       	lsr	r24
 4e8:	77 95       	ror	r23
 4ea:	67 95       	ror	r22
 4ec:	b3 95       	inc	r27
 4ee:	d9 f7       	brne	.-10     	; 0x4e6 <__fixunssfsi+0x42>
 4f0:	3e f4       	brtc	.+14     	; 0x500 <__fixunssfsi+0x5c>
 4f2:	90 95       	com	r25
 4f4:	80 95       	com	r24
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <__floatunsisf>:
 502:	e8 94       	clt
 504:	09 c0       	rjmp	.+18     	; 0x518 <__floatsisf+0x12>

00000506 <__floatsisf>:
 506:	97 fb       	bst	r25, 7
 508:	3e f4       	brtc	.+14     	; 0x518 <__floatsisf+0x12>
 50a:	90 95       	com	r25
 50c:	80 95       	com	r24
 50e:	70 95       	com	r23
 510:	61 95       	neg	r22
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	8f 4f       	sbci	r24, 0xFF	; 255
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	99 23       	and	r25, r25
 51a:	a9 f0       	breq	.+42     	; 0x546 <__floatsisf+0x40>
 51c:	f9 2f       	mov	r31, r25
 51e:	96 e9       	ldi	r25, 0x96	; 150
 520:	bb 27       	eor	r27, r27
 522:	93 95       	inc	r25
 524:	f6 95       	lsr	r31
 526:	87 95       	ror	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b7 95       	ror	r27
 52e:	f1 11       	cpse	r31, r1
 530:	f8 cf       	rjmp	.-16     	; 0x522 <__floatsisf+0x1c>
 532:	fa f4       	brpl	.+62     	; 0x572 <__floatsisf+0x6c>
 534:	bb 0f       	add	r27, r27
 536:	11 f4       	brne	.+4      	; 0x53c <__floatsisf+0x36>
 538:	60 ff       	sbrs	r22, 0
 53a:	1b c0       	rjmp	.+54     	; 0x572 <__floatsisf+0x6c>
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	16 c0       	rjmp	.+44     	; 0x572 <__floatsisf+0x6c>
 546:	88 23       	and	r24, r24
 548:	11 f0       	breq	.+4      	; 0x54e <__floatsisf+0x48>
 54a:	96 e9       	ldi	r25, 0x96	; 150
 54c:	11 c0       	rjmp	.+34     	; 0x570 <__floatsisf+0x6a>
 54e:	77 23       	and	r23, r23
 550:	21 f0       	breq	.+8      	; 0x55a <__floatsisf+0x54>
 552:	9e e8       	ldi	r25, 0x8E	; 142
 554:	87 2f       	mov	r24, r23
 556:	76 2f       	mov	r23, r22
 558:	05 c0       	rjmp	.+10     	; 0x564 <__floatsisf+0x5e>
 55a:	66 23       	and	r22, r22
 55c:	71 f0       	breq	.+28     	; 0x57a <__floatsisf+0x74>
 55e:	96 e8       	ldi	r25, 0x86	; 134
 560:	86 2f       	mov	r24, r22
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	2a f0       	brmi	.+10     	; 0x572 <__floatsisf+0x6c>
 568:	9a 95       	dec	r25
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	da f7       	brpl	.-10     	; 0x568 <__floatsisf+0x62>
 572:	88 0f       	add	r24, r24
 574:	96 95       	lsr	r25
 576:	87 95       	ror	r24
 578:	97 f9       	bld	r25, 7
 57a:	08 95       	ret

0000057c <__fp_split3>:
 57c:	57 fd       	sbrc	r21, 7
 57e:	90 58       	subi	r25, 0x80	; 128
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	59 f0       	breq	.+22     	; 0x59c <__fp_splitA+0x10>
 586:	5f 3f       	cpi	r21, 0xFF	; 255
 588:	71 f0       	breq	.+28     	; 0x5a6 <__fp_splitA+0x1a>
 58a:	47 95       	ror	r20

0000058c <__fp_splitA>:
 58c:	88 0f       	add	r24, r24
 58e:	97 fb       	bst	r25, 7
 590:	99 1f       	adc	r25, r25
 592:	61 f0       	breq	.+24     	; 0x5ac <__fp_splitA+0x20>
 594:	9f 3f       	cpi	r25, 0xFF	; 255
 596:	79 f0       	breq	.+30     	; 0x5b6 <__fp_splitA+0x2a>
 598:	87 95       	ror	r24
 59a:	08 95       	ret
 59c:	12 16       	cp	r1, r18
 59e:	13 06       	cpc	r1, r19
 5a0:	14 06       	cpc	r1, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	f2 cf       	rjmp	.-28     	; 0x58a <__fp_split3+0xe>
 5a6:	46 95       	lsr	r20
 5a8:	f1 df       	rcall	.-30     	; 0x58c <__fp_splitA>
 5aa:	08 c0       	rjmp	.+16     	; 0x5bc <__fp_splitA+0x30>
 5ac:	16 16       	cp	r1, r22
 5ae:	17 06       	cpc	r1, r23
 5b0:	18 06       	cpc	r1, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	f1 cf       	rjmp	.-30     	; 0x598 <__fp_splitA+0xc>
 5b6:	86 95       	lsr	r24
 5b8:	71 05       	cpc	r23, r1
 5ba:	61 05       	cpc	r22, r1
 5bc:	08 94       	sec
 5be:	08 95       	ret

000005c0 <__fp_zero>:
 5c0:	e8 94       	clt

000005c2 <__fp_szero>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	66 27       	eor	r22, r22
 5c6:	77 27       	eor	r23, r23
 5c8:	cb 01       	movw	r24, r22
 5ca:	97 f9       	bld	r25, 7
 5cc:	08 95       	ret

000005ce <__mulsf3>:
 5ce:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__mulsf3x>
 5d2:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_round>
 5d6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscA>
 5da:	38 f0       	brcs	.+14     	; 0x5ea <__mulsf3+0x1c>
 5dc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_pscB>
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <__mulsf3+0x1c>
 5e2:	95 23       	and	r25, r21
 5e4:	11 f0       	breq	.+4      	; 0x5ea <__mulsf3+0x1c>
 5e6:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_inf>
 5ea:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_nan>
 5ee:	11 24       	eor	r1, r1
 5f0:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_szero>

000005f4 <__mulsf3x>:
 5f4:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_split3>
 5f8:	70 f3       	brcs	.-36     	; 0x5d6 <__mulsf3+0x8>

000005fa <__mulsf3_pse>:
 5fa:	95 9f       	mul	r25, r21
 5fc:	c1 f3       	breq	.-16     	; 0x5ee <__mulsf3+0x20>
 5fe:	95 0f       	add	r25, r21
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	55 1f       	adc	r21, r21
 604:	62 9f       	mul	r22, r18
 606:	f0 01       	movw	r30, r0
 608:	72 9f       	mul	r23, r18
 60a:	bb 27       	eor	r27, r27
 60c:	f0 0d       	add	r31, r0
 60e:	b1 1d       	adc	r27, r1
 610:	63 9f       	mul	r22, r19
 612:	aa 27       	eor	r26, r26
 614:	f0 0d       	add	r31, r0
 616:	b1 1d       	adc	r27, r1
 618:	aa 1f       	adc	r26, r26
 61a:	64 9f       	mul	r22, r20
 61c:	66 27       	eor	r22, r22
 61e:	b0 0d       	add	r27, r0
 620:	a1 1d       	adc	r26, r1
 622:	66 1f       	adc	r22, r22
 624:	82 9f       	mul	r24, r18
 626:	22 27       	eor	r18, r18
 628:	b0 0d       	add	r27, r0
 62a:	a1 1d       	adc	r26, r1
 62c:	62 1f       	adc	r22, r18
 62e:	73 9f       	mul	r23, r19
 630:	b0 0d       	add	r27, r0
 632:	a1 1d       	adc	r26, r1
 634:	62 1f       	adc	r22, r18
 636:	83 9f       	mul	r24, r19
 638:	a0 0d       	add	r26, r0
 63a:	61 1d       	adc	r22, r1
 63c:	22 1f       	adc	r18, r18
 63e:	74 9f       	mul	r23, r20
 640:	33 27       	eor	r19, r19
 642:	a0 0d       	add	r26, r0
 644:	61 1d       	adc	r22, r1
 646:	23 1f       	adc	r18, r19
 648:	84 9f       	mul	r24, r20
 64a:	60 0d       	add	r22, r0
 64c:	21 1d       	adc	r18, r1
 64e:	82 2f       	mov	r24, r18
 650:	76 2f       	mov	r23, r22
 652:	6a 2f       	mov	r22, r26
 654:	11 24       	eor	r1, r1
 656:	9f 57       	subi	r25, 0x7F	; 127
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	9a f0       	brmi	.+38     	; 0x682 <__mulsf3_pse+0x88>
 65c:	f1 f0       	breq	.+60     	; 0x69a <__mulsf3_pse+0xa0>
 65e:	88 23       	and	r24, r24
 660:	4a f0       	brmi	.+18     	; 0x674 <__mulsf3_pse+0x7a>
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	bb 1f       	adc	r27, r27
 668:	66 1f       	adc	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	50 40       	sbci	r21, 0x00	; 0
 672:	a9 f7       	brne	.-22     	; 0x65e <__mulsf3_pse+0x64>
 674:	9e 3f       	cpi	r25, 0xFE	; 254
 676:	51 05       	cpc	r21, r1
 678:	80 f0       	brcs	.+32     	; 0x69a <__mulsf3_pse+0xa0>
 67a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_inf>
 67e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_szero>
 682:	5f 3f       	cpi	r21, 0xFF	; 255
 684:	e4 f3       	brlt	.-8      	; 0x67e <__mulsf3_pse+0x84>
 686:	98 3e       	cpi	r25, 0xE8	; 232
 688:	d4 f3       	brlt	.-12     	; 0x67e <__mulsf3_pse+0x84>
 68a:	86 95       	lsr	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b7 95       	ror	r27
 692:	f7 95       	ror	r31
 694:	e7 95       	ror	r30
 696:	9f 5f       	subi	r25, 0xFF	; 255
 698:	c1 f7       	brne	.-16     	; 0x68a <__mulsf3_pse+0x90>
 69a:	fe 2b       	or	r31, r30
 69c:	88 0f       	add	r24, r24
 69e:	91 1d       	adc	r25, r1
 6a0:	96 95       	lsr	r25
 6a2:	87 95       	ror	r24
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret

000006a8 <__fp_inf>:
 6a8:	97 f9       	bld	r25, 7
 6aa:	9f 67       	ori	r25, 0x7F	; 127
 6ac:	80 e8       	ldi	r24, 0x80	; 128
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	08 95       	ret

000006b4 <__fp_nan>:
 6b4:	9f ef       	ldi	r25, 0xFF	; 255
 6b6:	80 ec       	ldi	r24, 0xC0	; 192
 6b8:	08 95       	ret

000006ba <__fp_pscA>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	16 16       	cp	r1, r22
 6c0:	17 06       	cpc	r1, r23
 6c2:	18 06       	cpc	r1, r24
 6c4:	09 06       	cpc	r0, r25
 6c6:	08 95       	ret

000006c8 <__fp_pscB>:
 6c8:	00 24       	eor	r0, r0
 6ca:	0a 94       	dec	r0
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	14 06       	cpc	r1, r20
 6d2:	05 06       	cpc	r0, r21
 6d4:	08 95       	ret

000006d6 <__fp_round>:
 6d6:	09 2e       	mov	r0, r25
 6d8:	03 94       	inc	r0
 6da:	00 0c       	add	r0, r0
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <__fp_round+0xc>
 6de:	88 23       	and	r24, r24
 6e0:	52 f0       	brmi	.+20     	; 0x6f6 <__fp_round+0x20>
 6e2:	bb 0f       	add	r27, r27
 6e4:	40 f4       	brcc	.+16     	; 0x6f6 <__fp_round+0x20>
 6e6:	bf 2b       	or	r27, r31
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__fp_round+0x18>
 6ea:	60 ff       	sbrs	r22, 0
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__fp_round+0x20>
 6ee:	6f 5f       	subi	r22, 0xFF	; 255
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
