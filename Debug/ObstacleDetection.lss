
ObstacleDetection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000009dc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00800084  00800084  00000a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002990  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e94  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b6  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  00005854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f56  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa0  00000000  00000000  00006da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007d42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_9>
  28:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_10>
  2c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_11>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_12>
  34:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3d       	cpi	r26, 0xDE	; 222
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8a:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
   return E_OK;
}

/*** INT2 ISR **********************************************************************************************************************/
ISR_INT2()
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
  b4:	04 b6       	in	r0, 0x34	; 52
  b6:	06 fe       	sbrs	r0, 6
  b8:	12 c0       	rjmp	.+36     	; 0xde <__vector_3+0x4c>
   {
      /** Debug Point **/
      //PORTB_DATA |= 1<<5 ;      
      /*---------------*/           
      /*-- Start timer2 -------------------*/
      Timer_Start(TIMER_2,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Timer_Start>
      /*-- Change edge Procedure ----------*/
      /* 1 - Disable INT2 -----------------*/
      GICR &= ~(BIT5);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (0) : that will fire INT2 on falling edge --*/
      MCUCSR &= (~BIT6);
  ca:	84 b7       	in	r24, 0x34	; 52
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1 --*/
      GIFR |= BIT5;
  d0:	8a b7       	in	r24, 0x3a	; 58
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2 --*/
      GICR |= (BIT5);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	1f c0       	rjmp	.+62     	; 0x11c <__vector_3+0x8a>
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<5 ;
      /*---------------*/                        
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
  de:	04 b6       	in	r0, 0x34	; 52
  e0:	06 fc       	sbrc	r0, 6
  e2:	1c c0       	rjmp	.+56     	; 0x11c <__vector_3+0x8a>
   {
      /** Debug Point **/      
      //PORTB_DATA = 1<<4 ;      
      /*---------------*/
      /*stop timer counter*/
      Timer_Stop(TIMER_2);      
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 1e 01 	call	0x23c	; 0x23c <Timer_Stop>
      /*read TCNT2*/
      Timer_GetValue(TIMER_2,(uint16_t *)&gu16_Icu_Time);
  ea:	64 e8       	ldi	r22, 0x84	; 132
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 3c 01 	call	0x278	; 0x278 <Timer_GetValue>
      /*-- Set gu8_onFallPulseCapture_flag for 1 (to start reading time of the counted value) --*/
      gu8_onFallPulseCapture_flag = 1;      
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu8_onFallPulseCapture_flag>
      /*Reset TCNT2*/
      Timer_SetValue(TIMER_2,0);          
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 2e 01 	call	0x25c	; 0x25c <Timer_SetValue>
      /*------ change edge -----*/      
      /* 1 - Disable INT2 */
      GICR &= ~(BIT5);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	8b bf       	out	0x3b, r24	; 59
      /* 2 - Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);
 10a:	84 b7       	in	r24, 0x34	; 52
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	84 bf       	out	0x34, r24	; 52
      /* 3 - Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 110:	8a b7       	in	r24, 0x3a	; 58
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8a bf       	out	0x3a, r24	; 58
      /* 4 - Enable INT2*/
      GICR |= (BIT5);
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8b bf       	out	0x3b, r24	; 59
      /** Debug Point **/
      //softwareDelayMs(5);
      //PORTB_DATA |= 0<<4 ;
      /*---------------*/
   }     
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <main>:
#include "APP/BCM_BasedApp/BCM_Based.h"
/*- Main FUNCTION DEFINITION ---------------------------------------------------------------------------------------------------*/
int main(void)
{
   /*------------------- START TMU APPLICATION  ------------------------*/
   TmuTest();
 13e:	0e 94 9b 03 	call	0x736	; 0x736 <TmuTest>
   //BCM_Receive();   /* Burn its hex on slave */
   /*--------------------- End BCM test -------------------------------*/
   
   
       
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <__vector_12>:
}


/*--------------------------------------------- ISR CONTROL ------------------------------------------------------*/
ISR_SPI()
{ 
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
   /* Raise transmission complete flag */
   //gu8_transmissionComplete = 1;
   /* Call call_back() */
   call_back();
 16a:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <call_back>
 16e:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <call_back+0x1>
 172:	09 95       	icall
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <Timer_Init>:
   }
   else
   {
      return E_NOK;
   }
}
 196:	fc 01       	movw	r30, r24
 198:	89 2b       	or	r24, r25
 19a:	71 f1       	breq	.+92     	; 0x1f8 <Timer_Init+0x62>
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 05       	cpc	r25, r1
 1a4:	61 f0       	breq	.+24     	; 0x1be <Timer_Init+0x28>
 1a6:	18 f0       	brcs	.+6      	; 0x1ae <Timer_Init+0x18>
 1a8:	02 97       	sbiw	r24, 0x02	; 2
 1aa:	c1 f0       	breq	.+48     	; 0x1dc <Timer_Init+0x46>
 1ac:	1e c0       	rjmp	.+60     	; 0x1ea <Timer_Init+0x54>
 1ae:	93 b7       	in	r25, 0x33	; 51
 1b0:	82 81       	ldd	r24, Z+2	; 0x02
 1b2:	89 2b       	or	r24, r25
 1b4:	83 bf       	out	0x33, r24	; 51
 1b6:	86 81       	ldd	r24, Z+6	; 0x06
 1b8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <gu8_t0Prescaler>
 1bc:	16 c0       	rjmp	.+44     	; 0x1ea <Timer_Init+0x54>
 1be:	2e b5       	in	r18, 0x2e	; 46
 1c0:	3f b5       	in	r19, 0x2f	; 47
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	93 81       	ldd	r25, Z+3	; 0x03
 1c6:	82 2b       	or	r24, r18
 1c8:	93 2b       	or	r25, r19
 1ca:	9f bd       	out	0x2f, r25	; 47
 1cc:	8e bd       	out	0x2e, r24	; 46
 1ce:	86 81       	ldd	r24, Z+6	; 0x06
 1d0:	97 81       	ldd	r25, Z+7	; 0x07
 1d2:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <gu16_t1Prescaler+0x1>
 1d6:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <gu16_t1Prescaler>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <Timer_Init+0x54>
 1dc:	95 b5       	in	r25, 0x25	; 37
 1de:	82 81       	ldd	r24, Z+2	; 0x02
 1e0:	89 2b       	or	r24, r25
 1e2:	85 bd       	out	0x25, r24	; 37
 1e4:	86 81       	ldd	r24, Z+6	; 0x06
 1e6:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <gu8_t2Prescaler>
 1ea:	78 94       	sei
 1ec:	99 b7       	in	r25, 0x39	; 57
 1ee:	80 85       	ldd	r24, Z+8	; 0x08
 1f0:	89 2b       	or	r24, r25
 1f2:	89 bf       	out	0x39, r24	; 57
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret

000001fc <Timer_Start>:
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	59 f0       	breq	.+22     	; 0x216 <Timer_Start+0x1a>
 200:	18 f0       	brcs	.+6      	; 0x208 <Timer_Start+0xc>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	99 f0       	breq	.+38     	; 0x22c <Timer_Start+0x30>
 206:	18 c0       	rjmp	.+48     	; 0x238 <Timer_Start+0x3c>
 208:	62 bf       	out	0x32, r22	; 50
 20a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu8_t0Prescaler>
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	89 2b       	or	r24, r25
 212:	83 bf       	out	0x33, r24	; 51
 214:	11 c0       	rjmp	.+34     	; 0x238 <Timer_Start+0x3c>
 216:	77 27       	eor	r23, r23
 218:	7d bd       	out	0x2d, r23	; 45
 21a:	6c bd       	out	0x2c, r22	; 44
 21c:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <gu16_t1Prescaler>
 220:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <gu16_t1Prescaler+0x1>
 224:	9e b5       	in	r25, 0x2e	; 46
 226:	89 2b       	or	r24, r25
 228:	8e bd       	out	0x2e, r24	; 46
 22a:	06 c0       	rjmp	.+12     	; 0x238 <Timer_Start+0x3c>
 22c:	64 bd       	out	0x24, r22	; 36
 22e:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <gu8_t2Prescaler>
 232:	85 b5       	in	r24, 0x25	; 37
 234:	89 2b       	or	r24, r25
 236:	85 bd       	out	0x25, r24	; 37
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret

0000023c <Timer_Stop>:
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	39 f0       	breq	.+14     	; 0x24e <Timer_Stop+0x12>
 240:	18 f0       	brcs	.+6      	; 0x248 <Timer_Stop+0xc>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	39 f0       	breq	.+14     	; 0x254 <Timer_Stop+0x18>
 246:	08 c0       	rjmp	.+16     	; 0x258 <Timer_Stop+0x1c>
 248:	83 b7       	in	r24, 0x33	; 51
 24a:	13 be       	out	0x33, r1	; 51
 24c:	05 c0       	rjmp	.+10     	; 0x258 <Timer_Stop+0x1c>
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	1e bc       	out	0x2e, r1	; 46
 252:	02 c0       	rjmp	.+4      	; 0x258 <Timer_Stop+0x1c>
 254:	85 b5       	in	r24, 0x25	; 37
 256:	15 bc       	out	0x25, r1	; 37
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret

0000025c <Timer_SetValue>:
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	31 f0       	breq	.+12     	; 0x26c <Timer_SetValue+0x10>
 260:	18 f0       	brcs	.+6      	; 0x268 <Timer_SetValue+0xc>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	31 f0       	breq	.+12     	; 0x272 <Timer_SetValue+0x16>
 266:	06 c0       	rjmp	.+12     	; 0x274 <Timer_SetValue+0x18>
 268:	62 bf       	out	0x32, r22	; 50
 26a:	04 c0       	rjmp	.+8      	; 0x274 <Timer_SetValue+0x18>
 26c:	7d bd       	out	0x2d, r23	; 45
 26e:	6c bd       	out	0x2c, r22	; 44
 270:	01 c0       	rjmp	.+2      	; 0x274 <Timer_SetValue+0x18>
 272:	64 bd       	out	0x24, r22	; 36
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret

00000278 <Timer_GetValue>:
 278:	61 15       	cp	r22, r1
 27a:	71 05       	cpc	r23, r1
 27c:	d9 f0       	breq	.+54     	; 0x2b4 <Timer_GetValue+0x3c>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	59 f0       	breq	.+22     	; 0x298 <Timer_GetValue+0x20>
 282:	18 f0       	brcs	.+6      	; 0x28a <Timer_GetValue+0x12>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	79 f0       	breq	.+30     	; 0x2a6 <Timer_GetValue+0x2e>
 288:	17 c0       	rjmp	.+46     	; 0x2b8 <Timer_GetValue+0x40>
 28a:	82 b7       	in	r24, 0x32	; 50
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fb 01       	movw	r30, r22
 290:	91 83       	std	Z+1, r25	; 0x01
 292:	80 83       	st	Z, r24
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	8c b5       	in	r24, 0x2c	; 44
 29a:	9d b5       	in	r25, 0x2d	; 45
 29c:	fb 01       	movw	r30, r22
 29e:	91 83       	std	Z+1, r25	; 0x01
 2a0:	80 83       	st	Z, r24
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	84 b5       	in	r24, 0x24	; 36
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fb 01       	movw	r30, r22
 2ac:	91 83       	std	Z+1, r25	; 0x01
 2ae:	80 83       	st	Z, r24
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 2d2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gu32_overflowTimes>
 2d6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu32_overflowTimes+0x1>
 2da:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <gu32_overflowTimes+0x2>
 2de:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <gu32_overflowTimes+0x3>
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	a1 1d       	adc	r26, r1
 2e6:	b1 1d       	adc	r27, r1
 2e8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <gu32_overflowTimes>
 2ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <gu32_overflowTimes+0x1>
 2f0:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <gu32_overflowTimes+0x2>
 2f4:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
 2fe:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <gu16_preloader>
 302:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <gu16_preloader+0x1>
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Timer_value)
{
   switch(Timer_CH_NO)
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	82 1b       	sub	r24, r18
 30c:	93 0b       	sbc	r25, r19
 30e:	82 bf       	out	0x32, r24	; 50
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));   
     
}
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_9>:

ISR_TIMER1_OVF(){
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++; 
 338:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gu32_overflowTimes>
 33c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu32_overflowTimes+0x1>
 340:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <gu32_overflowTimes+0x2>
 344:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <gu32_overflowTimes+0x3>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	a1 1d       	adc	r26, r1
 34c:	b1 1d       	adc	r27, r1
 34e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <gu32_overflowTimes>
 352:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <gu32_overflowTimes+0x1>
 356:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <gu32_overflowTimes+0x2>
 35a:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
 364:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <gu16_preloader>
 368:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <gu16_preloader+0x1>
 36c:	91 95       	neg	r25
 36e:	81 95       	neg	r24
 370:	91 09       	sbc	r25, r1
   {
      case TIMER_0:
         TCNT0 = (uint8_t)Timer_value;         
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
 372:	9d bd       	out	0x2d, r25	; 45
 374:	8c bd       	out	0x2c, r24	; 44
   gu32_overflowTimes++; 
   /* 2 - Rise execute flag */
   gu8_excuteFlag = 1; 
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));     
}
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_5>:

ISR_TIMER2_OVF(){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
   /*---- TMU Over Flow Procedure ----*/
   /* 1 - Increment Global over flow times counter --*/
   gu32_overflowTimes++;
 39e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gu32_overflowTimes>
 3a2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gu32_overflowTimes+0x1>
 3a6:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <gu32_overflowTimes+0x2>
 3aa:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <gu32_overflowTimes+0x3>
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
 3b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <gu32_overflowTimes>
 3b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <gu32_overflowTimes+0x1>
 3bc:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <gu32_overflowTimes+0x2>
 3c0:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <gu32_overflowTimes+0x3>
   /* 2 - Rise execute flag or tick flag */
   gu8_excuteFlag = 1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gu8_excuteFlag>
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
 3ca:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <gu16_preloader>
 3ce:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <gu16_preloader+0x1>
      break;
      case TIMER_1:
         TCNT1 = Timer_value;
      break;
      case TIMER_2:
         TCNT2 = (uint8_t)Timer_value;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	82 1b       	sub	r24, r18
 3d8:	93 0b       	sbc	r25, r19
 3da:	84 bd       	out	0x24, r24	; 36
   /* 2 - Rise execute flag or tick flag */
   gu8_excuteFlag = 1;
   /* 3 - Reload TCNT ---*/   
   Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));   
     
}
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__vector_10>:



ISR_TIMER0_COMP(){
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
   /*set pins*/
   //gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
}
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_13>:
/*--------------------------------------------------- Interrupt handlers  -----------------------------------------*/
/*
* USART on successful character receive completion interrupt handler 
*/
ISR_USART_RX()
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
   /* on successful character reception : you can read the new character */  
   //gu8_RX_CompleteFlag = 1;
   rx_call_back();
 428:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <rx_call_back>
 42c:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <rx_call_back+0x1>
 430:	09 95       	icall
}
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_15>:
//{
   /* if data register is empty : you can write a new character. */            
//}

ISR_USART_TX()
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
   /* if data register is empty : you can write a new character. */
   //gu8_TX_CompleteFlag = 1;
   tx_call_back();     
 476:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <tx_call_back>
 47a:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <tx_call_back+0x1>
 47e:	09 95       	icall
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <TMU_Init>:
*  @param  const strTMU_Cfg_t *  strTMU_Init
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Init(const strTMU_Cfg_t * strTMU_Init)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
   /* Define Error state */
   uint8_t au8_errorState;
   /* Check pointer value */ 
   if(NULL != strTMU_Init)
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	09 f4       	brne	.+2      	; 0x4ac <TMU_Init+0xa>
 4aa:	85 c0       	rjmp	.+266    	; 0x5b6 <TMU_Init+0x114>
 4ac:	ec 01       	movw	r28, r24
   {
      /* Initializes the given timer */
      switch(strTMU_Init->timer_channel)
 4ae:	88 81       	ld	r24, Y
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	79 f1       	breq	.+94     	; 0x512 <TMU_Init+0x70>
 4b4:	20 f0       	brcs	.+8      	; 0x4be <TMU_Init+0x1c>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	09 f4       	brne	.+2      	; 0x4bc <TMU_Init+0x1a>
 4ba:	54 c0       	rjmp	.+168    	; 0x564 <TMU_Init+0xc2>
 4bc:	7e c0       	rjmp	.+252    	; 0x5ba <TMU_Init+0x118>
      {
         case TIMER_0:
            /* Initialize timer0 */
            Timer_Init(&gstrTimer0TmuConfig);
 4be:	84 e7       	ldi	r24, 0x74	; 116
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer0TmuConfig.u16_prescal)
 4c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gstrTimer0TmuConfig+0x6>
 4ca:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gstrTimer0TmuConfig+0x7>
 4ce:	05 97       	sbiw	r24, 0x05	; 5
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <TMU_Init+0x32>
 4d2:	75 c0       	rjmp	.+234    	; 0x5be <TMU_Init+0x11c>
               break;
               case T0_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 4d4:	69 81       	ldd	r22, Y+1	; 0x01
 4d6:	7a 81       	ldd	r23, Y+2	; 0x02
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	4a e7       	ldi	r20, 0x7A	; 122
 4e6:	51 e4       	ldi	r21, 0x41	; 65
 4e8:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 4ec:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 4f0:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gu16_preloader+0x1>
 4f4:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gu16_preloader>
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
 4f8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <gu16_preloader>
 4fc:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <gu16_preloader+0x1>
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	68 1b       	sub	r22, r24
 506:	79 0b       	sbc	r23, r25
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 2e 01 	call	0x25c	; 0x25c <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 50e:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T0_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_0 , (T0_OV_VAL - gu16_preloader));
               break;               
 510:	5b c0       	rjmp	.+182    	; 0x5c8 <TMU_Init+0x126>
            }            
         break;
         case TIMER_1:
            /*Initialize timer1*/
            Timer_Init(&gstrTimer1TmuConfig);
 512:	8a e6       	ldi	r24, 0x6A	; 106
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer1TmuConfig.u16_prescal)
 51a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gstrTimer1TmuConfig+0x6>
 51e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gstrTimer1TmuConfig+0x7>
 522:	05 97       	sbiw	r24, 0x05	; 5
 524:	09 f0       	breq	.+2      	; 0x528 <TMU_Init+0x86>
 526:	4d c0       	rjmp	.+154    	; 0x5c2 <TMU_Init+0x120>
               break;
               case T1_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 528:	69 81       	ldd	r22, Y+1	; 0x01
 52a:	7a 81       	ldd	r23, Y+2	; 0x02
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	4a e7       	ldi	r20, 0x7A	; 122
 53a:	51 e4       	ldi	r21, 0x41	; 65
 53c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 540:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 544:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gu16_preloader+0x1>
 548:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gu16_preloader>
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
 54c:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <gu16_preloader>
 550:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <gu16_preloader+0x1>
 554:	71 95       	neg	r23
 556:	61 95       	neg	r22
 558:	71 09       	sbc	r23, r1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 2e 01 	call	0x25c	; 0x25c <Timer_SetValue>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 560:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T1_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_1 , (T1_OV_VAL - gu16_preloader));
               break;
 562:	32 c0       	rjmp	.+100    	; 0x5c8 <TMU_Init+0x126>
            }
         break;
         case TIMER_2:
            /*Initialize timer2*/
            Timer_Init(&gstrTimer2TmuConfig);
 564:	80 e6       	ldi	r24, 0x60	; 96
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 cb 00 	call	0x196	; 0x196 <Timer_Init>
            /* Calculate the value to be set to the timer according to the prescaler set in configuration */
            switch(gstrTimer2TmuConfig.u16_prescal)
 56c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 570:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 574:	07 97       	sbiw	r24, 0x07	; 7
 576:	39 f5       	brne	.+78     	; 0x5c6 <TMU_Init+0x124>
               break;
               case T2_PRESCALER_256:;
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
 578:	69 81       	ldd	r22, Y+1	; 0x01
 57a:	7a 81       	ldd	r23, Y+2	; 0x02
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	4a e7       	ldi	r20, 0x7A	; 122
 58a:	51 e4       	ldi	r21, 0x41	; 65
 58c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 590:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 594:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gu16_preloader+0x1>
 598:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gu16_preloader>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
 59c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <gu16_preloader>
 5a0:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <gu16_preloader+0x1>
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	71 e0       	ldi	r23, 0x01	; 1
 5a8:	68 1b       	sub	r22, r24
 5aa:	79 0b       	sbc	r23, r25
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0e 94 2e 01 	call	0x25c	; 0x25c <Timer_SetValue>
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 5b2:	80 e0       	ldi	r24, 0x00	; 0
                  /* not used currently*/
               break;
               case T2_PRESCALER_1024:
                  gu16_preloader = (uint16_t)(((double)INVERSE_TICK_TIME_PRESCALE_1024 / MILLI_SECONDS) * strTMU_Init->resolution);
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <TMU_Init+0x126>
            }
         break;
      }
      au8_errorState = INIT_OK;      
   }else{
      au8_errorState = INIT_NOK;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <TMU_Init+0x126>
                  Timer_SetValue(TIMER_2 , (T2_OV_VAL - gu16_preloader));
               break;
            }
         break;
      }
      au8_errorState = INIT_OK;      
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <TMU_Init+0x126>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <TMU_Init+0x126>
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <TMU_Init+0x126>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
   }else{
      au8_errorState = INIT_NOK;
   }   
   /* Return error state */
   return au8_errorState;
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <TMU_Dispatch>:
*  @param void
*
*  @return EnmTMUError_t
*/
EnmTMUError_t TMU_Dispatch(void)
{
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
    /* Define Error state */
   uint8_t au8_errorState;   
   /* Check if the buffer not empty */
   if((0 <= gindex) && (1 == gu8_excuteFlag))
 5de:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 5e2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 5e6:	99 23       	and	r25, r25
 5e8:	0c f4       	brge	.+2      	; 0x5ec <TMU_Dispatch+0x1e>
 5ea:	4c c0       	rjmp	.+152    	; 0x684 <TMU_Dispatch+0xb6>
 5ec:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <gu8_excuteFlag>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <TMU_Dispatch+0x28>
 5f4:	47 c0       	rjmp	.+142    	; 0x684 <TMU_Dispatch+0xb6>
   {
      sint16_t au16_iter = 0;
      //uint32_t au32_overFlowTimes = gu32_overflowTimes;
      /* 1 - pull down execute flag or tick flag */
      gu8_excuteFlag = 0;
 5f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <gu8_excuteFlag>
 5fa:	c8 e9       	ldi	r28, 0x98	; 152
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
 5fe:	00 e0       	ldi	r16, 0x00	; 0
 600:	10 e0       	ldi	r17, 0x00	; 0
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
               {
                  /* Decrement gindex*/
                  gindex = -1;
 602:	ee 24       	eor	r14, r14
 604:	ea 94       	dec	r14
 606:	fe 2c       	mov	r15, r14
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
      {
         /* Increment task internal tick count */
         garrTaskTMUBuffer[au16_iter].tick_counts++;
 608:	8d 81       	ldd	r24, Y+5	; 0x05
 60a:	9e 81       	ldd	r25, Y+6	; 0x06
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	9e 83       	std	Y+6, r25	; 0x06
 610:	8d 83       	std	Y+5, r24	; 0x05
         /* Check if task ticks count has reached to the required tick value -which is (task.counter)- to determine whether to execute task's function or not */
         if((garrTaskTMUBuffer[au16_iter].tick_counts) == (garrTaskTMUBuffer[au16_iter].counter))
 612:	2a 81       	ldd	r18, Y+2	; 0x02
 614:	3b 81       	ldd	r19, Y+3	; 0x03
 616:	82 17       	cp	r24, r18
 618:	93 07       	cpc	r25, r19
 61a:	51 f5       	brne	.+84     	; 0x670 <TMU_Dispatch+0xa2>
         { 
            /* 2 - Reset task tick_counts*/ 
            garrTaskTMUBuffer[au16_iter].tick_counts = 0;          
 61c:	1e 82       	std	Y+6, r1	; 0x06
 61e:	1d 82       	std	Y+5, r1	; 0x05
            /* 3 - Execute Task Function */
            garrTaskTMUBuffer[au16_iter].fn();                      
 620:	e8 81       	ld	r30, Y
 622:	f9 81       	ldd	r31, Y+1	; 0x01
 624:	09 95       	icall
            /* 4 - See Whether the task is periodic or one shoot -after its execution- */
            if(ONESHOOT == garrTaskTMUBuffer[au16_iter].work_mode)
 626:	8c 81       	ldd	r24, Y+4	; 0x04
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	11 f5       	brne	.+68     	; 0x670 <TMU_Dispatch+0xa2>
            {
               /* Case of buffer contains only one element */
               if(0 == gindex)               
 62c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 630:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	29 f4       	brne	.+10     	; 0x642 <TMU_Dispatch+0x74>
               {
                  /* Decrement gindex*/
                  gindex = -1;
 638:	f0 92 7f 00 	sts	0x007F, r15	; 0x80007f <gindex+0x1>
 63c:	e0 92 7e 00 	sts	0x007E, r14	; 0x80007e <gindex>
 640:	17 c0       	rjmp	.+46     	; 0x670 <TMU_Dispatch+0xa2>
               }                
               else
               {
                  /* remove the Task : by replacing it with the last task in the buffer */
                  garrTaskTMUBuffer[au16_iter] = garrTaskTMUBuffer[gindex];
 642:	fc 01       	movw	r30, r24
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	e8 1b       	sub	r30, r24
 652:	f9 0b       	sbc	r31, r25
 654:	e8 56       	subi	r30, 0x68	; 104
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	27 e0       	ldi	r18, 0x07	; 7
 65a:	ac 2f       	mov	r26, r28
 65c:	bd 2f       	mov	r27, r29
 65e:	01 90       	ld	r0, Z+
 660:	0d 92       	st	X+, r0
 662:	2a 95       	dec	r18
 664:	e1 f7       	brne	.-8      	; 0x65e <TMU_Dispatch+0x90>
                  /* Decrement gindex */
                  gindex--;                  
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 66c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
      //uint32_t au32_overFlowTimes = gu32_overflowTimes;
      /* 1 - pull down execute flag or tick flag */
      gu8_excuteFlag = 0;
      
      /* Search for the Task of the given function within TMU buffer*/
      for(;au16_iter <= gindex; au16_iter++)
 670:	0f 5f       	subi	r16, 0xFF	; 255
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	27 96       	adiw	r28, 0x07	; 7
 676:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 67a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 67e:	80 17       	cp	r24, r16
 680:	91 07       	cpc	r25, r17
 682:	14 f6       	brge	.-124    	; 0x608 <TMU_Dispatch+0x3a>
   {
      /* return error code array is empty */;
      au8_errorState = BUFFER_EMPTY;      
   }
   return au8_errorState;  
}
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	df 90       	pop	r13
 694:	cf 90       	pop	r12
 696:	08 95       	ret

00000698 <TMU_Start_Timer>:
   */
   /*--- End Debug Point ---*/
   /* Define Error state */
   uint8_t au8_errorState = 0;
   
   if(NULL != task_fn)
 698:	61 15       	cp	r22, r1
 69a:	71 05       	cpc	r23, r1
 69c:	59 f1       	breq	.+86     	; 0x6f4 <TMU_Start_Timer+0x5c>
   {
      /*---- Enable Interrupt ----*/
      /*---- Add Task to TMU Buffer while buffer is not full ----*/
      if(TMU_BUFFER_SIZE > gindex)
 69e:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <gindex>
 6a2:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <gindex+0x1>
 6a6:	2a 30       	cpi	r18, 0x0A	; 10
 6a8:	31 05       	cpc	r19, r1
 6aa:	34 f5       	brge	.+76     	; 0x6f8 <TMU_Start_Timer+0x60>
      {
         /* Create a new task */
         strTask_t *austr_Task = NULL;
         austr_Task->fn = task_fn;
 6ac:	e0 e0       	ldi	r30, 0x00	; 0
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	71 83       	std	Z+1, r23	; 0x01
 6b2:	60 83       	st	Z, r22
         austr_Task->counter = duration;
 6b4:	93 83       	std	Z+3, r25	; 0x03
 6b6:	82 83       	std	Z+2, r24	; 0x02
         austr_Task->work_mode = work_mode;
 6b8:	44 83       	std	Z+4, r20	; 0x04
         austr_Task->tick_counts = 0;
 6ba:	16 82       	std	Z+6, r1	; 0x06
 6bc:	15 82       	std	Z+5, r1	; 0x05
         /* Increment gindex : to point to the next empty location to store the new task */
         gindex++;         
 6be:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gindex>
 6c2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gindex+0x1>
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gindex+0x1>
 6cc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gindex>
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
 6d0:	dc 01       	movw	r26, r24
 6d2:	aa 0f       	add	r26, r26
 6d4:	bb 1f       	adc	r27, r27
 6d6:	aa 0f       	add	r26, r26
 6d8:	bb 1f       	adc	r27, r27
 6da:	aa 0f       	add	r26, r26
 6dc:	bb 1f       	adc	r27, r27
 6de:	a8 1b       	sub	r26, r24
 6e0:	b9 0b       	sbc	r27, r25
 6e2:	a8 56       	subi	r26, 0x68	; 104
 6e4:	bf 4f       	sbci	r27, 0xFF	; 255
 6e6:	87 e0       	ldi	r24, 0x07	; 7
 6e8:	01 90       	ld	r0, Z+
 6ea:	0d 92       	st	X+, r0
 6ec:	8a 95       	dec	r24
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <TMU_Start_Timer+0x50>
   garrTaskTMUBuffer[0] = *austr_Task;
   return 0;
   */
   /*--- End Debug Point ---*/
   /* Define Error state */
   uint8_t au8_errorState = 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	08 95       	ret
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
 6f4:	85 e0       	ldi	r24, 0x05	; 5
 6f6:	08 95       	ret
         gindex++;         
         /* Append the task to TMU buffer */
         garrTaskTMUBuffer[gindex] = *austr_Task;         
      }else{
         /* return error code buffer is full*/
         au8_errorState = BUFFER_FULL;
 6f8:	83 e0       	ldi	r24, 0x03	; 3
      }
   }else{
      au8_errorState = INVALID_TASK_PARAM;
   }  
   return au8_errorState;
}
 6fa:	08 95       	ret

000006fc <taskA>:
}

void taskD(void)
{
   PORTB_DIR = 0xff;
   PORTB_DATA ^= 0x80;
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	8a bb       	out	0x1a, r24	; 26
 700:	9b b3       	in	r25, 0x1b	; 27
 702:	80 e1       	ldi	r24, 0x10	; 16
 704:	89 27       	eor	r24, r25
 706:	8b bb       	out	0x1b, r24	; 27
 708:	08 95       	ret

0000070a <taskB>:
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	8a bb       	out	0x1a, r24	; 26
 70e:	9b b3       	in	r25, 0x1b	; 27
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	89 27       	eor	r24, r25
 714:	8b bb       	out	0x1b, r24	; 27
 716:	08 95       	ret

00000718 <taskC>:
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	8a bb       	out	0x1a, r24	; 26
 71c:	9b b3       	in	r25, 0x1b	; 27
 71e:	80 e4       	ldi	r24, 0x40	; 64
 720:	89 27       	eor	r24, r25
 722:	8b bb       	out	0x1b, r24	; 27
 724:	08 95       	ret

00000726 <cpu_sleep>:
}

void cpu_sleep()
{
   /* Idle mode */
   MCUCR &= ~(1<<5) & ~(1<<6) & ~(1<<4);
 726:	85 b7       	in	r24, 0x35	; 53
 728:	8f 78       	andi	r24, 0x8F	; 143
 72a:	85 bf       	out	0x35, r24	; 53
   /* Sleep enable */
   MCUCR |= (1<<7);
 72c:	85 b7       	in	r24, 0x35	; 53
 72e:	80 68       	ori	r24, 0x80	; 128
 730:	85 bf       	out	0x35, r24	; 53
   __asm__ __volatile__("sleep" "\n\t" ::);
 732:	88 95       	sleep
 734:	08 95       	ret

00000736 <TmuTest>:
*
*  @return void
*/
void TmuTest(void)
{
   PORTA_DIR = 0xff;
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	8a bb       	out	0x1a, r24	; 26
   TMU_Init(&gstrTMUConfig);
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <TMU_Init>
   TMU_Start_Timer(5,taskA,PERIODIC);
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	6e e7       	ldi	r22, 0x7E	; 126
 746:	73 e0       	ldi	r23, 0x03	; 3
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 4c 03 	call	0x698	; 0x698 <TMU_Start_Timer>
   TMU_Start_Timer(10,taskB,PERIODIC);
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	65 e8       	ldi	r22, 0x85	; 133
 754:	73 e0       	ldi	r23, 0x03	; 3
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 4c 03 	call	0x698	; 0x698 <TMU_Start_Timer>
   TMU_Start_Timer(20,taskC,PERIODIC);
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	6c e8       	ldi	r22, 0x8C	; 140
 762:	73 e0       	ldi	r23, 0x03	; 3
 764:	84 e1       	ldi	r24, 0x14	; 20
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 4c 03 	call	0x698	; 0x698 <TMU_Start_Timer>
   //TMU_Start_Timer(60,taskD,PERIODIC);
   Timer_Start(TIMER_1,0);
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Timer_Start>
   while(1)
   {
      PORTA_DATA |= 0x08;
 776:	db 9a       	sbi	0x1b, 3	; 27
      TMU_Dispatch();
 778:	0e 94 e7 02 	call	0x5ce	; 0x5ce <TMU_Dispatch>
      PORTA_DATA &= ~(0x08);
 77c:	db 98       	cbi	0x1b, 3	; 27
      cpu_sleep();
 77e:	0e 94 93 03 	call	0x726	; 0x726 <cpu_sleep>
 782:	f9 cf       	rjmp	.-14     	; 0x776 <TmuTest+0x40>

00000784 <__fixunssfsi>:
 784:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_splitA>
 788:	88 f0       	brcs	.+34     	; 0x7ac <__fixunssfsi+0x28>
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	98 f0       	brcs	.+38     	; 0x7b4 <__fixunssfsi+0x30>
 78e:	b9 2f       	mov	r27, r25
 790:	99 27       	eor	r25, r25
 792:	b7 51       	subi	r27, 0x17	; 23
 794:	b0 f0       	brcs	.+44     	; 0x7c2 <__fixunssfsi+0x3e>
 796:	e1 f0       	breq	.+56     	; 0x7d0 <__fixunssfsi+0x4c>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	1a f0       	brmi	.+6      	; 0x7a8 <__fixunssfsi+0x24>
 7a2:	ba 95       	dec	r27
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__fixunssfsi+0x14>
 7a6:	14 c0       	rjmp	.+40     	; 0x7d0 <__fixunssfsi+0x4c>
 7a8:	b1 30       	cpi	r27, 0x01	; 1
 7aa:	91 f0       	breq	.+36     	; 0x7d0 <__fixunssfsi+0x4c>
 7ac:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_zero>
 7b0:	b1 e0       	ldi	r27, 0x01	; 1
 7b2:	08 95       	ret
 7b4:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_zero>
 7b8:	67 2f       	mov	r22, r23
 7ba:	78 2f       	mov	r23, r24
 7bc:	88 27       	eor	r24, r24
 7be:	b8 5f       	subi	r27, 0xF8	; 248
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <__fixunssfsi+0x4c>
 7c2:	b9 3f       	cpi	r27, 0xF9	; 249
 7c4:	cc f3       	brlt	.-14     	; 0x7b8 <__fixunssfsi+0x34>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b3 95       	inc	r27
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <__fixunssfsi+0x42>
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__fixunssfsi+0x5c>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__floatunsisf>:
 7e2:	e8 94       	clt
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__floatsisf+0x12>

000007e6 <__floatsisf>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__floatsisf+0x12>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	99 23       	and	r25, r25
 7fa:	a9 f0       	breq	.+42     	; 0x826 <__floatsisf+0x40>
 7fc:	f9 2f       	mov	r31, r25
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	bb 27       	eor	r27, r27
 802:	93 95       	inc	r25
 804:	f6 95       	lsr	r31
 806:	87 95       	ror	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b7 95       	ror	r27
 80e:	f1 11       	cpse	r31, r1
 810:	f8 cf       	rjmp	.-16     	; 0x802 <__floatsisf+0x1c>
 812:	fa f4       	brpl	.+62     	; 0x852 <__floatsisf+0x6c>
 814:	bb 0f       	add	r27, r27
 816:	11 f4       	brne	.+4      	; 0x81c <__floatsisf+0x36>
 818:	60 ff       	sbrs	r22, 0
 81a:	1b c0       	rjmp	.+54     	; 0x852 <__floatsisf+0x6c>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	16 c0       	rjmp	.+44     	; 0x852 <__floatsisf+0x6c>
 826:	88 23       	and	r24, r24
 828:	11 f0       	breq	.+4      	; 0x82e <__floatsisf+0x48>
 82a:	96 e9       	ldi	r25, 0x96	; 150
 82c:	11 c0       	rjmp	.+34     	; 0x850 <__floatsisf+0x6a>
 82e:	77 23       	and	r23, r23
 830:	21 f0       	breq	.+8      	; 0x83a <__floatsisf+0x54>
 832:	9e e8       	ldi	r25, 0x8E	; 142
 834:	87 2f       	mov	r24, r23
 836:	76 2f       	mov	r23, r22
 838:	05 c0       	rjmp	.+10     	; 0x844 <__floatsisf+0x5e>
 83a:	66 23       	and	r22, r22
 83c:	71 f0       	breq	.+28     	; 0x85a <__floatsisf+0x74>
 83e:	96 e8       	ldi	r25, 0x86	; 134
 840:	86 2f       	mov	r24, r22
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	2a f0       	brmi	.+10     	; 0x852 <__floatsisf+0x6c>
 848:	9a 95       	dec	r25
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	da f7       	brpl	.-10     	; 0x848 <__floatsisf+0x62>
 852:	88 0f       	add	r24, r24
 854:	96 95       	lsr	r25
 856:	87 95       	ror	r24
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__fp_split3>:
 85c:	57 fd       	sbrc	r21, 7
 85e:	90 58       	subi	r25, 0x80	; 128
 860:	44 0f       	add	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	59 f0       	breq	.+22     	; 0x87c <__fp_splitA+0x10>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	71 f0       	breq	.+28     	; 0x886 <__fp_splitA+0x1a>
 86a:	47 95       	ror	r20

0000086c <__fp_splitA>:
 86c:	88 0f       	add	r24, r24
 86e:	97 fb       	bst	r25, 7
 870:	99 1f       	adc	r25, r25
 872:	61 f0       	breq	.+24     	; 0x88c <__fp_splitA+0x20>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	79 f0       	breq	.+30     	; 0x896 <__fp_splitA+0x2a>
 878:	87 95       	ror	r24
 87a:	08 95       	ret
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	55 1f       	adc	r21, r21
 884:	f2 cf       	rjmp	.-28     	; 0x86a <__stack+0xb>
 886:	46 95       	lsr	r20
 888:	f1 df       	rcall	.-30     	; 0x86c <__fp_splitA>
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__fp_splitA+0x30>
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	99 1f       	adc	r25, r25
 894:	f1 cf       	rjmp	.-30     	; 0x878 <__fp_splitA+0xc>
 896:	86 95       	lsr	r24
 898:	71 05       	cpc	r23, r1
 89a:	61 05       	cpc	r22, r1
 89c:	08 94       	sec
 89e:	08 95       	ret

000008a0 <__fp_zero>:
 8a0:	e8 94       	clt

000008a2 <__fp_szero>:
 8a2:	bb 27       	eor	r27, r27
 8a4:	66 27       	eor	r22, r22
 8a6:	77 27       	eor	r23, r23
 8a8:	cb 01       	movw	r24, r22
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__mulsf3>:
 8ae:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__mulsf3x>
 8b2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_round>
 8b6:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscA>
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__mulsf3+0x1c>
 8bc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_pscB>
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__mulsf3+0x1c>
 8c2:	95 23       	and	r25, r21
 8c4:	11 f0       	breq	.+4      	; 0x8ca <__mulsf3+0x1c>
 8c6:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 8ca:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_nan>
 8ce:	11 24       	eor	r1, r1
 8d0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_szero>

000008d4 <__mulsf3x>:
 8d4:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_split3>
 8d8:	70 f3       	brcs	.-36     	; 0x8b6 <__mulsf3+0x8>

000008da <__mulsf3_pse>:
 8da:	95 9f       	mul	r25, r21
 8dc:	c1 f3       	breq	.-16     	; 0x8ce <__mulsf3+0x20>
 8de:	95 0f       	add	r25, r21
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	55 1f       	adc	r21, r21
 8e4:	62 9f       	mul	r22, r18
 8e6:	f0 01       	movw	r30, r0
 8e8:	72 9f       	mul	r23, r18
 8ea:	bb 27       	eor	r27, r27
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	63 9f       	mul	r22, r19
 8f2:	aa 27       	eor	r26, r26
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	aa 1f       	adc	r26, r26
 8fa:	64 9f       	mul	r22, r20
 8fc:	66 27       	eor	r22, r22
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	66 1f       	adc	r22, r22
 904:	82 9f       	mul	r24, r18
 906:	22 27       	eor	r18, r18
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	73 9f       	mul	r23, r19
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	83 9f       	mul	r24, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	22 1f       	adc	r18, r18
 91e:	74 9f       	mul	r23, r20
 920:	33 27       	eor	r19, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	23 1f       	adc	r18, r19
 928:	84 9f       	mul	r24, r20
 92a:	60 0d       	add	r22, r0
 92c:	21 1d       	adc	r18, r1
 92e:	82 2f       	mov	r24, r18
 930:	76 2f       	mov	r23, r22
 932:	6a 2f       	mov	r22, r26
 934:	11 24       	eor	r1, r1
 936:	9f 57       	subi	r25, 0x7F	; 127
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	9a f0       	brmi	.+38     	; 0x962 <__mulsf3_pse+0x88>
 93c:	f1 f0       	breq	.+60     	; 0x97a <__mulsf3_pse+0xa0>
 93e:	88 23       	and	r24, r24
 940:	4a f0       	brmi	.+18     	; 0x954 <__mulsf3_pse+0x7a>
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	a9 f7       	brne	.-22     	; 0x93e <__mulsf3_pse+0x64>
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	51 05       	cpc	r21, r1
 958:	80 f0       	brcs	.+32     	; 0x97a <__mulsf3_pse+0xa0>
 95a:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 95e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_szero>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	e4 f3       	brlt	.-8      	; 0x95e <__mulsf3_pse+0x84>
 966:	98 3e       	cpi	r25, 0xE8	; 232
 968:	d4 f3       	brlt	.-12     	; 0x95e <__mulsf3_pse+0x84>
 96a:	86 95       	lsr	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b7 95       	ror	r27
 972:	f7 95       	ror	r31
 974:	e7 95       	ror	r30
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	c1 f7       	brne	.-16     	; 0x96a <__mulsf3_pse+0x90>
 97a:	fe 2b       	or	r31, r30
 97c:	88 0f       	add	r24, r24
 97e:	91 1d       	adc	r25, r1
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <__fp_inf>:
 988:	97 f9       	bld	r25, 7
 98a:	9f 67       	ori	r25, 0x7F	; 127
 98c:	80 e8       	ldi	r24, 0x80	; 128
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	08 95       	ret

00000994 <__fp_nan>:
 994:	9f ef       	ldi	r25, 0xFF	; 255
 996:	80 ec       	ldi	r24, 0xC0	; 192
 998:	08 95       	ret

0000099a <__fp_pscA>:
 99a:	00 24       	eor	r0, r0
 99c:	0a 94       	dec	r0
 99e:	16 16       	cp	r1, r22
 9a0:	17 06       	cpc	r1, r23
 9a2:	18 06       	cpc	r1, r24
 9a4:	09 06       	cpc	r0, r25
 9a6:	08 95       	ret

000009a8 <__fp_pscB>:
 9a8:	00 24       	eor	r0, r0
 9aa:	0a 94       	dec	r0
 9ac:	12 16       	cp	r1, r18
 9ae:	13 06       	cpc	r1, r19
 9b0:	14 06       	cpc	r1, r20
 9b2:	05 06       	cpc	r0, r21
 9b4:	08 95       	ret

000009b6 <__fp_round>:
 9b6:	09 2e       	mov	r0, r25
 9b8:	03 94       	inc	r0
 9ba:	00 0c       	add	r0, r0
 9bc:	11 f4       	brne	.+4      	; 0x9c2 <__fp_round+0xc>
 9be:	88 23       	and	r24, r24
 9c0:	52 f0       	brmi	.+20     	; 0x9d6 <__fp_round+0x20>
 9c2:	bb 0f       	add	r27, r27
 9c4:	40 f4       	brcc	.+16     	; 0x9d6 <__fp_round+0x20>
 9c6:	bf 2b       	or	r27, r31
 9c8:	11 f4       	brne	.+4      	; 0x9ce <__fp_round+0x18>
 9ca:	60 ff       	sbrs	r22, 0
 9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <__fp_round+0x20>
 9ce:	6f 5f       	subi	r22, 0xFF	; 255
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>
